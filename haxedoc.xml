<haxe>
    <class path="Array" params="T" file="/usr/lib/haxe/std/Array.hx" extern="1">
        <filter public="1" set="method">
            <f a="f">
                <f a="">
                    <c path="Array.T"/>
                    <x path="Bool"/>
                </f>
                <c path="Array">
                    <c path="Array.T"/>
                </c>
            </f>
        </filter>
        <map public="1" params="S" set="method">
            <f a="f">
                <f a="">
                    <c path="Array.T"/>
                    <c path="map.S"/>
                </f>
                <c path="Array">
                    <c path="map.S"/>
                </c>
            </f>
        </map>
        <iterator public="1" set="method">
            <f a="">
                <t path="Iterator">
                    <c path="Array.T"/>
                </t>
            </f>
            <haxe_doc>Returns an iterator of the Array values.</haxe_doc>
        </iterator>
        <copy public="1" set="method">
            <f a="">
                <c path="Array">
                    <c path="Array.T"/>
                </c>
            </f>
            <haxe_doc>Returns a shallow copy of [this] Array.

                The elements are not copied and retain their identity, so
                a[i] == a.copy()[i] is true for any valid i. However, a == a.copy() is
                always false.
            </haxe_doc>
        </copy>
        <remove public="1" set="method">
            <f a="x">
                <c path="Array.T"/>
                <x path="Bool"/>
            </f>
            <haxe_doc>Removes the first occurence of [x] in [this] Array.

                This operation modifies [this] Array in place.

                If [x] is found by checking standard equality, it is removed from [this]
                Array and all following elements are reindexed acoordingly. The function
                then returns true.

                If [x] is not found, [this] Array is not changed and the function
                returns false.
            </haxe_doc>
        </remove>
        <insert public="1" set="method">
            <f a="pos:x">
                <x path="Int"/>
                <c path="Array.T"/>
                <x path="Void"/>
            </f>
            <haxe_doc>Inserts the element [x] at the position [pos].

                This operation modifies [this] Array in place.

                The offset is calculated like so:

                - If [pos] exceeds [this].length, the offset is [this].length.
                - If [pos] is negative, the offset is calculated from the end of [this]
                Array, i.e. [this].length + [pos]. If this yields a negative value,
                the offset is 0.
                - Otherwise, the offset is [pos].

                If the resulting offset does not exceed [this].length, all elements from
                and including that offset to the end of [this] Array are moved one index
                ahead.
            </haxe_doc>
        </insert>
        <unshift public="1" set="method">
            <f a="x">
                <c path="Array.T"/>
                <x path="Void"/>
            </f>
            <haxe_doc>Adds the element [x] at the start of [this] Array.

                This operation modifies [this] Array in place.

                [this].length and the index of each Array element increases by 1.
            </haxe_doc>
        </unshift>
        <toString public="1" set="method">
            <f a="">
                <c path="String"/>
            </f>
            <haxe_doc>Returns a string representation of [this] Array.

                The result will include the individual elements' String representations
                separated by comma. The enclosing [ ] may be missing on some platforms,
                use Std.string() to get a String representation that is consistent
                across platforms.
            </haxe_doc>
        </toString>
        <splice public="1" set="method">
            <f a="pos:len">
                <x path="Int"/>
                <x path="Int"/>
                <c path="Array">
                    <c path="Array.T"/>
                </c>
            </f>
            <haxe_doc><![CDATA[Removes [len] elements from [this] Array, starting at and including
		[pos], an returns them.

		This operation modifies [this] Array in place.

		If [len] is < 0 or [pos] exceeds [this].length, the result is the empty
		Array [].

		If [pos] is negative, its value is calculated from the end	of [this]
		Array by [this].length + [pos]. If this yields a negative value, 0 is
		used instead.

		If the sum of the resulting values for [len] and [pos] exceed
		[this].length, this operation will affect the elements from [pos] to the
		end of [this] Array.

		The length of the returned Array is equal to the new length of [this]
		Array subtracted from the original length of [this] Array. In other
		words, each element of the original [this] Array either remains in
		[this] Array or becomes an element of the returned Array.]]></haxe_doc>
        </splice>
        <sort public="1" set="method">
            <f a="f">
                <f a=":">
                    <c path="Array.T"/>
                    <c path="Array.T"/>
                    <x path="Int"/>
                </f>
                <x path="Void"/>
            </f>
            <haxe_doc><![CDATA[Sorts [this] Array according to the comparison function [f], where
		[f(x,y)] returns 0 if x == y, a positive Int if x > y and a
		negative Int if x < y.

		This operation modifies [this] Array in place.

		The sort operation is not guaranteed to be stable, which means that the
		order of equal elements may not be retained. For a stable Array sorting
		algorithm, haxe.ds.sort.MergeSort.sort() can be used instead.

		If [f] is null, the result is unspecified.]]></haxe_doc>
        </sort>
        <slice public="1" set="method">
            <f a="pos:?end">
                <x path="Int"/>
                <x path="Int"/>
                <c path="Array">
                    <c path="Array.T"/>
                </c>
            </f>
            <haxe_doc>Creates a shallow copy of the range of [this] Array, starting at and
                including [pos], up to but not including [end].

                This operation does not modify [this] Array.

                The elements are not copied and retain their identity.

                If [end] is omitted or exceeds [this].length, it defaults to the end of
                [this] Array.

                If [pos] or [end] are negative, their offsets are calculated from the
                end of [this] Array by [this].length + [pos] and [this].length + [end]
                respectively. If this yields a negative value, 0 is used instead.

                If [pos] exceeds [this].length or if [end} exceeds or equals [pos],
                the result is [].
            </haxe_doc>
        </slice>
        <shift public="1" set="method">
            <f a="">
                <t path="Null">
                    <c path="Array.T"/>
                </t>
            </f>
            <haxe_doc>Removes the first element of [this] Array and returns it.

                This operation modifies [this] Array in place.

                If [this] has at least one element, [this].length and the index of each
                remaining element is decreased by 1.

                If [this] is the empty Array [], null is returned and the length remains
                0.
            </haxe_doc>
        </shift>
        <reverse public="1" set="method">
            <f a="">
                <x path="Void"/>
            </f>
            <haxe_doc><![CDATA[Reverse the order of elements of [this] Array.

		This operation modifies [this] Array in place.

		If [this].length < 2, [this] remains unchanged.]]></haxe_doc>
        </reverse>
        <push public="1" set="method">
            <f a="x">
                <c path="Array.T"/>
                <x path="Int"/>
            </f>
            <haxe_doc>Adds the element [x] at the end of [this] Array and returns the offset
                it was added at.

                This operation modifies [this] Array in place.

                [this].length increases by 1.
            </haxe_doc>
        </push>
        <pop public="1" set="method">
            <f a="">
                <t path="Null">
                    <c path="Array.T"/>
                </t>
            </f>
            <haxe_doc>Removes the last element of [this] Array and returns it.

                This operation modifies [this] Array in place.

                If [this] has at least one element, [this].length will decrease by 1.

                If [this] is the empty Array [], null is returned and the length remains
                0.
            </haxe_doc>
        </pop>
        <join public="1" set="method">
            <f a="sep">
                <c path="String"/>
                <c path="String"/>
            </f>
            <haxe_doc>Returns a string representation of [this] Array, with [sep] separating
                each element.

                The result of this operation is equal to Std.string(this[0]) + sep +
                Std.string(this[1]) + sep + ... + sep + Std.string(this[this.length-1]).

                If [this] is the empty Array [], the result is the empty String "". If
                [this] has exactly one element, the result is equal to a call to
                Std.string(this[0]).

                If [sep] is null, the result is unspecified.
            </haxe_doc>
        </join>
        <concat public="1" set="method">
            <f a="a">
                <c path="Array">
                    <c path="Array.T"/>
                </c>
                <c path="Array">
                    <c path="Array.T"/>
                </c>
            </f>
            <haxe_doc>Returns a new Array by appending the elements of [a] to the elements of
                [this] Array.

                This operation does not modify [this] Array.

                If [a] is the empty Array [], a copy of [this] Array is returned.

                The length of the returned Array is equal to the sum of [this].length
                and [a].length.

                If [a] is null, the result is unspecified.
            </haxe_doc>
        </concat>
        <length public="1" set="null">
            <x path="Int"/>
            <haxe_doc>The length of [this] Array.</haxe_doc>
        </length>
        <new public="1" set="method">
            <f a="">
                <x path="Void"/>
            </f>
            <haxe_doc>Creates a new Array.</haxe_doc>
        </new>
        <haxe_doc>An Array is a storage for values. You can access it using indexes or
            with its API. On the server side, it's often better to use a [List] which
            is less memory and CPU consuming, unless you really need indexed access.
        </haxe_doc>
    </class>
    <abstract path="Class" params="T" file="/usr/lib/haxe/std/Class.hx">
        <haxe_doc>An abstract type that represents a Class.

            See [Type] for the haXe Reflection API.
        </haxe_doc>
        <meta>
            <m n=":valueUsed"/>
            <m n=":coreType"/>
            <m n=":runtimeValue"/>
        </meta>
    </abstract>
    <class path="Date" params="" file="/usr/lib/haxe/std/Date.hx" extern="1">
        <now public="1" set="method" static="1">
            <f a="">
                <c path="Date"/>
            </f>
            <haxe_doc>Returns a Date representing the current local time.</haxe_doc>
        </now>
        <fromTime public="1" set="method" static="1">
            <f a="t">
                <x path="Float"/>
                <c path="Date"/>
            </f>
            <haxe_doc>Returns a Date from timestamp [t].</haxe_doc>
        </fromTime>
        <fromString public="1" set="method" static="1">
            <f a="s">
                <c path="String"/>
                <c path="Date"/>
            </f>
            <haxe_doc>Returns a Date from a formated string [s], with the following accepted
                formats:
                - [YYYY-MM-DD hh:mm:ss]
                - [YYYY-MM-DD]
                - [hh:mm:ss]
                The first two formats are expressed in local time, the third in UTC
                Epoch.
            </haxe_doc>
        </fromString>
        <toString public="1" set="method">
            <f a="">
                <c path="String"/>
            </f>
            <haxe_doc>Returns a string representation of [this] Date, by using the
                standard format [YYYY-MM-DD HH:MM:SS]. See [DateTools.format] for
                other formating rules.
            </haxe_doc>
        </toString>
        <getDay public="1" set="method">
            <f a="">
                <x path="Int"/>
            </f>
            <haxe_doc>Returns the day of the week of [this] Date (0-6 range).</haxe_doc>
        </getDay>
        <getDate public="1" set="method">
            <f a="">
                <x path="Int"/>
            </f>
            <haxe_doc>Returns the day of [this] Date (1-31 range).</haxe_doc>
        </getDate>
        <getMonth public="1" set="method">
            <f a="">
                <x path="Int"/>
            </f>
            <haxe_doc>Returns the month of [this] Date (0-11 range).</haxe_doc>
        </getMonth>
        <getFullYear public="1" set="method">
            <f a="">
                <x path="Int"/>
            </f>
            <haxe_doc>Returns the full year of [this] Date (4-digits).</haxe_doc>
        </getFullYear>
        <getSeconds public="1" set="method">
            <f a="">
                <x path="Int"/>
            </f>
            <haxe_doc>Returns the seconds of the [this] Date (0-59 range).</haxe_doc>
        </getSeconds>
        <getMinutes public="1" set="method">
            <f a="">
                <x path="Int"/>
            </f>
            <haxe_doc>Returns the minutes of [this] Date (0-59 range).</haxe_doc>
        </getMinutes>
        <getHours public="1" set="method">
            <f a="">
                <x path="Int"/>
            </f>
            <haxe_doc>Returns the hours of [this] Date (0-23 range).</haxe_doc>
        </getHours>
        <getTime public="1" set="method">
            <f a="">
                <x path="Float"/>
            </f>
            <haxe_doc>Returns the timestamp of the date. It might only have a per-second
                precision depending on the platforms.
            </haxe_doc>
        </getTime>
        <new public="1" set="method">
            <f a="year:month:day:hour:min:sec">
                <x path="Int"/>
                <x path="Int"/>
                <x path="Int"/>
                <x path="Int"/>
                <x path="Int"/>
                <x path="Int"/>
                <x path="Void"/>
            </f>
            <haxe_doc>Creates a new date object from the given arguments.

                The behaviour of a Date instance is only consistent across platforms if
                the the arguments describe a valid date.
                - month: 0 to 11
                - day: 1 to 31
                - hour: 0 to 23
                - min: 0 to 59
                - sec: 0 to 59
            </haxe_doc>
        </new>
        <haxe_doc>The Date class provides a basic structure for date and time related
            information. Date instances can be created by
            - new Date() for a specific date,
            - Date.now() to obtain information about the current time,
            - Date.fromTime() with a given timestamp or
            - Date.fromString() by parsing from a String.

            There is some extra functions available in the [DateTools] class.

            In the context of haxe dates, a timestamp is defined as the number of
            milliseconds elapsed since 1st January 1970.
        </haxe_doc>
    </class>
    <class path="EReg" params="" file="/usr/lib/haxe/std/flash/_std/EReg.hx">
        <replace public="1" set="method" line="85">
            <f a="s:by">
                <c path="String"/>
                <c path="String"/>
                <c path="String"/>
            </f>
            <haxe_doc>Replaces the first substring of [s] which [this] EReg matches with [by].

                If [this] EReg does not match any substring, the result is [s].

                By default, this method replaces only the first matched substring. If
                the global g modifier is in place, all matched substrings are replaced.

                If [by] contains [$1] to [$9], the digit corresponds to number of a
                matched sub-group and its value is used instead. If no such sub-group
                exists, the replacement is unspecified. The string [$$] becomes [$].

                If [s] or [by] are null, the result is unspecified.
            </haxe_doc>
        </replace>
        <matchedPos public="1" set="method" line="54">
            <f a="">
                <a>
                    <pos>
                        <x path="Int"/>
                    </pos>
                    <len>
                        <x path="Int"/>
                    </len>
                </a>
            </f>
            <haxe_doc>Returns the position and length of the last matched substring, within
                the String which was last used as argument to [this].match() or
                [this].matchSub().

                If the most recent call to [this].match() or [this].matchSub() did not
                match anything, the result is unspecified.

                If the global g modifier was in place for the matching, the position and
                length of the leftmost substring is returned.
            </haxe_doc>
        </matchedPos>
        <matchedRight public="1" set="method" line="47">
            <f a="">
                <c path="String"/>
            </f>
            <haxe_doc>Returns the part to the right of the last matched substring.

                If the most recent call to [this].match() or [this].matchSub() did not
                match anything, the result is unspecified.

                If the global g modifier was in place for the matching, only the
                substring to the right of the leftmost match is returned.

                The result does not include the matched part.
            </haxe_doc>
        </matchedRight>
        <matchedLeft public="1" set="method" line="41">
            <f a="">
                <c path="String"/>
            </f>
            <haxe_doc>Returns the part to the left of the last matched substring.

                If the most recent call to [this].match() or [this].matchSub() did not
                match anything, the result is unspecified.

                If the global g modifier was in place for the matching, only the
                substring to the left of the leftmost match is returned.

                The result does not include the matched part.
            </haxe_doc>
        </matchedLeft>
        <matched public="1" set="method" line="37">
            <f a="n">
                <x path="Int"/>
                <c path="String"/>
            </f>
            <haxe_doc>Returns the matched sub-group [n] of [this] EReg.

                This method should only be called after [this].match() or
                [this].matchSub(), and then operates on the String of that operation.

                The index [n] corresponds to the n-th set of parentheses in the pattern
                of [this] EReg. If no such sub-group exists, an exception is thrown.

                If [n] equals 0, the whole matched substring is returned.
            </haxe_doc>
        </matched>
        <match public="1" set="method" line="31">
            <f a="s">
                <c path="String"/>
                <x path="Bool"/>
            </f>
            <haxe_doc>Tells if [this] regular expression matches String [s].

                This method modifies the internal state.

                If [s] is null, the result is unspecified.
            </haxe_doc>
        </match>
        <result>
            <c path="+Array"/>
        </result>
        <r>
            <c path="flash.utils.RegExp"/>
        </r>
        <new public="1" set="method" line="27">
            <f a="r:opt">
                <c path="String"/>
                <c path="String"/>
                <x path="Void"/>
            </f>
            <haxe_doc>Creates a new regular expression with pattern [r] and modifiers [opt].

                This is equivalent to the shorthand syntax ~/r/opt

                If [r] or [opt] are null, the result is unspecified.
            </haxe_doc>
        </new>
        <haxe_doc>The EReg class represents regular expressions.

            While basic usage and patterns consistently work across platforms, some more
            complex operations may yield different results. This is a necessary trade-
            off to retain a certain level of performance.

            EReg instances can be created by calling the constructor, or with the
            special syntax ~/pattern/modifier

            EReg instances maintain an internal state, which is affected by several of
            its methods.

            A detailed explanation of the supported operations is available at
            http://haxe.org/doc/cross/regexp
        </haxe_doc>
        <meta>
            <m n=":keep"/>
            <m n=":coreApi"/>
        </meta>
    </class>
    <abstract path="Enum" params="T" file="/usr/lib/haxe/std/Enum.hx">
        <haxe_doc>An abstract type that represents an Enum type.

            The corresponding enum instance type is EnumValue.

            See [Type] for the haXe Reflection API.
        </haxe_doc>
        <meta>
            <m n=":coreType"/>
            <m n=":runtimeValue"/>
        </meta>
    </abstract>
    <abstract path="EnumValue" params="" file="/usr/lib/haxe/std/EnumValue.hx">
        <haxe_doc>An abstract type that represents any enum value.
            See [Type] for the haXe Reflection API.
        </haxe_doc>
        <meta>
            <m n=":coreType"/>
        </meta>
    </abstract>
    <class path="Lambda" params="" file="/usr/lib/haxe/std/Lambda.hx">
        <count public="1" params="A" set="method" line="191" static="1">
            <f a="it:?pred">
                <t path="Iterable">
                    <c path="count.A"/>
                </t>
                <f a="">
                    <c path="count.A"/>
                    <x path="Bool"/>
                </f>
                <x path="Int"/>
            </f>
            <haxe_doc>Returns the number of elements in [it] for which [pred] is true, or the
                total number of elements in [it] if [pred] is null.

                This function traverses all elements.
            </haxe_doc>
        </count>
        <indexOf public="1" params="T" set="method" line="217" static="1">
            <f a="it:v">
                <t path="Iterable">
                    <c path="indexOf.T"/>
                </t>
                <c path="indexOf.T"/>
                <x path="Int"/>
            </f>
            <haxe_doc>Returns the index of the first element [v] within Iterable [it].

                This function uses operator [==] to check for equality.

                If [v] does not exist in [it], the result is -1.
            </haxe_doc>
        </indexOf>
        <haxe_doc>The [Lambda] class is a collection of methods to support functional
            programming. It is ideally used with 'using Lambda' and then acts as an
            extension to Iterable types.

            On static platforms, working with the Iterable structure might be slower
            than performing the operations directly on known types, such as Array and
            List.

            If the first argument to any of the methods is null, the result is
            unspecified.
        </haxe_doc>
        <meta>
            <m n=":keep"/>
        </meta>
    </class>
    <class path="List" params="T" file="/usr/lib/haxe/std/List.hx">
        <iterator public="1" set="method" line="161">
            <f a="">
                <t path="Iterator">
                    <c path="List.T"/>
                </t>
            </f>
            <haxe_doc>Returns an iterator on the elements of the list.</haxe_doc>
        </iterator>
        <add public="1" set="method" line="49">
            <f a="item">
                <c path="List.T"/>
                <x path="Void"/>
            </f>
            <haxe_doc>Adds element [item] at the end of [this] List.

                [this].length increases by 1.
            </haxe_doc>
        </add>
        <length public="1" set="null">
            <x path="Int"/>
            <haxe_doc>The length of [this] List.</haxe_doc>
        </length>
        <q>
            <c path="Array">
                <d/>
            </c>
        </q>
        <h>
            <c path="Array">
                <d/>
            </c>
        </h>
        <new public="1" set="method" line="40">
            <f a="">
                <x path="Void"/>
            </f>
            <haxe_doc>Creates a new empty list.</haxe_doc>
        </new>
        <haxe_doc>A linked-list of elements. The list is composed of two-elements arrays
            that are chained together. It is optimized so that adding or removing an
            element does not imply copying the whole array content every time.
        </haxe_doc>
        <meta>
            <m n=":keep"/>
        </meta>
    </class>
    <abstract path="Map" params="K:V" file="/usr/lib/haxe/std/Map.hx">
        <from>
            <c path="haxe.ds.StringMap">
                <c path="fromStringMap.V"/>
            </c>
            <c path="haxe.ds.IntMap">
                <c path="fromIntMap.V"/>
            </c>
            <c path="haxe.ds.ObjectMap">
                <c path="fromObjectMap.K"/>
                <c path="fromObjectMap.V"/>
            </c>
        </from>
        <to>
            <c path="haxe.ds.StringMap">
                <c path="Map.V"/>
            </c>
            <c path="haxe.ds.IntMap">
                <c path="Map.V"/>
            </c>
            <c path="haxe.ds.EnumValueMap">
                <c path="toEnumValueMapMap.K"/>
                <c path="Map.V"/>
            </c>
            <c path="haxe.ds.ObjectMap">
                <c path="toObjectMap.K"/>
                <c path="Map.V"/>
            </c>
        </to>
        <haxe_doc><![CDATA[Map allows key to value mapping for arbitrary value types, and many key
	types.

	This is a multi-type abstract, it is instantiated as one of its
	specialization types depending on its type parameters.

	A Map can be instantiated without explicit type parameters. Type inference
	will then determine the type parameters from the usage.

	Maps can also be created with [key1 => value1, key2 => value2] syntax.

	Map is an abstract type, it is not available at runtime.]]></haxe_doc>
        <meta>
            <m n=":multiType"/>
        </meta>
    </abstract>
    <class path="IMap" params="K:V" file="/usr/lib/haxe/std/Map.hx" module="Map" interface="1">
        <meta>
            <m n=":keep"/>
        </meta>
    </class>
    <typedef path="_Map.Hashable" params="" file="/usr/lib/haxe/std/Map.hx" private="1" module="Map">
        <a>
            <hashCode set="method">
                <f a="">
                    <x path="Int"/>
                </f>
            </hashCode>
        </a>
    </typedef>
    <class path="Math" params="" file="/usr/lib/haxe/std/Math.hx" extern="1">
        <PI public="1" set="null" static="1">
            <x path="Float"/>
        </PI>
        <NEGATIVE_INFINITY public="1" set="null" static="1">
            <x path="Float"/>
            <haxe_doc>A special Float constant which denotes negative infinity.

                For example, this is the result of -1.0 / 0.0.

                Operations with NEGATIVE_INFINITY as an operand may result in
                Operations with NEGATIVE_INFINITY as an operand may result in
                NEGATIVE_INFINITY, POSITIVE_INFINITY or NaN. For detailed information,
                see ...

                If this constant is converted to an Int, e.g. through Std.int(), the
                result is unspecified.
            </haxe_doc>
        </NEGATIVE_INFINITY>
        <POSITIVE_INFINITY public="1" set="null" static="1">
            <x path="Float"/>
            <haxe_doc>A special Float constant which denotes negative infinity.

                For example, this is the result of 1.0 / 0.0.

                Operations with POSITIVE_INFINITY as an operand may result in
                NEGATIVE_INFINITY, POSITIVE_INFINITY or NaN. For detailed information,
                see ...

                If this constant is converted to an Int, e.g. through Std.int(), the
                result is unspecified.
            </haxe_doc>
        </POSITIVE_INFINITY>
        <NaN public="1" set="null" static="1">
            <x path="Float"/>
            <haxe_doc>A special Float constant which denotes an invalid number.

                NaN stands for "Not a Number". It occurs when a mathematically incorrect
                operation is executed, such as taking the square root of a negative
                number: Math.sqrt(-1).

                All further operations with NaN as an operand will result in NaN.

                If this constant is converted to an Int, e.g. through Std.int(), the
                result is unspecified.

                In order to test if a value is NaN, you should use Math.isNaN() function.

                (Php) In PHP versions prior to 5.3.1 VC 9 there may be unexpected
                results when performing arithmetic operations with NaN on Windows, see:
                https://bugs.php.net/bug.php?id=42143
            </haxe_doc>
        </NaN>
        <abs public="1" set="method" static="1">
            <f a="v">
                <x path="Float"/>
                <x path="Float"/>
            </f>
            <haxe_doc>Returns the absolute value of [v].

                If [v] is positive or 0, the result is unchanged. Otherwise the result
                is -[v].

                If [v] is NEGATIVE_INFINITY or POSITIVE_INFINITY, the result is
                POSITIVE_INFINITY.

                If [v] is NaN, the result is NaN.
            </haxe_doc>
        </abs>
        <min public="1" set="method" static="1">
            <f a="a:b">
                <x path="Float"/>
                <x path="Float"/>
                <x path="Float"/>
            </f>
            <haxe_doc>Returns the smaller of values [a] and [b].

                If [a] or [b] are NaN, the result is NaN.

                If [a] or [b] are NEGATIVE_INFINITY, the result is NEGATIVE_INFINITY.

                If [a] and [b] are POSITIVE_INFINITY, the result is POSITIVE_INFINITY.
            </haxe_doc>
        </min>
        <max public="1" set="method" static="1">
            <f a="a:b">
                <x path="Float"/>
                <x path="Float"/>
                <x path="Float"/>
            </f>
            <haxe_doc>Returns the greater of values [a] and [b].

                If [a] or [b] are NaN, the result is NaN.

                If [a] or [b] are POSITIVE_INFINITY, the result is POSITIVE_INFINITY.

                If [a] and [b] are NEGATIVE_INFINITY, the result is NEGATIVE_INFINITY.
            </haxe_doc>
        </max>
        <sin public="1" set="method" static="1">
            <f a="v">
                <x path="Float"/>
                <x path="Float"/>
            </f>
            <haxe_doc>Returns the trigonometric sine of [v].

                The unit of [v] is radians.

                If [v] is NaN or infinite, the result is NaN.
            </haxe_doc>
        </sin>
        <cos public="1" set="method" static="1">
            <f a="v">
                <x path="Float"/>
                <x path="Float"/>
            </f>
            <haxe_doc>Returns the trigonometric cosine of [v].

                The unit of [v] is radians.

                If [v] is NaN or infinite, the result is NaN.
            </haxe_doc>
        </cos>
        <tan public="1" set="method" static="1">
            <f a="v">
                <x path="Float"/>
                <x path="Float"/>
            </f>
        </tan>
        <asin public="1" set="method" static="1">
            <f a="v">
                <x path="Float"/>
                <x path="Float"/>
            </f>
        </asin>
        <acos public="1" set="method" static="1">
            <f a="v">
                <x path="Float"/>
                <x path="Float"/>
            </f>
        </acos>
        <atan public="1" set="method" static="1">
            <f a="v">
                <x path="Float"/>
                <x path="Float"/>
            </f>
        </atan>
        <atan2 public="1" set="method" static="1">
            <f a="y:x">
                <x path="Float"/>
                <x path="Float"/>
                <x path="Float"/>
            </f>
        </atan2>
        <exp public="1" set="method" static="1">
            <f a="v">
                <x path="Float"/>
                <x path="Float"/>
            </f>
            <haxe_doc>Returns Euler's number, raised to the power of [v].

                exp(1.0) is approximately 2.718281828459.

                If [v] is POSITIVE_INFINITY, the result is POSITIVE_INFINITY.

                If [v] is NEGATIVE_INFINITY, the result is 0.0.

                If [v] is NaN, the result is NaN.
            </haxe_doc>
        </exp>
        <log public="1" set="method" static="1">
            <f a="v">
                <x path="Float"/>
                <x path="Float"/>
            </f>
            <haxe_doc>Returns the natural logarithm of [v].

                If [v] is negative (including NEGATIVE_INFINITY) or NaN, the result is
                NaN.

                If [v] is POSITIVE_INFINITY, the result is POSITIVE_INFINITY.

                If [v] is 0.0, the result is NEGATIVE_INFINITY.

                This is the inverse operation of exp, i.e. log(exp(v)) == v always
                holds.
            </haxe_doc>
        </log>
        <pow public="1" set="method" static="1">
            <f a="v:exp">
                <x path="Float"/>
                <x path="Float"/>
                <x path="Float"/>
            </f>
        </pow>
        <sqrt public="1" set="method" static="1">
            <f a="v">
                <x path="Float"/>
                <x path="Float"/>
            </f>
            <haxe_doc>Returns the square root of [v].

                If [v] is negative (including NEGATIVE_INFINITY) or NaN, the result is
                NaN.

                If [v] is POSITIVE_INFINITY, the result is POSITIVE_INFINITY.

                If [v] is 0.0, the result is 0.0.
            </haxe_doc>
        </sqrt>
        <round public="1" set="method" static="1">
            <f a="v">
                <x path="Float"/>
                <x path="Int"/>
            </f>
            <haxe_doc>Rounds [v] to the nearest Int value.

                If v is outside of the signed Int32 range, or is NaN, NEGATIVE_INFINITY or POSITIVE_INFINITY, the result
                is unspecified.

                TODO: need spec
            </haxe_doc>
        </round>
        <floor public="1" set="method" static="1">
            <f a="v">
                <x path="Float"/>
                <x path="Int"/>
            </f>
            <haxe_doc>Returns the largest Int value that is not greater than [v].

                If v is outside of the signed Int32 range, or is NaN, NEGATIVE_INFINITY or POSITIVE_INFINITY, the result
                is unspecified.

                TODO: need spec
            </haxe_doc>
        </floor>
        <ceil public="1" set="method" static="1">
            <f a="v">
                <x path="Float"/>
                <x path="Int"/>
            </f>
            <haxe_doc>Returns the smallest Int value that is not less than [v].

                If v is outside of the signed Int32 range, or is NaN, NEGATIVE_INFINITY or POSITIVE_INFINITY, the result
                is unspecified.

                TODO: need spec
            </haxe_doc>
        </ceil>
        <random public="1" set="method" static="1">
            <f a="">
                <x path="Float"/>
            </f>
            <haxe_doc>Returns a pseudo-random number which is greater than or equal to 0.0,
                and less than 1.0.
            </haxe_doc>
        </random>
        <ffloor public="1" set="method" static="1">
            <f a="v">
                <x path="Float"/>
                <x path="Float"/>
            </f>
        </ffloor>
        <fceil public="1" set="method" static="1">
            <f a="v">
                <x path="Float"/>
                <x path="Float"/>
            </f>
        </fceil>
        <fround public="1" set="method" static="1">
            <f a="v">
                <x path="Float"/>
                <x path="Float"/>
            </f>
        </fround>
        <isFinite public="1" set="method" static="1">
            <f a="f">
                <x path="Float"/>
                <x path="Bool"/>
            </f>
            <haxe_doc>Tells if [f] is a finite number.

                If [f] is POSITIVE_INFINITY, NEGATIVE_INFINITY or NaN, the result is
                false.

                Otherwise the result is true.
            </haxe_doc>
        </isFinite>
        <isNaN public="1" set="method" static="1">
            <f a="f">
                <x path="Float"/>
                <x path="Bool"/>
            </f>
            <haxe_doc>Tells if [f] is not a valid number.

                If [f] is NaN, the result is true.

                Otherwise the result is false. In particular, both POSITIVE_INFINITY and
                NEGATIVE_INFINITY are not considered NaN.
            </haxe_doc>
        </isNaN>
        <haxe_doc>This class defines mathematical functions and constants.</haxe_doc>
    </class>
    <class path="Reflect" params="" file="/usr/lib/haxe/std/flash/_std/Reflect.hx">
        <hasField public="1" set="method" line="24" static="1">
            <f a="o:field">
                <d/>
                <c path="String"/>
                <x path="Bool"/>
            </f>
            <haxe_doc>Tells if structure [o] has a field named [field].

                This is only guaranteed to work for anonymous structures. Refer to
                [Type.getInstanceFields] for a function supporting class instances.

                If [o] or [field] are null, the result is unspecified.
            </haxe_doc>
        </hasField>
        <field public="1" set="method" line="28" static="1">
            <f a="o:field">
                <d/>
                <c path="String"/>
                <d/>
            </f>
            <haxe_doc>Returns the value of the field named [field] on object [o].

                If [o] is not an object or has no field named [field], the result is
                null.

                If the field is defined as a property, its accessors are ignored. Refer
                to [Reflect.getProperty] for a function supporting property accessors.

                If [field] is null, the result is unspecified.

                (As3) If used on a property field, the getter will be invoked. It is
                not possible to obtain the value directly.
            </haxe_doc>
        </field>
        <getProperty public="1" set="method" line="37" static="1">
            <f a="o:field">
                <d/>
                <c path="String"/>
                <d/>
            </f>
            <haxe_doc>Returns the value of the field named [field] on object [o], taking
                property getter functions into account.

                If the field is not a property, this function behaves like
                [Reflect.field], but might be slower.

                If [o] or [field] are null, the result is unspecified.
            </haxe_doc>
        </getProperty>
        <setProperty public="1" set="method" line="47" static="1">
            <f a="o:field:value">
                <d/>
                <c path="String"/>
                <d/>
                <x path="Void"/>
            </f>
            <haxe_doc>Sets the field named [field] of object [o] to value [value], taking
                property setter functions into account.

                If the field is not a property, this function behaves like
                [Reflect.setField], but might be slower.

                If [field] is null, the result is unspecified.
            </haxe_doc>
        </setProperty>
        <fields public="1" set="method" line="59" static="1">
            <f a="o">
                <d/>
                <c path="Array">
                    <c path="String"/>
                </c>
            </f>
            <haxe_doc>Returns the fields of structure [o].

                This method is only guaranteed to work on anonymous structures. Refer to
                [Type.getInstanceFields()] for a function supporting class instances.

                If [o] is null, the result is unspecified.
            </haxe_doc>
        </fields>
        <isFunction public="1" set="method" line="82" static="1">
            <f a="f">
                <d/>
                <x path="Bool"/>
            </f>
            <haxe_doc>Returns true if [f] is a function, false otherwise.

                If [f] is null, the result is false.
            </haxe_doc>
        </isFunction>
        <haxe_doc>The Reflect API is a way to manipulate values dynamicly through an
            abstract interface in an untyped manner. Use with care.
        </haxe_doc>
        <meta>
            <m n=":keep"/>
            <m n=":coreApi"/>
        </meta>
    </class>
    <class path="Std" params="" file="/usr/lib/haxe/std/flash/_std/Std.hx">
        <is public="1" set="method" line="26" static="1">
            <f a="v:t">
                <d/>
                <d/>
                <x path="Bool"/>
            </f>
            <haxe_doc>Tells if a value v is of the type t. Returns false if v or t are null.</haxe_doc>
        </is>
        <string public="1" set="method" line="30" static="1">
            <f a="s">
                <d/>
                <c path="String"/>
            </f>
            <haxe_doc>Converts any value to a String.

                If s is of String, Int, Float or Bool, its value is returned.

                If s is an instance of a class and that class or one of its parent classes has
                a toString() method, that method is called. If no such method is present, the result
                is unspecified.

                If s is an enum constructor without argument, the constructor's name is returned. If
                arguments exists, the constructor's name followed by the String representations of
                the arguments is returned.

                If s is a structure, the field names along with their values are returned. The field order
                and the operator separating field names and values are unspecified.

                If s is null, "null" is returned.
            </haxe_doc>
        </string>
        <parseInt public="1" set="method" line="38" static="1">
            <f a="x">
                <c path="String"/>
                <t path="Null">
                    <x path="Int"/>
                </t>
            </f>
            <haxe_doc>Converts a String to an Int.

                Leading whitespaces are ignored.

                If x starts with 0x or 0X, hexadecimal notation is recognized where the following digits may
                contain 0-9 and A-F.

                Otherwise x is read as decimal number with 0-9 being allowed characters. x may also start with
                a - to denote a negative value.

                In decimal mode, parsing continues until an invalid character is detected, in which case the
                result up to that point is returned. For hexadecimal notation, the effect of invalid characters
                is unspecified.

                Leading 0s that are not part of the 0x/0X hexadecimal notation are ignored, which means octal
                notation is not supported.

                If the input cannot be recognized, the result is null.
            </haxe_doc>
        </parseInt>
        <parseFloat public="1" set="method" line="45" static="1">
            <f a="x">
                <c path="String"/>
                <x path="Float"/>
            </f>
            <haxe_doc>Converts a String to a Float.

                The parsing rules for parseInt() apply here as well, with the exception of invalid input
                resulting in a NaN value instead of null.

                Additionally, decimal notation may contain a single . to denote the start of the fractions.
            </haxe_doc>
        </parseFloat>
        <haxe_doc>The Std class provides standard methods for manipulating basic types.</haxe_doc>
        <meta>
            <m n=":keep"/>
            <m n=":coreApi"/>
        </meta>
    </class>
    <abstract path="Void" params="" file="/usr/lib/haxe/std/StdTypes.hx" module="StdTypes">
        <haxe_doc>The standard Void type. Only [null] values can be of the type [Void].</haxe_doc>
        <meta>
            <m n=":coreType"/>
        </meta>
    </abstract>
    <abstract path="Float" params="" file="/usr/lib/haxe/std/StdTypes.hx" module="StdTypes">
        <haxe_doc>The standard Float type, this is a double-precision IEEE 64bit float.</haxe_doc>
        <meta>
            <m n=":valueUsed"/>
            <m n=":coreType"/>
            <m n=":notNull"/>
            <m n=":runtimeValue"/>
        </meta>
    </abstract>
    <abstract path="Int" params="" file="/usr/lib/haxe/std/StdTypes.hx" module="StdTypes">
        <to>
            <x path="Float"/>
        </to>
        <haxe_doc>The standard Int type. Its precision depends on the platform.</haxe_doc>
        <meta>
            <m n=":valueUsed"/>
            <m n=":coreType"/>
            <m n=":notNull"/>
            <m n=":runtimeValue"/>
        </meta>
    </abstract>
    <abstract path="UInt" params="" file="/usr/lib/haxe/std/StdTypes.hx" module="StdTypes">
        <from>
            <x path="Int"/>
        </from>
        <to>
            <x path="Int"/>
        </to>
        <haxe_doc>The unsigned Int type is only defined for Flash9. It's currently
            handled the same as a normal Int.
        </haxe_doc>
        <meta>
            <m n=":coreType"/>
            <m n=":notNull"/>
            <m n=":runtimeValue"/>
        </meta>
    </abstract>
    <typedef path="Null" params="T" file="/usr/lib/haxe/std/StdTypes.hx" module="StdTypes">
        <c path="Null.T"/>
        <haxe_doc>[Null] can be useful in two cases. In order to document some methods
            that accepts or can return a [null] value, or for the Flash9 compiler and AS3
            generator to distinguish between base values that can be null and others that
            can't.
        </haxe_doc>
    </typedef>
    <abstract path="Bool" params="" file="/usr/lib/haxe/std/StdTypes.hx" module="StdTypes">
        <haxe_doc>The standard Boolean type is represented as an enum with two choices.</haxe_doc>
        <meta>
            <m n=":valueUsed"/>
            <m n=":coreType"/>
            <m n=":notNull"/>
            <m n=":runtimeValue"/>
        </meta>
    </abstract>
    <abstract path="Dynamic" params="T" file="/usr/lib/haxe/std/StdTypes.hx" module="StdTypes">
        <haxe_doc>Dynamic is an internal compiler type which has special behavior.
            See the haXe language reference for more informations.
        </haxe_doc>
        <meta>
            <m n=":valueUsed"/>
            <m n=":coreType"/>
            <m n=":runtimeValue"/>
        </meta>
    </abstract>
    <typedef path="Iterator" params="T" file="/usr/lib/haxe/std/StdTypes.hx" module="StdTypes">
        <a>
            <next set="method">
                <f a="">
                    <c path="Iterator.T"/>
                </f>
                <haxe_doc>Returns the current item of the Iterator and advances to the next one.

                    This method is not required to check hasNext() first. A call to this
                    method while hasNext() is false yields unspecified behavior.
                </haxe_doc>
            </next>
            <hasNext set="method">
                <f a="">
                    <x path="Bool"/>
                </f>
                <haxe_doc>Returns false if the iteration is complete, true otherwise.

                    Usually iteration is considered to be complete if all elements of the
                    underlying data structure were handled through calls to next(). However,
                    in custom iterators any logic may be used to determine the completion
                    state.
                </haxe_doc>
            </hasNext>
        </a>
        <haxe_doc>An Iterator is a structure that permits iteration over elements of type T.

            Any class with matching hasNext and next fields is considered an Iterator
            and can then be used e.g. in for-loops. This makes it easy to implement
            custom iterators.
        </haxe_doc>
    </typedef>
    <typedef path="Iterable" params="T" file="/usr/lib/haxe/std/StdTypes.hx" module="StdTypes">
        <a>
            <iterator set="method">
                <f a="">
                    <t path="Iterator">
                        <c path="Iterable.T"/>
                    </t>
                </f>
            </iterator>
        </a>
        <haxe_doc>An Iterable is a data structure which has an iterator() method.
            See [Lambda] for generic functions on iterable structures.
        </haxe_doc>
    </typedef>
    <class path="ArrayAccess" params="T" file="/usr/lib/haxe/std/StdTypes.hx" module="StdTypes" extern="1"
           interface="1">
        <haxe_doc>ArrayAccess is used to indicate a class that can be accessed using brackets.
            The type parameter represent the type of the elements stored.
        </haxe_doc>
    </class>
    <class path="String" params="" file="/usr/lib/haxe/std/String.hx" extern="1">
        <fromCharCode public="1" set="method" static="1">
            <f a="code">
                <x path="Int"/>
                <c path="String"/>
            </f>
            <haxe_doc>Returns the String corresponding to the character code [code].

                If [code] is negative or has another invalid value, the result is
                unspecified.
            </haxe_doc>
        </fromCharCode>
        <toString public="1" set="method">
            <f a="">
                <c path="String"/>
            </f>
            <haxe_doc>Returns the String itself.</haxe_doc>
        </toString>
        <substring public="1" set="method">
            <f a="startIndex:?endIndex">
                <x path="Int"/>
                <x path="Int"/>
                <c path="String"/>
            </f>
            <haxe_doc>Returns the part of [this] String from [startIndex] to [endIndex].

                If [startIndex] or [endIndex] are negative, 0 is used instead.

                If [startIndex] exceeds [endIndex], they are swapped.

                If the (possibly swapped) [endIndex] is omitted or exceeds
                [this].length, [this].length is used instead.

                If the (possibly swapped) [startIndex] exceeds [this].length, the empty
                String "" is returned.
            </haxe_doc>
        </substring>
        <substr public="1" set="method">
            <f a="pos:?len">
                <x path="Int"/>
                <x path="Int"/>
                <c path="String"/>
            </f>
            <haxe_doc>Returns [len] characters of [this] String, starting at position [pos].

                If [len] is omitted, all characters from position [pos] to the end of
                [this] String are included.

                If [pos] is negative, its value is calculated from the end of [this]
                String by [this].length + [pos]. If this yields a negative value, 0 is
                used instead.

                If the calculated position + [len] exceeds [this].length, the characters
                from that position to the end of [this] String are returned.

                If [len] is negative, the result is unspecified.
            </haxe_doc>
        </substr>
        <split public="1" set="method">
            <f a="delimiter">
                <c path="String"/>
                <c path="Array">
                    <c path="String"/>
                </c>
            </f>
            <haxe_doc>Splits [this] String at each occurence of [delimiter].

                If [delimiter] is the empty String "", [this] String is split into an
                Array of [this].length elements, where the elements correspond to the
                characters of [this] String.

                If [delimiter] is not found within [this] String, the result is an Array
                with one element, which equals [this] String.

                If [delimiter] is null, the result is unspecified.

                Otherwise, [this] String is split into parts at each occurence of
                [delimiter]. If [this] String starts (or ends) with [delimiter}, the
                result Array contains a leading (or trailing) empty String "" element.
                Two subsequent delimiters also result in an empty String "" element.
            </haxe_doc>
        </split>
        <lastIndexOf public="1" set="method">
            <f a="str:?startIndex">
                <c path="String"/>
                <x path="Int"/>
                <x path="Int"/>
            </f>
            <haxe_doc>Returns the position of the rightmost occurence of [str] within [this]
                String.

                If [startIndex] is given, the search is performed within the substring
                of [this] String from 0 to [startIndex]. Otherwise the search is
                performed within [this] String. In either case, the returned position
                is relative to the beginning of [this] String.

                If [str] cannot be found, -1 is returned.
            </haxe_doc>
        </lastIndexOf>
        <indexOf public="1" set="method">
            <f a="str:?startIndex">
                <c path="String"/>
                <x path="Int"/>
                <x path="Int"/>
            </f>
            <haxe_doc>Returns the position of the leftmost occurence of [str] within [this]
                String.

                If [startIndex] is given, the search is performed within the substring
                of [this] String starting from [startIndex]. Otherwise the search is
                performed within [this] String. In either case, the returned position
                is relative to the beginning of [this] String.

                If [str] cannot be found, -1 is returned.
            </haxe_doc>
        </indexOf>
        <charCodeAt public="1" set="method">
            <f a="index">
                <x path="Int"/>
                <t path="Null">
                    <x path="Int"/>
                </t>
            </f>
            <haxe_doc>Returns the character code at position [index] of [this] String.

                If [index] is negative or exceeds [this].length, null is returned.

                To obtain the character code of a single character, "x".code can be used
                instead to inline the character code at compile time. Note that this
                only works on String literals of length 1.
            </haxe_doc>
        </charCodeAt>
        <charAt public="1" set="method">
            <f a="index">
                <x path="Int"/>
                <c path="String"/>
            </f>
            <haxe_doc>Returns the character at position [index] of [this] String.

                If [index] is negative or exceeds [this].length, the empty String ""
                is returned.
            </haxe_doc>
        </charAt>
        <toLowerCase public="1" set="method">
            <f a="">
                <c path="String"/>
            </f>
            <haxe_doc>Returns a String where all characters of [this] String are lower case.

                Affects the characters [A-Z]. Other characters remain unchanged.
            </haxe_doc>
        </toLowerCase>
        <toUpperCase public="1" set="method">
            <f a="">
                <c path="String"/>
            </f>
            <haxe_doc>Returns a String where all characters of [this] String are upper case.

                Affects the characters [a-z]. Other characters remain unchanged.
            </haxe_doc>
        </toUpperCase>
        <length public="1" set="null">
            <x path="Int"/>
            <haxe_doc>The number of characters in [this] String.</haxe_doc>
        </length>
        <new public="1" set="method">
            <f a="string">
                <c path="String"/>
                <x path="Void"/>
            </f>
            <haxe_doc>Creates a copy from a given String.</haxe_doc>
        </new>
        <haxe_doc>The basic String class.

            A haxe String is immutable, it is not possible to modify individual
            characters. No method of this class changes the state of [this] String.

            Strings can be constructed using the string literal syntax "string value".

            String can be concatenated by using the + operator. If an operand is not a
            String, it is passed through Std.string() first.
        </haxe_doc>
    </class>
    <class path="StringBuf" params="" file="/usr/lib/haxe/std/StringBuf.hx">
        <b>
            <c path="String"/>
        </b>
        <new public="1" set="method" line="42">
            <f a="">
                <x path="Void"/>
            </f>
            <haxe_doc>Creates a new StringBuf instance.

                This may involve initialization of the internal buffer.
            </haxe_doc>
        </new>
        <haxe_doc>A String buffer is an efficient way to build a big string by appending small
            elements together.

            Its cross-platform implementation uses String concatenation internally, but
            StringBuf may be optimized for different targets.

            Unlike String, an instance of StringBuf is not immutable in the sense that
            it can be passed as argument to functions which modify it by appending more
            values. However, the internal buffer cannot be modified.
        </haxe_doc>
        <meta>
            <m n=":keep"/>
        </meta>
    </class>
    <class path="StringTools" params="" file="/usr/lib/haxe/std/StringTools.hx">
        <startsWith public="1" set="method" line="124" static="1">
            <f a="s:start">
                <c path="String"/>
                <c path="String"/>
                <x path="Bool"/>
            </f>
            <haxe_doc>Tells if the string [s] starts with the string [start].

                If [start] is null, the result is unspecified.

                If [start] is the empty String "", the result is true.
            </haxe_doc>
        </startsWith>
        <endsWith public="1" set="method" line="141" static="1">
            <f a="s:end">
                <c path="String"/>
                <c path="String"/>
                <x path="Bool"/>
            </f>
            <haxe_doc>Tells if the string [s] ends with the string [end].

                If [end] is null, the result is unspecified.

                If [end] is the empty String "", the result is true.
            </haxe_doc>
        </endsWith>
        <isSpace public="1" set="method" line="162" static="1">
            <f a="s:pos">
                <c path="String"/>
                <x path="Int"/>
                <x path="Bool"/>
            </f>
            <haxe_doc>Tells if the character in the string [s] at position [pos] is a space.

                A character is considered to be a space character if its character code
                is 9,10,11,12,13 or 32.

                If [s] is the empty String "", or if pos is not a valid position within
                [s], the result is false.
            </haxe_doc>
        </isSpace>
        <ltrim public="1" set="method" line="176" static="1">
            <f a="s">
                <c path="String"/>
                <c path="String"/>
            </f>
            <haxe_doc>Removes leading space characters of [s].

                This function internally calls isSpace() to decide which characters to
                remove.

                If [s] is the empty String "" or consists only of space characters, the
                result is the empty String "".
            </haxe_doc>
        </ltrim>
        <rtrim public="1" set="method" line="201" static="1">
            <f a="s">
                <c path="String"/>
                <c path="String"/>
            </f>
            <haxe_doc>Removes trailing space characters of [s].

                This function internally calls isSpace() to decide which characters to
                remove.

                If [s] is the empty String "" or consists only of space characters, the
                result is the empty String "".
            </haxe_doc>
        </rtrim>
        <trim public="1" set="method" line="223" static="1">
            <f a="s">
                <c path="String"/>
                <c path="String"/>
            </f>
            <haxe_doc>Removes leading and trailing space characters of [s].

                This is a convenience function for ltrim(rtrim(s)).
            </haxe_doc>
        </trim>
        <replace public="1" set="method" line="288" static="1">
            <f a="s:sub:by">
                <c path="String"/>
                <c path="String"/>
                <c path="String"/>
                <c path="String"/>
            </f>
            <haxe_doc>Replace all occurences of the String [sub] in the String [s] by the
                String [by].

                If [sub] is the empty String "", [by] is inserted after each character
                of [s]. If [by] is also the empty String "", [s] remains unchanged.

                This is a convenience function for [s].split([sub]).join([by]).

                If [sub] or [by] are null, the result is unspecified.
            </haxe_doc>
        </replace>
        <haxe_doc>This class provides advanced methods on Strings. It is ideally used with
            'using StringTools' and then acts as an extension to the String class.

            If the first argument to any of the methods is null, the result is
            unspecified.
        </haxe_doc>
        <meta>
            <m n=":keep"/>
        </meta>
    </class>
    <class path="Type" params="" file="/usr/lib/haxe/std/flash/_std/Type.hx">
        <getClass public="1" params="T" set="method" line="36" static="1">
            <f a="o">
                <c path="getClass.T"/>
                <x path="Class">
                    <c path="getClass.T"/>
                </x>
            </f>
            <haxe_doc>Returns the class of [o], if [o] is a class instance.

                If [o] is null or of a different type, null is returned.

                In general, type parameter information cannot be obtained at runtime.
            </haxe_doc>
        </getClass>
        <getClassName public="1" set="method" line="69" static="1">
            <f a="c">
                <x path="Class">
                    <d/>
                </x>
                <c path="String"/>
            </f>
            <haxe_doc>Returns the name of class [c], including its path.

                If [c] is inside a package, the package structure is returned dot-
                separated, with another dot separating the class name:
                pack1.pack2.(...).packN.ClassName
                If [c] is a sub-type of a haxe module, that module is not part of the
                package structure.

                If [c] has no package, the class name is returned.

                If [c] is null, the result is unspecified.

                The class name does not include any type parameters.
            </haxe_doc>
        </getClassName>
        <resolveClass public="1" set="method" line="89" static="1">
            <f a="name">
                <c path="String"/>
                <x path="Class">
                    <d/>
                </x>
            </f>
            <haxe_doc>Resolves a class by name.

                If [name] is the path of an existing class, that class is returned.

                Otherwise null is returned.

                If [name] is null or the path to a different type, the result is
                unspecified.

                The class name must not include any type parameters.
            </haxe_doc>
        </resolveClass>
        <resolveEnum public="1" set="method" line="113" static="1">
            <f a="name">
                <c path="String"/>
                <x path="Enum">
                    <d/>
                </x>
            </f>
            <haxe_doc>Resolves an enum by name.

                If [name] is the path of an existing enum, that enum is returned.

                Otherwise null is returned.

                If [name] is null the result is unspecified.

                If [name] is the path to a different type, null is returned.

                The enum name must not include any type parameters.
            </haxe_doc>
        </resolveEnum>
        <createInstance public="1" params="T" set="method" line="130" static="1">
            <f a="cl:args">
                <x path="Class">
                    <c path="createInstance.T"/>
                </x>
                <c path="Array">
                    <d/>
                </c>
                <c path="createInstance.T"/>
            </f>
            <haxe_doc>Creates an instance of class [cl], using [args] as arguments to the
                class constructor.

                This function guarantees that the class constructor is called.

                Default values of constructors arguments are not guaranteed to be
                taken into account.

                If [cl] or [args] are null, or if the number of elements in [args] does
                not match the expected number of constructor arguments, or if any
                argument has an invalid type, or if [cl] has no own constructor, the
                result is unspecified.

                In particular, default values of constructor arguments are not
                guaranteed to be taken into account.
            </haxe_doc>
        </createInstance>
        <createEmptyInstance public="1" params="T" set="method" line="151" static="1">
            <f a="cl">
                <x path="Class">
                    <c path="createEmptyInstance.T"/>
                </x>
                <c path="createEmptyInstance.T"/>
            </f>
            <haxe_doc>Creates an instance of class [cl].

                This function guarantees that the class constructor is not called.

                If [cl] is null, the result is unspecified.
            </haxe_doc>
        </createEmptyInstance>
        <createEnum public="1" params="T" set="method" line="164" static="1">
            <f a="e:constr:?params">
                <x path="Enum">
                    <c path="createEnum.T"/>
                </x>
                <c path="String"/>
                <c path="Array">
                    <d/>
                </c>
                <c path="createEnum.T"/>
            </f>
            <haxe_doc>Creates an instance of enum [e] by calling its constructor [constr] with
                arguments [params].

                If [e] or [constr] is null, or if enum [e] has no constructor named
                [constr], or if the number of elements in [params] does not match the
                expected number of constructor arguments, or if any argument has an
                invalid type, the result is unspecified.
            </haxe_doc>
        </createEnum>
        <haxe_doc>The haxe Reflection API allows retrieval of type information at runtime.

            This class complements the more lightweight Reflect class, with a focus on
            class and enum instances.
        </haxe_doc>
        <meta>
            <m n=":keep"/>
            <m n=":coreApi"/>
        </meta>
    </class>
    <enum path="XmlType" params="" file="/usr/lib/haxe/std/flash/_std/Xml.hx" module="Xml"/>
    <class path="Xml" params="" file="/usr/lib/haxe/std/flash/_std/Xml.hx">
        <Element public="1" set="null" static="1">
            <e path="XmlType"/>
            <haxe_doc>A type of Xml node.</haxe_doc>
        </Element>
        <PCData public="1" set="null" static="1">
            <e path="XmlType"/>
            <haxe_doc>A type of Xml node.</haxe_doc>
        </PCData>
        <CData public="1" set="null" static="1">
            <e path="XmlType"/>
            <haxe_doc>A type of Xml node.</haxe_doc>
        </CData>
        <Comment public="1" set="null" static="1">
            <e path="XmlType"/>
            <haxe_doc>A type of Xml node.</haxe_doc>
        </Comment>
        <DocType public="1" set="null" static="1">
            <e path="XmlType"/>
            <haxe_doc>A type of Xml node.</haxe_doc>
        </DocType>
        <ProcessingInstruction public="1" set="null" static="1">
            <e path="XmlType"/>
            <haxe_doc>A type of Xml node.</haxe_doc>
        </ProcessingInstruction>
        <Document public="1" set="null" static="1">
            <e path="XmlType"/>
            <haxe_doc>A type of Xml node.</haxe_doc>
        </Document>
        <parse public="1" set="method" line="45" static="1">
            <f a="str">
                <c path="String"/>
                <c path="Xml"/>
            </f>
            <haxe_doc>Parse a String into an Xml object.</haxe_doc>
        </parse>
        <compare set="method" line="67" static="1">
            <f a="a:b">
                <c path="Xml"/>
                <c path="Xml"/>
                <x path="Bool"/>
            </f>
            <meta>
                <m n=":keep"/>
            </meta>
        </compare>
        <createElement public="1" set="method" line="73" static="1">
            <f a="name">
                <c path="String"/>
                <c path="Xml"/>
            </f>
            <haxe_doc>Creates a node of the given type.</haxe_doc>
        </createElement>
        <getNodeType set="method" line="104" static="1">
            <f a="node">
                <c path="flash.xml.XML"/>
                <e path="XmlType"/>
            </f>
        </getNodeType>
        <wrap set="method" line="180" static="1">
            <f a="node:?type">
                <c path="flash.xml.XML"/>
                <e path="XmlType"/>
                <c path="Xml"/>
            </f>
        </wrap>
        <toString public="1" set="method" line="389">
            <f a="">
                <c path="String"/>
            </f>
            <haxe_doc>Returns a String representation of the Xml node.</haxe_doc>
        </toString>
        <removeChild public="1" set="method" line="366">
            <f a="x">
                <c path="Xml"/>
                <x path="Bool"/>
            </f>
            <haxe_doc>Removes a child from the Document or Element.
                Returns true if the child was successfuly removed.
            </haxe_doc>
        </removeChild>
        <addChild public="1" set="method" line="357">
            <f a="x">
                <c path="Xml"/>
                <x path="Void"/>
            </f>
            <haxe_doc>Adds a child node to the Document or Element.
                One node can only be inside one given node which is indicated by the [parent] property.
            </haxe_doc>
        </addChild>
        <firstElement public="1" set="method" line="348">
            <f a="">
                <c path="Xml"/>
            </f>
            <haxe_doc>Returns the first child node which is an Element.</haxe_doc>
        </firstElement>
        <firstChild public="1" set="method" line="339">
            <f a="">
                <c path="Xml"/>
            </f>
            <haxe_doc>Returns the first child node.</haxe_doc>
        </firstChild>
        <elementsNamed public="1" set="method" line="314">
            <f a="name">
                <c path="String"/>
                <t path="Iterator">
                    <c path="Xml"/>
                </t>
            </f>
            <haxe_doc>Returns an iterator of all child nodes which are Elements with the given nodeName.
                Only works if the current node is an Element or a Document.
            </haxe_doc>
        </elementsNamed>
        <elements public="1" set="method" line="298">
            <f a="">
                <t path="Iterator">
                    <c path="Xml"/>
                </t>
            </f>
            <haxe_doc>Returns an iterator of all child nodes which are Elements.
                Only works if the current node is an Element or a Document.
            </haxe_doc>
        </elements>
        <iterator public="1" set="method" line="282">
            <f a="">
                <t path="Iterator">
                    <c path="Xml"/>
                </t>
            </f>
            <haxe_doc>Returns an iterator of all child nodes.
                Only works if the current node is an Element or a Document.
            </haxe_doc>
        </iterator>
        <exists public="1" set="method" line="255">
            <f a="att">
                <c path="String"/>
                <x path="Bool"/>
            </f>
            <haxe_doc>Tells if the Element node has a given attribute.
                Attributes are case-sensitive.
            </haxe_doc>
        </exists>
        <set public="1" set="method" line="224">
            <f a="att:value">
                <c path="String"/>
                <c path="String"/>
                <x path="Void"/>
            </f>
            <haxe_doc>Set the given attribute value for an Element node.
                Attributes are case-sensitive.
            </haxe_doc>
        </set>
        <get public="1" set="method" line="207">
            <f a="att">
                <c path="String"/>
                <c path="String"/>
            </f>
            <haxe_doc>Get the given attribute of an Element node. Returns [null] if not found.
                Attributes are case-sensitive.
            </haxe_doc>
        </get>
        <getAttribNS set="method" line="194">
            <f a="cur:ns">
                <c path="flash.xml.XML"/>
                <c path="Array">
                    <c path="String"/>
                </c>
                <c path="flash.xml.XMLList"/>
            </f>
        </getAttribNS>
        <wraps set="method" line="187">
            <f a="xList">
                <c path="flash.xml.XMLList"/>
                <c path="Array">
                    <c path="Xml"/>
                </c>
            </f>
        </wraps>
        <get_parent set="method" line="175">
            <f a="">
                <c path="Xml"/>
            </f>
        </get_parent>
        <get_nodeValue set="method" line="140">
            <f a="">
                <c path="String"/>
            </f>
        </get_nodeValue>
        <get_nodeName set="method" line="120">
            <f a="">
                <c path="String"/>
            </f>
        </get_nodeName>
        <_node>
            <c path="flash.xml.XML"/>
        </_node>
        <nodeType public="1" set="null">
            <e path="XmlType"/>
            <haxe_doc>Returns the type of the Xml Node. This should be used before
                accessing other functions since some might raise an exception
                if the node type is not correct.
            </haxe_doc>
        </nodeType>
        <new set="method" line="71">
            <f a="">
                <x path="Void"/>
            </f>
        </new>
        <haxe_doc>The standard Xml class and parsing.
            More API to manipulate XML are available in the [haxe.xml] package.
        </haxe_doc>
        <meta>
            <m n=":keep"/>
            <m n=":coreApi"/>
        </meta>
    </class>
    <class path="flash.geom.Point" params="" file="/usr/lib/haxe/std/flash/geom/Point.hx" extern="1">
        <distance public="1" set="method" static="1">
            <f a="pt1:pt2">
                <c path="flash.geom.Point"/>
                <c path="flash.geom.Point"/>
                <x path="Float"/>
            </f>
        </distance>
        <interpolate public="1" set="method" static="1">
            <f a="pt1:pt2:f">
                <c path="flash.geom.Point"/>
                <c path="flash.geom.Point"/>
                <x path="Float"/>
                <c path="flash.geom.Point"/>
            </f>
        </interpolate>
        <polar public="1" set="method" static="1">
            <f a="len:angle">
                <x path="Float"/>
                <x path="Float"/>
                <c path="flash.geom.Point"/>
            </f>
        </polar>
        <toString public="1" set="method">
            <f a="">
                <c path="String"/>
            </f>
        </toString>
        <subtract public="1" set="method">
            <f a="v">
                <c path="flash.geom.Point"/>
                <c path="flash.geom.Point"/>
            </f>
        </subtract>
        <setTo public="1" set="method">
            <f a="xa:ya">
                <x path="Float"/>
                <x path="Float"/>
                <x path="Void"/>
            </f>
            <meta>
                <m n=":require">
                    <e>flash11</e>
                </m>
            </meta>
        </setTo>
        <offset public="1" set="method">
            <f a="dx:dy">
                <x path="Float"/>
                <x path="Float"/>
                <x path="Void"/>
            </f>
        </offset>
        <normalize public="1" set="method">
            <f a="thickness">
                <x path="Float"/>
                <x path="Void"/>
            </f>
        </normalize>
        <equals public="1" set="method">
            <f a="toCompare">
                <c path="flash.geom.Point"/>
                <x path="Bool"/>
            </f>
        </equals>
        <copyFrom public="1" set="method">
            <f a="sourcePoint">
                <c path="flash.geom.Point"/>
                <x path="Void"/>
            </f>
            <meta>
                <m n=":require">
                    <e>flash11</e>
                </m>
            </meta>
        </copyFrom>
        <clone public="1" set="method">
            <f a="">
                <c path="flash.geom.Point"/>
            </f>
        </clone>
        <add public="1" set="method">
            <f a="v">
                <c path="flash.geom.Point"/>
                <c path="flash.geom.Point"/>
            </f>
        </add>
        <y public="1">
            <x path="Float"/>
        </y>
        <x public="1">
            <x path="Float"/>
        </x>
        <length public="1" set="null">
            <x path="Float"/>
        </length>
        <new public="1" set="method">
            <f a="?x:?y">
                <x path="Float"/>
                <x path="Float"/>
                <x path="Void"/>
            </f>
        </new>
    </class>
    <class path="nme.display.Tilesheet" params="" file="/Users/jbrichardet/Development/NME/nme/display/Tilesheet.hx">
        <TILE_SCALE public="1" get="inline" set="null" line="138" static="1">
            <x path="Int"/>
        </TILE_SCALE>
        <TILE_ROTATION public="1" get="inline" set="null" line="139" static="1">
            <x path="Int"/>
        </TILE_ROTATION>
        <TILE_RGB public="1" get="inline" set="null" line="140" static="1">
            <x path="Int"/>
        </TILE_RGB>
        <TILE_ALPHA public="1" get="inline" set="null" line="141" static="1">
            <x path="Int"/>
        </TILE_ALPHA>
        <TILE_TRANS_2x2 public="1" get="inline" set="null" line="145" static="1">
            <x path="Int"/>
        </TILE_TRANS_2x2>
        <TILE_BLEND_NORMAL public="1" get="inline" set="null" line="148" static="1">
            <x path="Int"/>
        </TILE_BLEND_NORMAL>
        <TILE_BLEND_ADD public="1" get="inline" set="null" line="149" static="1">
            <x path="Int"/>
        </TILE_BLEND_ADD>
        <defaultRatio line="156" static="1">
            <t path="nme.geom.Point"/>
        </defaultRatio>
        <drawTiles public="1" set="method" line="273">
            <f a="graphics:tileData:?smooth:?flags">
                <t path="nme.display.Graphics"/>
                <c path="Array">
                    <x path="Float"/>
                </c>
                <x path="Bool"/>
                <x path="Int"/>
                <x path="Void"/>
            </f>
            <haxe_doc>* Fast method to draw a batch of tiles using a Tilesheet
                *
                * The input array accepts the x, y and tile ID for each tile you wish to draw.
                * For example, an array of [ 0, 0, 0, 10, 10, 1 ] would draw tile 0 to(0, 0) and
                * tile 1 to(10, 10)
                *
                * You can also set flags for TILE_SCALE, TILE_ROTATION, TILE_RGB and
                * TILE_ALPHA.
                *
                * Depending on which flags are active, this is the full order of the array:
                *
                * [ x, y, tile ID, scale, rotation, red, green, blue, alpha, x, y ... ]
                *
                * @param graphics The native.display.Graphics object to use for drawing
                * @param tileData An array of all position, ID and optional values for use in drawing
                * @param smooth (Optional) Whether drawn tiles should be smoothed(Default: false)
                * @param flags (Optional) Flags to enable scale, rotation, RGB and/or alpha when drawing(Default: 0)
            </haxe_doc>
        </drawTiles>
        <adjustLen set="method" line="242">
            <f a="vec:len">
                <x path="nme.Vector">
                    <x path="Float"/>
                </x>
                <x path="Int"/>
                <x path="nme.Vector">
                    <x path="Float"/>
                </x>
            </f>
        </adjustLen>
        <adjustIndices set="method" line="211">
            <f a="vec:len">
                <x path="nme.Vector">
                    <x path="Int"/>
                </x>
                <x path="Int"/>
                <x path="nme.Vector">
                    <x path="Int"/>
                </x>
            </f>
        </adjustIndices>
        <adjustIDs set="method" line="196">
            <f a="vec:len">
                <x path="nme.Vector">
                    <x path="Int"/>
                </x>
                <x path="Int"/>
                <x path="nme.Vector">
                    <x path="Int"/>
                </x>
            </f>
        </adjustIDs>
        <addTileRect public="1" set="method" line="186">
            <f a="rectangle:?centerPoint">
                <t path="nme.geom.Rectangle"/>
                <t path="nme.geom.Point"/>
                <x path="Int"/>
            </f>
        </addTileRect>
        <_uvs>
            <x path="nme.Vector">
                <x path="Float"/>
            </x>
        </_uvs>
        <_indices>
            <x path="nme.Vector">
                <x path="Int"/>
            </x>
        </_indices>
        <_vertices>
            <x path="nme.Vector">
                <x path="Float"/>
            </x>
        </_vertices>
        <_ids>
            <x path="nme.Vector">
                <x path="Int"/>
            </x>
        </_ids>
        <tileUVs>
            <c path="Array">
                <t path="nme.geom.Rectangle"/>
            </c>
        </tileUVs>
        <tiles>
            <c path="Array">
                <t path="nme.geom.Rectangle"/>
            </c>
        </tiles>
        <tilePoints>
            <c path="Array">
                <t path="nme.geom.Point"/>
            </c>
        </tilePoints>
        <bitmapWidth>
            <x path="Int"/>
        </bitmapWidth>
        <bitmapHeight>
            <x path="Int"/>
        </bitmapHeight>
        <nmeBitmap public="1">
            <t path="nme.display.BitmapData"/>
            <haxe_doc>* @private</haxe_doc>
        </nmeBitmap>
        <new public="1" set="method" line="168">
            <f a="inImage">
                <t path="nme.display.BitmapData"/>
                <x path="Void"/>
            </f>
        </new>
    </class>
    <class path="aze.display.TilesheetEx" params=""
           file="/usr/lib/haxe3/lib/tilelayer/git/haxelib/aze/display/TilesheetEx.hx">
        <extends path="nme.display.Tilesheet"/>
        <createFromAssets public="1" set="method" line="96" static="1">
            <f a="fileNames:?padding:?spacing">
                <c path="Array">
                    <c path="String"/>
                </c>
                <x path="Int"/>
                <x path="Int"/>
                <c path="aze.display.TilesheetEx"/>
            </f>
        </createFromAssets>
        <createFromImages public="1" set="method" line="110" static="1">
            <f a="names:images:?padding:?spacing">
                <c path="Array">
                    <c path="String"/>
                </c>
                <c path="Array">
                    <t path="nme.display.BitmapData"/>
                </c>
                <x path="Int"/>
                <x path="Int"/>
                <c path="aze.display.TilesheetEx"/>
            </f>
        </createFromImages>
        <closestPow2 public="1" set="method" line="142" static="1">
            <f a="v">
                <x path="Int"/>
                <x path="Int"/>
            </f>
        </closestPow2>
        <getBitmap public="1" get="inline" set="null" line="90">
            <f a="indice">
                <x path="Int"/>
                <t path="nme.display.BitmapData"/>
            </f>
        </getBitmap>
        <getSize public="1" get="inline" set="null" line="83">
            <f a="indice">
                <x path="Int"/>
                <t path="nme.geom.Rectangle"/>
            </f>
        </getSize>
        <getAnim public="1" set="method" line="69">
            <f a="name">
                <c path="String"/>
                <c path="Array">
                    <x path="Int"/>
                </c>
            </f>
        </getAnim>
        <addDefinition set="method" line="54">
            <f a="name:size:bmp">
                <c path="String"/>
                <t path="nme.geom.Rectangle"/>
                <t path="nme.display.BitmapData"/>
                <x path="Void"/>
            </f>
        </addDefinition>
        <bmps>
            <c path="Array">
                <t path="nme.display.BitmapData"/>
            </c>
        </bmps>
        <anims>
            <x path="Map">
                <c path="String"/>
                <c path="Array">
                    <x path="Int"/>
                </c>
            </x>
        </anims>
        <sizes>
            <c path="Array">
                <t path="nme.geom.Rectangle"/>
            </c>
        </sizes>
        <defs>
            <c path="Array">
                <c path="String"/>
            </c>
        </defs>
        <new public="1" set="method" line="35">
            <f a="img">
                <t path="nme.display.BitmapData"/>
                <x path="Void"/>
            </f>
        </new>
        <haxe_doc>* A cross-targets Tilesheet container, with animation and trimming support
            *
            * - animations are matched by name (startsWith) and cached after 1st request,
            * - rect: marks the actual pixel content of the spritesheet that should be displayed for a sprite,
            * - size: original (before trimming) sprite dimensions are indicated by the size's (width,height);
            * rect offset inside the original sprite is indicated by size's (left,top).
            *
            * @author Philippe / http://philippe.elsass.me
        </haxe_doc>
    </class>
    <class path="aze.display.SparrowTilesheet" params=""
           file="/usr/lib/haxe3/lib/tilelayer/git/haxelib/aze/display/SparrowTilesheet.hx">
        <extends path="aze.display.TilesheetEx"/>
        <new public="1" set="method" line="18">
            <f a="img:xml">
                <t path="nme.display.BitmapData"/>
                <c path="String"/>
                <x path="Void"/>
            </f>
        </new>
        <haxe_doc>* Sparrow spritesheet parser for TileLayer
            * - supports animations
            * - supports sprite trimming
            * - does NOT support sprite rotation
            * @author Philippe / http://philippe.elsass.me
        </haxe_doc>
    </class>
    <class path="aze.display.TileBase" params=""
           file="/usr/lib/haxe3/lib/tilelayer/git/haxelib/aze/display/TileLayer.hx" module="aze.display.TileLayer">
        <getView set="method" line="205">
            <f a="">
                <t path="nme.display.DisplayObject"/>
            </f>
        </getView>
        <step set="method" line="200">
            <f a="elapsed">
                <x path="Int"/>
                <x path="Void"/>
            </f>
        </step>
        <init set="method" line="195">
            <f a="layer">
                <c path="aze.display.TileLayer"/>
                <x path="Void"/>
            </f>
        </init>
        <visible public="1">
            <x path="Bool"/>
        </visible>
        <animated public="1">
            <x path="Bool"/>
        </animated>
        <y public="1">
            <x path="Float"/>
        </y>
        <x public="1">
            <x path="Float"/>
        </x>
        <parent public="1">
            <c path="aze.display.TileGroup"/>
        </parent>
        <layer public="1">
            <c path="aze.display.TileLayer"/>
        </layer>
        <new set="method" line="188">
            <f a="layer">
                <c path="aze.display.TileLayer"/>
                <x path="Void"/>
            </f>
        </new>
        <haxe_doc>* @private base tile type</haxe_doc>
    </class>
    <class path="aze.display.TileSprite" params=""
           file="/usr/lib/haxe3/lib/tilelayer/git/haxelib/aze/display/TileSprite.hx">
        <extends path="aze.display.TileBase"/>
        <get_width get="inline" set="null" line="227">
            <f a="">
                <x path="Float"/>
            </f>
        </get_width>
        <width public="1" get="accessor" set="null">
            <x path="Float"/>
        </width>
        <get_height get="inline" set="null" line="222">
            <f a="">
                <x path="Float"/>
            </f>
        </get_height>
        <height public="1" get="accessor" set="null">
            <x path="Float"/>
        </height>
        <get_matrix set="method" line="194">
            <f a="">
                <t path="nme.geom.Matrix"/>
            </f>
        </get_matrix>
        <matrix public="1" get="accessor" set="null">
            <t path="nme.geom.Matrix"/>
        </matrix>
        <set_color set="method" line="157">
            <f a="value">
                <x path="Int"/>
                <x path="Int"/>
            </f>
        </set_color>
        <get_color set="method" line="151">
            <f a="">
                <x path="Int"/>
            </f>
        </get_color>
        <color public="1" get="accessor" set="accessor">
            <x path="Int"/>
        </color>
        <set_scaleY set="method" line="141">
            <f a="value">
                <x path="Float"/>
                <x path="Float"/>
            </f>
        </set_scaleY>
        <get_scaleY get="inline" set="null" line="140">
            <f a="">
                <x path="Float"/>
            </f>
        </get_scaleY>
        <scaleY public="1" get="accessor" set="accessor">
            <x path="Float"/>
        </scaleY>
        <set_scaleX set="method" line="130">
            <f a="value">
                <x path="Float"/>
                <x path="Float"/>
            </f>
        </set_scaleX>
        <get_scaleX get="inline" set="null" line="129">
            <f a="">
                <x path="Float"/>
            </f>
        </get_scaleX>
        <scaleX public="1" get="accessor" set="accessor">
            <x path="Float"/>
        </scaleX>
        <set_scale set="method" line="118">
            <f a="value">
                <x path="Float"/>
                <x path="Float"/>
            </f>
        </set_scale>
        <get_scale get="inline" set="null" line="117">
            <f a="">
                <x path="Float"/>
            </f>
        </get_scale>
        <scale public="1" get="accessor" set="accessor">
            <x path="Float"/>
        </scale>
        <set_rotation set="method" line="107">
            <f a="value">
                <x path="Float"/>
                <x path="Float"/>
            </f>
        </set_rotation>
        <get_rotation get="inline" set="null" line="106">
            <f a="">
                <x path="Float"/>
            </f>
        </get_rotation>
        <rotation public="1" get="accessor" set="accessor">
            <x path="Float"/>
        </rotation>
        <set_mirror set="method" line="96">
            <f a="value">
                <x path="Int"/>
                <x path="Int"/>
            </f>
        </set_mirror>
        <get_mirror get="inline" set="null" line="95">
            <f a="">
                <x path="Int"/>
            </f>
        </get_mirror>
        <mirror public="1" get="accessor" set="accessor">
            <x path="Int"/>
        </mirror>
        <set_indice set="method" line="81">
            <f a="value">
                <x path="Int"/>
                <x path="Int"/>
            </f>
        </set_indice>
        <get_indice get="inline" set="null" line="80">
            <f a="">
                <x path="Int"/>
            </f>
        </get_indice>
        <indice public="1" get="accessor" set="accessor">
            <x path="Int"/>
        </indice>
        <set_tile set="method" line="70">
            <f a="value">
                <c path="String"/>
                <c path="String"/>
            </f>
        </set_tile>
        <get_tile get="inline" set="null" line="69">
            <f a="">
                <c path="String"/>
            </f>
        </get_tile>
        <tile public="1" get="accessor" set="accessor">
            <c path="String"/>
        </tile>
        <getView public="1" set="method" line="65" override="1">
            <f a="">
                <t path="nme.display.DisplayObject"/>
            </f>
        </getView>
        <init public="1" set="method" line="56" override="1">
            <f a="layer">
                <c path="aze.display.TileLayer"/>
                <x path="Void"/>
            </f>
        </init>
        <offset public="1">
            <t path="nme.geom.Point"/>
        </offset>
        <b public="1">
            <x path="Float"/>
        </b>
        <g public="1">
            <x path="Float"/>
        </g>
        <r public="1">
            <x path="Float"/>
        </r>
        <alpha public="1">
            <x path="Float"/>
        </alpha>
        <bmp public="1">
            <t path="nme.display.Bitmap"/>
        </bmp>
        <_matrix>
            <t path="nme.geom.Matrix"/>
        </_matrix>
        <_mirror>
            <x path="Int"/>
        </_mirror>
        <_scaleY>
            <x path="Float"/>
        </_scaleY>
        <_scaleX>
            <x path="Float"/>
        </_scaleX>
        <_rotation>
            <x path="Float"/>
        </_rotation>
        <dirty>
            <x path="Bool"/>
        </dirty>
        <size>
            <t path="nme.geom.Rectangle"/>
        </size>
        <_indice>
            <x path="Int"/>
        </_indice>
        <_tile>
            <c path="String"/>
        </_tile>
        <new public="1" set="method" line="39">
            <f a="layer:tile">
                <c path="aze.display.TileLayer"/>
                <c path="String"/>
                <x path="Void"/>
            </f>
        </new>
        <haxe_doc>* Static tile for TileLayer
            * @author Philippe / http://philippe.elsass.me
        </haxe_doc>
    </class>
    <class path="aze.display.TileClip" params=""
           file="/usr/lib/haxe3/lib/tilelayer/git/haxelib/aze/display/TileClip.hx">
        <extends path="aze.display.TileSprite"/>
        <get_totalFrames get="inline" set="null" line="88">
            <f a="">
                <x path="Int"/>
            </f>
        </get_totalFrames>
        <totalFrames public="1" get="accessor" set="null">
            <x path="Int"/>
        </totalFrames>
        <set_currentFrame set="method" line="78">
            <f a="value">
                <x path="Int"/>
                <x path="Int"/>
            </f>
        </set_currentFrame>
        <get_currentFrame set="method" line="73">
            <f a="">
                <x path="Int"/>
            </f>
        </get_currentFrame>
        <currentFrame public="1" get="accessor" set="accessor">
            <x path="Int"/>
        </currentFrame>
        <stop public="1" set="method" line="69">
            <f a="">
                <x path="Void"/>
            </f>
        </stop>
        <play public="1" set="method" line="57">
            <f a="">
                <x path="Void"/>
            </f>
        </play>
        <step set="method" line="37" override="1">
            <f a="elapsed">
                <x path="Int"/>
                <x path="Void"/>
            </f>
        </step>
        <init public="1" set="method" line="27" override="1">
            <f a="layer">
                <c path="aze.display.TileLayer"/>
                <x path="Void"/>
            </f>
        </init>
        <prevFrame>
            <x path="Int"/>
        </prevFrame>
        <time>
            <x path="Int"/>
        </time>
        <loop public="1">
            <x path="Bool"/>
        </loop>
        <fps public="1">
            <x path="Int"/>
        </fps>
        <frames public="1">
            <c path="Array">
                <x path="Int"/>
            </c>
        </frames>
        <onComplete public="1">
            <f a="">
                <c path="aze.display.TileClip"/>
                <x path="Void"/>
            </f>
        </onComplete>
        <new public="1" set="method" line="20">
            <f a="layer:tile:?fps">
                <c path="aze.display.TileLayer"/>
                <c path="String"/>
                <x path="Int"/>
                <x path="Void"/>
            </f>
        </new>
        <haxe_doc>* Animated tile for TileLayer
            * @author Philippe / http://philippe.elsass.me
        </haxe_doc>
    </class>
    <class path="aze.display.TileGroup" params=""
           file="/usr/lib/haxe3/lib/tilelayer/git/haxelib/aze/display/TileGroup.hx">
        <extends path="aze.display.TileBase"/>
        <get_width set="method" line="160">
            <f a="">
                <x path="Float"/>
            </f>
        </get_width>
        <width public="1" get="accessor" set="null">
            <x path="Float"/>
        </width>
        <get_height set="method" line="143">
            <f a="">
                <x path="Float"/>
            </f>
        </get_height>
        <height public="1" get="accessor" set="null">
            <x path="Float"/>
        </height>
        <get_numChildren get="inline" set="null" line="140">
            <f a="">
                <x path="Int"/>
            </f>
        </get_numChildren>
        <numChildren public="1" get="accessor" set="null">
            <x path="Int"/>
        </numChildren>
        <iterator public="1" get="inline" set="null" line="137">
            <f a="">
                <t path="Iterator">
                    <c path="aze.display.TileBase"/>
                </t>
            </f>
        </iterator>
        <setChildIndex public="1" set="method" line="124">
            <f a="item:index">
                <c path="aze.display.TileBase"/>
                <x path="Int"/>
                <x path="Void"/>
            </f>
        </setChildIndex>
        <getChildIndex public="1" set="method" line="119">
            <f a="item">
                <c path="aze.display.TileBase"/>
                <x path="Int"/>
            </f>
        </getChildIndex>
        <removeAllChildren public="1" set="method" line="109">
            <f a="">
                <c path="Array">
                    <c path="aze.display.TileBase"/>
                </c>
            </f>
        </removeAllChildren>
        <removeChildAt public="1" set="method" line="99">
            <f a="index">
                <x path="Int"/>
                <c path="aze.display.TileBase"/>
            </f>
        </removeChildAt>
        <removeChild public="1" set="method" line="80">
            <f a="item">
                <c path="aze.display.TileBase"/>
                <c path="aze.display.TileBase"/>
            </f>
        </removeChild>
        <addChildAt public="1" set="method" line="69">
            <f a="item:index">
                <c path="aze.display.TileBase"/>
                <x path="Int"/>
                <x path="Int"/>
            </f>
        </addChildAt>
        <addChild public="1" set="method" line="59">
            <f a="item">
                <c path="aze.display.TileBase"/>
                <x path="Int"/>
            </f>
        </addChild>
        <indexOf public="1" get="inline" set="null" line="54">
            <f a="item">
                <c path="aze.display.TileBase"/>
                <x path="Int"/>
            </f>
        </indexOf>
        <initChildren set="method" line="48">
            <f a="">
                <x path="Void"/>
            </f>
        </initChildren>
        <initChild get="inline" set="null" line="41">
            <f a="item">
                <c path="aze.display.TileBase"/>
                <x path="Void"/>
            </f>
        </initChild>
        <getView public="1" set="method" line="38" override="1">
            <f a="">
                <t path="nme.display.DisplayObject"/>
            </f>
        </getView>
        <init public="1" set="method" line="31" override="1">
            <f a="layer">
                <c path="aze.display.TileLayer"/>
                <x path="Void"/>
            </f>
        </init>
        <container>
            <t path="nme.display.Sprite"/>
        </container>
        <children public="1">
            <c path="Array">
                <c path="aze.display.TileBase"/>
            </c>
        </children>
        <new public="1" set="method" line="22">
            <f a="layer">
                <c path="aze.display.TileLayer"/>
                <x path="Void"/>
            </f>
        </new>
        <haxe_doc>* Tiles container for TileLayer
            * - can contain types compatible with TileSprite or TileGroup
            * - only offers x/y position offset to its content
            * @author Philippe / http://philippe.elsass.me
        </haxe_doc>
    </class>
    <class path="aze.display.TileLayer" params=""
           file="/usr/lib/haxe3/lib/tilelayer/git/haxelib/aze/display/TileLayer.hx">
        <extends path="aze.display.TileGroup"/>
        <synchronizedElapsed static="1">
            <x path="Float"/>
        </synchronizedElapsed>
        <renderGroup set="method" line="68">
            <f a="group:index:gx:gy">
                <c path="aze.display.TileGroup"/>
                <x path="Int"/>
                <x path="Float"/>
                <x path="Float"/>
                <x path="Int"/>
            </f>
        </renderGroup>
        <render public="1" set="method" line="54">
            <f a="?elapsed">
                <x path="Int"/>
                <x path="Int"/>
            </f>
        </render>
        <drawList>
            <c path="aze.display.DrawList"/>
        </drawList>
        <tilesheet public="1">
            <c path="aze.display.TilesheetEx"/>
        </tilesheet>
        <useTint public="1">
            <x path="Bool"/>
        </useTint>
        <useTransforms public="1">
            <x path="Bool"/>
        </useTransforms>
        <useAlpha public="1">
            <x path="Bool"/>
        </useAlpha>
        <useAdditive public="1">
            <x path="Bool"/>
        </useAdditive>
        <useSmoothing public="1">
            <x path="Bool"/>
        </useSmoothing>
        <view public="1">
            <t path="nme.display.Sprite"/>
        </view>
        <new public="1" set="method" line="37">
            <f a="tilesheet:?smooth:?additive">
                <c path="aze.display.TilesheetEx"/>
                <x path="Bool"/>
                <x path="Bool"/>
                <x path="Void"/>
            </f>
        </new>
        <haxe_doc>* A little wrapper of NME's Tilesheet rendering (for native platform)
            * and using Bitmaps for Flash platform.
            * Features basic containers (TileGroup) and spritesheets animations.
            * @author Philippe / http://philippe.elsass.me
        </haxe_doc>
    </class>
    <class path="aze.display.DrawList" params=""
           file="/usr/lib/haxe3/lib/tilelayer/git/haxelib/aze/display/TileLayer.hx" module="aze.display.TileLayer">
        <end public="1" set="method" line="284">
            <f a="">
                <x path="Void"/>
            </f>
        </end>
        <begin public="1" set="method" line="242">
            <f a="elapsed:useTransforms:useAlpha:useTint:useAdditive">
                <x path="Int"/>
                <x path="Bool"/>
                <x path="Bool"/>
                <x path="Bool"/>
                <x path="Bool"/>
                <x path="Void"/>
            </f>
        </begin>
        <runs public="1">
            <x path="Int"/>
        </runs>
        <elapsed public="1">
            <x path="Int"/>
        </elapsed>
        <time public="1">
            <x path="Int"/>
        </time>
        <flags public="1">
            <x path="Int"/>
        </flags>
        <offsetAlpha public="1">
            <x path="Int"/>
        </offsetAlpha>
        <offsetRGB public="1">
            <x path="Int"/>
        </offsetRGB>
        <offsetTransform public="1">
            <x path="Int"/>
        </offsetTransform>
        <fields public="1">
            <x path="Int"/>
        </fields>
        <index public="1">
            <x path="Int"/>
        </index>
        <list public="1">
            <c path="Array">
                <x path="Float"/>
            </c>
        </list>
        <new public="1" set="method" line="231">
            <f a="">
                <x path="Void"/>
            </f>
        </new>
        <haxe_doc>* @private render buffer</haxe_doc>
    </class>
    <class path="com.knowledgeplayers.grar.display.FilterManager" params=""
           file="/Users/jbrichardet/IdeaProjects/grar/com/knowledgeplayers/grar/display/FilterManager.hx">
        <filters line="14" static="1">
            <x path="Map">
                <c path="String"/>
                <t path="nme.filters.BitmapFilter"/>
            </x>
        </filters>
        <getFilter public="1" set="method" line="20" static="1">
            <f a="id">
                <c path="String"/>
                <t path="nme.filters.BitmapFilter"/>
            </f>
            <haxe_doc>* @return a filter from the template</haxe_doc>
        </getFilter>
        <createFilter public="1" set="method" line="31" static="1">
            <f a="filter">
                <c path="String"/>
                <t path="nme.filters.BitmapFilter"/>
            </f>
            <haxe_doc>* Create a bitmap filter from an XML descriptor
                * @param xml : Fast descriptor
                * @return a bitmap filter
            </haxe_doc>
        </createFilter>
        <setDropShadowFilter set="method" line="45" static="1">
            <f a="_params">
                <c path="String"/>
                <t path="nme.filters.DropShadowFilter"/>
            </f>
        </setDropShadowFilter>
        <loadTemplate public="1" set="method" line="53" static="1">
            <f a="file">
                <c path="String"/>
                <x path="Void"/>
            </f>
        </loadTemplate>
    </class>
    <class path="flash.events.IEventDispatcher" params="" file="/usr/lib/haxe/std/flash/events/IEventDispatcher.hx"
           extern="1" interface="1">
        <willTrigger public="1" set="method">
            <f a="type">
                <c path="String"/>
                <x path="Bool"/>
            </f>
        </willTrigger>
        <removeEventListener public="1" set="method">
            <f a="type:listener:?useCapture">
                <c path="String"/>
                <f a="">
                    <d/>
                    <x path="Void"/>
                </f>
                <x path="Bool"/>
                <x path="Void"/>
            </f>
        </removeEventListener>
        <hasEventListener public="1" set="method">
            <f a="type">
                <c path="String"/>
                <x path="Bool"/>
            </f>
        </hasEventListener>
        <dispatchEvent public="1" set="method">
            <f a="event">
                <c path="flash.events.Event"/>
                <x path="Bool"/>
            </f>
        </dispatchEvent>
        <addEventListener public="1" set="method">
            <f a="type:listener:?useCapture:?priority:?useWeakReference">
                <c path="String"/>
                <f a="">
                    <d/>
                    <x path="Void"/>
                </f>
                <x path="Bool"/>
                <x path="Int"/>
                <x path="Bool"/>
                <x path="Void"/>
            </f>
        </addEventListener>
    </class>
    <class path="flash.events.EventDispatcher" params="" file="/usr/lib/haxe/std/flash/events/EventDispatcher.hx"
           extern="1">
        <implements path="flash.events.IEventDispatcher"/>
        <willTrigger public="1" set="method">
            <f a="type">
                <c path="String"/>
                <x path="Bool"/>
            </f>
        </willTrigger>
        <toString public="1" set="method">
            <f a="">
                <c path="String"/>
            </f>
        </toString>
        <removeEventListener public="1" set="method">
            <f a="type:listener:?useCapture">
                <c path="String"/>
                <f a="">
                    <d/>
                    <x path="Void"/>
                </f>
                <x path="Bool"/>
                <x path="Void"/>
            </f>
        </removeEventListener>
        <hasEventListener public="1" set="method">
            <f a="type">
                <c path="String"/>
                <x path="Bool"/>
            </f>
        </hasEventListener>
        <dispatchEvent public="1" set="method">
            <f a="event">
                <c path="flash.events.Event"/>
                <x path="Bool"/>
            </f>
        </dispatchEvent>
        <addEventListener public="1" set="method">
            <f a="type:listener:?useCapture:?priority:?useWeakReference">
                <c path="String"/>
                <f a="">
                    <d/>
                    <x path="Void"/>
                </f>
                <x path="Bool"/>
                <x path="Int"/>
                <x path="Bool"/>
                <x path="Void"/>
            </f>
        </addEventListener>
        <new public="1" set="method">
            <f a="?target">
                <c path="flash.events.IEventDispatcher"/>
                <x path="Void"/>
            </f>
        </new>
    </class>
    <class path="com.knowledgeplayers.grar.display.GameManager" params=""
           file="/Users/jbrichardet/IdeaProjects/grar/com/knowledgeplayers/grar/display/GameManager.hx">
        <extends path="flash.events.EventDispatcher"/>
        <instance public="1" get="accessor" set="null" static="1">
            <c path="com.knowledgeplayers.grar.display.GameManager"/>
            <haxe_doc>* Instance of the game manager</haxe_doc>
        </instance>
        <get_instance public="1" set="method" line="84" static="1">
            <f a="">
                <c path="com.knowledgeplayers.grar.display.GameManager"/>
            </f>
            <haxe_doc>* @return the instance of the singleton</haxe_doc>
        </get_instance>
        <setBookmark set="method" line="366">
            <f a="partId">
                <c path="String"/>
                <x path="Void"/>
            </f>
        </setBookmark>
        <cleanup set="method" line="357">
            <f a="">
                <x path="Void"/>
            </f>
        </cleanup>
        <onActivityEnd set="method" line="341">
            <f a="e">
                <c path="com.knowledgeplayers.grar.event.PartEvent"/>
                <x path="Void"/>
            </f>
        </onActivityEnd>
        <onEnterSubPart public="1" set="method" line="334">
            <f a="event">
                <c path="com.knowledgeplayers.grar.event.PartEvent"/>
                <x path="Void"/>
            </f>
        </onEnterSubPart>
        <onPartLoaded set="method" line="321">
            <f a="event">
                <c path="com.knowledgeplayers.grar.event.PartEvent"/>
                <x path="Void"/>
            </f>
        </onPartLoaded>
        <onExitPart set="method" line="306">
            <f a="event">
                <t path="nme.events.Event"/>
                <x path="Void"/>
            </f>
        </onExitPart>
        <parseDisplayTokens set="method" line="295">
            <f a="display">
                <c path="Xml"/>
                <x path="Void"/>
            </f>
        </parseDisplayTokens>
        <parseTokens set="method" line="286">
            <f a="tokens">
                <c path="Xml"/>
                <x path="Void"/>
            </f>
        </parseTokens>
        <launchGame set="method" line="268">
            <f a="">
                <x path="Void"/>
            </f>
        </launchGame>
        <finishPart public="1" set="method" line="258">
            <f a="partId">
                <c path="String"/>
                <x path="Void"/>
            </f>
            <haxe_doc>* End a part. Update internal state accordingly</haxe_doc>
        </finishPart>
        <getItemName public="1" set="method" line="244">
            <f a="id">
                <c path="String"/>
                <c path="String"/>
            </f>
            <haxe_doc>* Get the name link to this ID</haxe_doc>
        </getItemName>
        <displayPartById public="1" set="method" line="235">
            <f a="?id:?interrupt">
                <c path="String"/>
                <x path="Bool"/>
                <x path="Void"/>
            </f>
            <haxe_doc>* Display a graphic representation of the part with the given ID
                * @param id : The ID of the part to display
            </haxe_doc>
        </displayPartById>
        <displayActivity public="1" set="method" line="216">
            <f a="activity">
                <c path="com.knowledgeplayers.grar.structure.activity.Activity"/>
                <x path="Void"/>
            </f>
            <haxe_doc>* Displays an activity
                * @param activity : Activity model to display
            </haxe_doc>
        </displayActivity>
        <displayPart public="1" set="method" line="190">
            <f a="part:?interrupt:?startPosition">
                <c path="com.knowledgeplayers.grar.structure.part.Part"/>
                <x path="Bool"/>
                <x path="Int"/>
                <x path="Void"/>
            </f>
            <haxe_doc>* Display a graphic representation of the given part
                * @param part : The part to display
                * @param interrupt : Stop current part to display the new one
            </haxe_doc>
        </displayPart>
        <playSound public="1" set="method" line="169">
            <f a="soundRef">
                <c path="String"/>
                <x path="Void"/>
            </f>
            <haxe_doc>* Play a sound</haxe_doc>
        </playSound>
        <changeVolume public="1" set="method" line="155">
            <f a="?nb">
                <x path="Float"/>
                <x path="Void"/>
            </f>
            <haxe_doc>* Change volume</haxe_doc>
        </changeVolume>
        <changeLayout public="1" set="method" line="143">
            <f a="layout">
                <c path="String"/>
                <x path="Void"/>
            </f>
            <haxe_doc>* Change the layout of the game</haxe_doc>
        </changeLayout>
        <set_menuLoaded public="1" set="method" line="133">
            <f a="loaded">
                <x path="Bool"/>
                <x path="Bool"/>
            </f>
        </set_menuLoaded>
        <loadTokens public="1" set="method" line="128">
            <f a="path">
                <c path="String"/>
                <x path="Void"/>
            </f>
            <haxe_doc>* Load the tokens descriptor file
                * @param path : Path to the file
            </haxe_doc>
        </loadTokens>
        <activateToken public="1" set="method" line="111">
            <f a="tokenName">
                <c path="String"/>
                <x path="Void"/>
            </f>
            <haxe_doc>* Activate a token of the inventory
                * @param tokenName : Name of the token to activate
            </haxe_doc>
        </activateToken>
        <startGame public="1" set="method" line="97">
            <f a="game:?layout">
                <c path="com.knowledgeplayers.grar.structure.Game"/>
                <c path="String"/>
                <x path="Void"/>
            </f>
            <haxe_doc>* Start the game
                * @param game : The game to start
                * @param layout : The layout to display
            </haxe_doc>
        </startGame>
        <startIndex>
            <x path="Int"/>
        </startIndex>
        <itemSoundChannel>
            <t path="nme.media.SoundChannel"/>
        </itemSoundChannel>
        <itemSound>
            <t path="nme.media.Sound"/>
        </itemSound>
        <soundControl>
            <t path="nme.media.SoundTransform"/>
        </soundControl>
        <nbVolume>
            <x path="Float"/>
        </nbVolume>
        <layout>
            <c path="com.knowledgeplayers.grar.display.layout.Layout"/>
        </layout>
        <activityDisplay public="1" set="null">
            <c path="com.knowledgeplayers.grar.display.activity.ActivityDisplay"/>
            <haxe_doc>* Current activity display</haxe_doc>
        </activityDisplay>
        <menuLoaded public="1" set="accessor">
            <x path="Bool"/>
        </menuLoaded>
        <tokensImages public="1" set="null">
            <x path="Map">
                <c path="String"/>
                <a>
                    <small>
                        <t path="nme.display.BitmapData"/>
                    </small>
                    <large>
                        <t path="nme.display.BitmapData"/>
                    </large>
                </a>
            </x>
            <haxe_doc>* Tokens images</haxe_doc>
        </tokensImages>
        <tokenNotification public="1">
            <c path="com.knowledgeplayers.grar.display.element.TokenNotification"/>
            <haxe_doc>* Notification display of a token</haxe_doc>
        </tokenNotification>
        <inventory public="1" set="null">
            <x path="Map">
                <c path="String"/>
                <c path="com.knowledgeplayers.grar.structure.Token"/>
            </x>
            <haxe_doc>* Inventory of the game</haxe_doc>
        </inventory>
        <parts public="1" set="null">
            <c path="haxe.ds.GenericStack_com_knowledgeplayers_grar_display_part_PartDisplay"/>
            <haxe_doc>* Queue of parts managed in the game</haxe_doc>
        </parts>
        <game public="1">
            <c path="com.knowledgeplayers.grar.structure.Game"/>
            <haxe_doc>* The game model</haxe_doc>
        </game>
        <new set="method" line="277">
            <f a="">
                <x path="Void"/>
            </f>
        </new>
        <haxe_doc>* Display of a game</haxe_doc>
    </class>
    <class path="flash.display.IBitmapDrawable" params="" file="/usr/lib/haxe/std/flash/display/IBitmapDrawable.hx"
           extern="1" interface="1"/>
    <class path="flash.display.DisplayObject" params="" file="/usr/lib/haxe/std/flash/display/DisplayObject.hx"
           extern="1">
        <extends path="flash.events.EventDispatcher"/>
        <implements path="flash.display.IBitmapDrawable"/>
        <localToGlobal public="1" set="method">
            <f a="point">
                <c path="flash.geom.Point"/>
                <c path="flash.geom.Point"/>
            </f>
        </localToGlobal>
        <local3DToGlobal public="1" set="method">
            <f a="point3d">
                <c path="flash.geom.Vector3D"/>
                <c path="flash.geom.Point"/>
            </f>
            <meta>
                <m n=":require">
                    <e>flash10</e>
                </m>
            </meta>
        </local3DToGlobal>
        <hitTestPoint public="1" set="method">
            <f a="x:y:?shapeFlag">
                <x path="Float"/>
                <x path="Float"/>
                <x path="Bool"/>
                <x path="Bool"/>
            </f>
        </hitTestPoint>
        <hitTestObject public="1" set="method">
            <f a="obj">
                <c path="flash.display.DisplayObject"/>
                <x path="Bool"/>
            </f>
        </hitTestObject>
        <globalToLocal3D public="1" set="method">
            <f a="point">
                <c path="flash.geom.Point"/>
                <c path="flash.geom.Vector3D"/>
            </f>
            <meta>
                <m n=":require">
                    <e>flash10</e>
                </m>
            </meta>
        </globalToLocal3D>
        <globalToLocal public="1" set="method">
            <f a="point">
                <c path="flash.geom.Point"/>
                <c path="flash.geom.Point"/>
            </f>
        </globalToLocal>
        <getRect public="1" set="method">
            <f a="targetCoordinateSpace">
                <c path="flash.display.DisplayObject"/>
                <c path="flash.geom.Rectangle"/>
            </f>
        </getRect>
        <getBounds public="1" set="method">
            <f a="targetCoordinateSpace">
                <c path="flash.display.DisplayObject"/>
                <c path="flash.geom.Rectangle"/>
            </f>
        </getBounds>
        <z public="1">
            <x path="Float"/>
            <meta>
                <m n=":require">
                    <e>flash10</e>
                </m>
            </meta>
        </z>
        <y public="1">
            <x path="Float"/>
        </y>
        <x public="1">
            <x path="Float"/>
        </x>
        <width public="1">
            <x path="Float"/>
        </width>
        <visible public="1">
            <x path="Bool"/>
        </visible>
        <transform public="1">
            <c path="flash.geom.Transform"/>
        </transform>
        <stage public="1" set="null">
            <c path="flash.display.Stage"/>
        </stage>
        <scrollRect public="1">
            <c path="flash.geom.Rectangle"/>
        </scrollRect>
        <scaleZ public="1">
            <x path="Float"/>
            <meta>
                <m n=":require">
                    <e>flash10</e>
                </m>
            </meta>
        </scaleZ>
        <scaleY public="1">
            <x path="Float"/>
        </scaleY>
        <scaleX public="1">
            <x path="Float"/>
        </scaleX>
        <scale9Grid public="1">
            <c path="flash.geom.Rectangle"/>
        </scale9Grid>
        <rotationZ public="1">
            <x path="Float"/>
            <meta>
                <m n=":require">
                    <e>flash10</e>
                </m>
            </meta>
        </rotationZ>
        <rotationY public="1">
            <x path="Float"/>
            <meta>
                <m n=":require">
                    <e>flash10</e>
                </m>
            </meta>
        </rotationY>
        <rotationX public="1">
            <x path="Float"/>
            <meta>
                <m n=":require">
                    <e>flash10</e>
                </m>
            </meta>
        </rotationX>
        <rotation public="1">
            <x path="Float"/>
        </rotation>
        <root public="1" set="null">
            <c path="flash.display.DisplayObject"/>
        </root>
        <parent public="1" set="null">
            <c path="flash.display.DisplayObjectContainer"/>
        </parent>
        <opaqueBackground public="1">
            <t path="Null">
                <x path="UInt"/>
            </t>
        </opaqueBackground>
        <name public="1">
            <c path="String"/>
        </name>
        <mouseY public="1" set="null">
            <x path="Float"/>
        </mouseY>
        <mouseX public="1" set="null">
            <x path="Float"/>
        </mouseX>
        <mask public="1">
            <c path="flash.display.DisplayObject"/>
        </mask>
        <loaderInfo public="1" set="null">
            <c path="flash.display.LoaderInfo"/>
        </loaderInfo>
        <height public="1">
            <x path="Float"/>
        </height>
        <filters public="1">
            <c path="Array">
                <c path="flash.filters.BitmapFilter"/>
            </c>
        </filters>
        <cacheAsBitmap public="1">
            <x path="Bool"/>
        </cacheAsBitmap>
        <blendShader public="1" get="null">
            <c path="flash.display.Shader"/>
            <meta>
                <m n=":require">
                    <e>flash10</e>
                </m>
            </meta>
        </blendShader>
        <blendMode public="1">
            <e path="flash.display.BlendMode"/>
        </blendMode>
        <alpha public="1">
            <x path="Float"/>
        </alpha>
        <accessibilityProperties public="1">
            <c path="flash.accessibility.AccessibilityProperties"/>
        </accessibilityProperties>
    </class>
    <class path="flash.display.InteractiveObject" params="" file="/usr/lib/haxe/std/flash/display/InteractiveObject.hx"
           extern="1">
        <extends path="flash.display.DisplayObject"/>
        <requestSoftKeyboard public="1" set="method">
            <f a="">
                <x path="Bool"/>
            </f>
            <meta>
                <m n=":require">
                    <e>flash11</e>
                </m>
            </meta>
        </requestSoftKeyboard>
        <tabIndex public="1">
            <x path="Int"/>
        </tabIndex>
        <tabEnabled public="1">
            <x path="Bool"/>
        </tabEnabled>
        <softKeyboardInputAreaOfInterest public="1">
            <c path="flash.geom.Rectangle"/>
            <meta>
                <m n=":require">
                    <e>flash11</e>
                </m>
            </meta>
        </softKeyboardInputAreaOfInterest>
        <needsSoftKeyboard public="1">
            <x path="Bool"/>
            <meta>
                <m n=":require">
                    <e>flash11</e>
                </m>
            </meta>
        </needsSoftKeyboard>
        <mouseEnabled public="1">
            <x path="Bool"/>
        </mouseEnabled>
        <focusRect public="1">
            <d/>
        </focusRect>
        <doubleClickEnabled public="1">
            <x path="Bool"/>
        </doubleClickEnabled>
        <contextMenu public="1">
            <c path="flash.ui.ContextMenu"/>
        </contextMenu>
        <accessibilityImplementation public="1">
            <c path="flash.accessibility.AccessibilityImplementation"/>
        </accessibilityImplementation>
        <new public="1" set="method">
            <f a="">
                <x path="Void"/>
            </f>
        </new>
    </class>
    <class path="flash.display.DisplayObjectContainer" params=""
           file="/usr/lib/haxe/std/flash/display/DisplayObjectContainer.hx" extern="1">
        <extends path="flash.display.InteractiveObject"/>
        <swapChildrenAt public="1" set="method">
            <f a="index1:index2">
                <x path="Int"/>
                <x path="Int"/>
                <x path="Void"/>
            </f>
        </swapChildrenAt>
        <swapChildren public="1" set="method">
            <f a="child1:child2">
                <c path="flash.display.DisplayObject"/>
                <c path="flash.display.DisplayObject"/>
                <x path="Void"/>
            </f>
        </swapChildren>
        <setChildIndex public="1" set="method">
            <f a="child:index">
                <c path="flash.display.DisplayObject"/>
                <x path="Int"/>
                <x path="Void"/>
            </f>
        </setChildIndex>
        <removeChildren public="1" set="method">
            <f a="?beginIndex:?endIndex">
                <x path="Int"/>
                <x path="Int"/>
                <x path="Void"/>
            </f>
            <meta>
                <m n=":require">
                    <e>flash11</e>
                </m>
            </meta>
        </removeChildren>
        <removeChildAt public="1" set="method">
            <f a="index">
                <x path="Int"/>
                <c path="flash.display.DisplayObject"/>
            </f>
        </removeChildAt>
        <removeChild public="1" set="method">
            <f a="child">
                <c path="flash.display.DisplayObject"/>
                <c path="flash.display.DisplayObject"/>
            </f>
        </removeChild>
        <getObjectsUnderPoint public="1" set="method">
            <f a="point">
                <c path="flash.geom.Point"/>
                <c path="Array">
                    <c path="flash.display.DisplayObject"/>
                </c>
            </f>
        </getObjectsUnderPoint>
        <getChildIndex public="1" set="method">
            <f a="child">
                <c path="flash.display.DisplayObject"/>
                <x path="Int"/>
            </f>
        </getChildIndex>
        <getChildByName public="1" set="method">
            <f a="name">
                <c path="String"/>
                <c path="flash.display.DisplayObject"/>
            </f>
        </getChildByName>
        <getChildAt public="1" set="method">
            <f a="index">
                <x path="Int"/>
                <c path="flash.display.DisplayObject"/>
            </f>
        </getChildAt>
        <contains public="1" set="method">
            <f a="child">
                <c path="flash.display.DisplayObject"/>
                <x path="Bool"/>
            </f>
        </contains>
        <areInaccessibleObjectsUnderPoint public="1" set="method">
            <f a="point">
                <c path="flash.geom.Point"/>
                <x path="Bool"/>
            </f>
        </areInaccessibleObjectsUnderPoint>
        <addChildAt public="1" set="method">
            <f a="child:index">
                <c path="flash.display.DisplayObject"/>
                <x path="Int"/>
                <c path="flash.display.DisplayObject"/>
            </f>
        </addChildAt>
        <addChild public="1" set="method">
            <f a="child">
                <c path="flash.display.DisplayObject"/>
                <c path="flash.display.DisplayObject"/>
            </f>
        </addChild>
        <textSnapshot public="1" set="null">
            <c path="flash.text.TextSnapshot"/>
        </textSnapshot>
        <tabChildren public="1">
            <x path="Bool"/>
        </tabChildren>
        <numChildren public="1" set="null">
            <x path="Int"/>
        </numChildren>
        <mouseChildren public="1">
            <x path="Bool"/>
        </mouseChildren>
        <new public="1" set="method">
            <f a="">
                <x path="Void"/>
            </f>
        </new>
    </class>
    <class path="flash.display.Sprite" params="" file="/usr/lib/haxe/std/flash/display/Sprite.hx" extern="1">
        <extends path="flash.display.DisplayObjectContainer"/>
        <stopTouchDrag public="1" set="method">
            <f a="touchPointID">
                <x path="Int"/>
                <x path="Void"/>
            </f>
            <meta>
                <m n=":require">
                    <e>flash10_1</e>
                </m>
            </meta>
        </stopTouchDrag>
        <stopDrag public="1" set="method">
            <f a="">
                <x path="Void"/>
            </f>
        </stopDrag>
        <startTouchDrag public="1" set="method">
            <f a="touchPointID:?lockCenter:?bounds">
                <x path="Int"/>
                <x path="Bool"/>
                <c path="flash.geom.Rectangle"/>
                <x path="Void"/>
            </f>
            <meta>
                <m n=":require">
                    <e>flash10_1</e>
                </m>
            </meta>
        </startTouchDrag>
        <startDrag public="1" set="method">
            <f a="?lockCenter:?bounds">
                <x path="Bool"/>
                <c path="flash.geom.Rectangle"/>
                <x path="Void"/>
            </f>
        </startDrag>
        <useHandCursor public="1">
            <x path="Bool"/>
        </useHandCursor>
        <soundTransform public="1">
            <c path="flash.media.SoundTransform"/>
        </soundTransform>
        <hitArea public="1">
            <c path="flash.display.Sprite"/>
        </hitArea>
        <graphics public="1" set="null">
            <c path="flash.display.Graphics"/>
        </graphics>
        <dropTarget public="1" set="null">
            <c path="flash.display.DisplayObject"/>
        </dropTarget>
        <buttonMode public="1">
            <x path="Bool"/>
        </buttonMode>
        <new public="1" set="method">
            <f a="">
                <x path="Void"/>
            </f>
        </new>
    </class>
    <class path="com.knowledgeplayers.grar.display.KpDisplay" params=""
           file="/Users/jbrichardet/IdeaProjects/grar/com/knowledgeplayers/grar/display/KpDisplay.hx">
        <extends path="flash.display.Sprite"/>
        <setButtonAction set="method" line="204">
            <f a="button:action">
                <c path="com.knowledgeplayers.grar.display.component.button.DefaultButton"/>
                <c path="String"/>
                <x path="Void"/>
            </f>
        </setButtonAction>
        <initDisplayObject set="method" line="187">
            <f a="display:node:?transition">
                <t path="nme.display.DisplayObject"/>
                <c path="haxe.xml.Fast"/>
                <c path="String"/>
                <x path="Void"/>
            </f>
        </initDisplayObject>
        <addElement set="method" line="167">
            <f a="elem:node:?initObject">
                <t path="nme.display.DisplayObject"/>
                <c path="haxe.xml.Fast"/>
                <x path="Bool"/>
                <x path="Void"/>
            </f>
        </addElement>
        <createCharacter set="method" line="154">
            <f a="character">
                <c path="haxe.xml.Fast"/>
                <x path="Void"/>
            </f>
        </createCharacter>
        <createTextGroup set="method" line="141">
            <f a="textNode">
                <c path="haxe.xml.Fast"/>
                <x path="Void"/>
            </f>
        </createTextGroup>
        <createText set="method" line="136">
            <f a="textNode">
                <c path="haxe.xml.Fast"/>
                <x path="Void"/>
            </f>
        </createText>
        <createButton set="method" line="127">
            <f a="buttonNode">
                <c path="haxe.xml.Fast"/>
                <x path="Void"/>
            </f>
        </createButton>
        <createItem set="method" line="82">
            <f a="itemNode">
                <c path="haxe.xml.Fast"/>
                <x path="Void"/>
            </f>
        </createItem>
        <createBackground set="method" line="76">
            <f a="bkgNode">
                <c path="haxe.xml.Fast"/>
                <x path="Void"/>
            </f>
        </createBackground>
        <createElement set="method" line="62">
            <f a="elemNode">
                <c path="haxe.xml.Fast"/>
                <x path="Void"/>
            </f>
        </createElement>
        <createDisplay set="method" line="55">
            <f a="">
                <x path="Void"/>
            </f>
        </createDisplay>
        <parseContent public="1" set="method" line="39">
            <f a="content">
                <c path="Xml"/>
                <x path="Void"/>
            </f>
            <haxe_doc>* Parse the content of a display XML
                * @param content : Content of the XML
            </haxe_doc>
        </parseContent>
        <totalSpriteSheets>
            <x path="Int"/>
        </totalSpriteSheets>
        <displayFast>
            <c path="haxe.xml.Fast"/>
        </displayFast>
        <layers>
            <x path="Map">
                <c path="String"/>
                <c path="aze.display.TileLayer"/>
            </x>
        </layers>
        <textGroups>
            <x path="Map">
                <c path="String"/>
                <x path="Map">
                    <c path="String"/>
                    <a>
                        <z>
                            <x path="Int"/>
                        </z>
                        <obj>
                            <c path="haxe.xml.Fast"/>
                        </obj>
                    </a>
                </x>
            </x>
        </textGroups>
        <zIndex>
            <x path="Int"/>
        </zIndex>
        <displaysFast>
            <x path="Map">
                <c path="String"/>
                <c path="haxe.xml.Fast"/>
            </x>
        </displaysFast>
        <displays>
            <x path="Map">
                <c path="String"/>
                <a>
                    <z>
                        <x path="Int"/>
                    </z>
                    <obj>
                        <t path="nme.display.DisplayObject"/>
                    </obj>
                </a>
            </x>
        </displays>
        <spritesheets public="1">
            <x path="Map">
                <c path="String"/>
                <c path="aze.display.TilesheetEx"/>
            </x>
            <haxe_doc>* All the spritesheets used here</haxe_doc>
        </spritesheets>
        <new set="method" line="207">
            <f a="">
                <x path="Void"/>
            </f>
        </new>
    </class>
    <class path="com.knowledgeplayers.grar.display.LayoutManager" params=""
           file="/Users/jbrichardet/IdeaProjects/grar/com/knowledgeplayers/grar/display/LayoutManager.hx">
        <extends path="flash.events.EventDispatcher"/>
        <instance public="1" get="accessor" set="null" static="1">
            <c path="com.knowledgeplayers.grar.display.LayoutManager"/>
            <haxe_doc>* Instance of the manager</haxe_doc>
        </instance>
        <get_instance public="1" set="method" line="21" static="1">
            <f a="">
                <c path="com.knowledgeplayers.grar.display.LayoutManager"/>
            </f>
        </get_instance>
        <loadInterfaceXml public="1" set="method" line="49">
            <f a="_xml">
                <c path="haxe.xml.Fast"/>
                <x path="Void"/>
            </f>
        </loadInterfaceXml>
        <parseXml public="1" set="method" line="41">
            <f a="xml">
                <c path="Xml"/>
                <x path="Void"/>
            </f>
            <haxe_doc>* Parsing du Xml</haxe_doc>
        </parseXml>
        <getLayout public="1" set="method" line="32">
            <f a="ref">
                <c path="String"/>
                <c path="com.knowledgeplayers.grar.display.layout.Layout"/>
            </f>
            <haxe_doc>* @return the layout with the given ref</haxe_doc>
        </getLayout>
        <layouts>
            <x path="Map">
                <c path="String"/>
                <c path="com.knowledgeplayers.grar.display.layout.Layout"/>
            </x>
        </layouts>
        <layoutNode>
            <c path="haxe.xml.Fast"/>
        </layoutNode>
        <new set="method" line="66">
            <f a="">
                <x path="Void"/>
            </f>
            <haxe_doc>* Layout Display</haxe_doc>
        </new>
    </class>
    <class path="com.knowledgeplayers.grar.display.ResizeManager" params=""
           file="/Users/jbrichardet/IdeaProjects/grar/com/knowledgeplayers/grar/display/ResizeManager.hx">
        <instance public="1" get="accessor" set="null" static="1">
            <c path="com.knowledgeplayers.grar.display.ResizeManager"/>
            <haxe_doc>* Instance of the manaager</haxe_doc>
        </instance>
        <get_instance public="1" set="method" line="38" static="1">
            <f a="">
                <c path="com.knowledgeplayers.grar.display.ResizeManager"/>
            </f>
            <haxe_doc>* @return the instance of the manager</haxe_doc>
        </get_instance>
        <addDisplayObjects public="1" set="method" line="75">
            <f a="dp:?node">
                <t path="nme.display.DisplayObject"/>
                <c path="haxe.xml.Fast"/>
                <x path="Void"/>
            </f>
            <haxe_doc>* Add a display object to be managed
                * @param dp : object to manage
                * @param node : fast xml node with infos
            </haxe_doc>
        </addDisplayObjects>
        <onResize public="1" set="method" line="51">
            <f a="?e">
                <t path="nme.events.Event"/>
                <x path="Void"/>
            </f>
            <haxe_doc>* Listener of resize events
                * @param e : the event
            </haxe_doc>
        </onResize>
        <ratioH>
            <x path="Float"/>
        </ratioH>
        <ratioW>
            <x path="Float"/>
        </ratioW>
        <originH>
            <x path="Int"/>
        </originH>
        <originW>
            <x path="Int"/>
        </originW>
        <replacedObjects>
            <c path="List">
                <d/>
            </c>
        </replacedObjects>
        <resizedObjects>
            <c path="List">
                <d/>
            </c>
        </resizedObjects>
        <new set="method" line="25">
            <f a="">
                <x path="Void"/>
            </f>
        </new>
        <haxe_doc>* Manager of resize events</haxe_doc>
    </class>
    <class path="com.knowledgeplayers.grar.display.TweenManager" params=""
           file="/Users/jbrichardet/IdeaProjects/grar/com/knowledgeplayers/grar/display/TweenManager.hx">
        <transitions line="32" static="1">
            <x path="Map">
                <c path="String"/>
                <d/>
            </x>
        </transitions>
        <discovering static="1">
            <a>
                <ref>
                    <c path="String"/>
                </ref>
                <display>
                    <t path="nme.display.Sprite"/>
                </display>
            </a>
        </discovering>
        <applyTransition public="1" set="method" line="42" static="1">
            <f a="display:refs">
                <t path="nme.display.DisplayObject"/>
                <c path="String"/>
                <t path="Null">
                    <c path="motion.actuators.IGenericActuator"/>
                </t>
            </f>
            <haxe_doc>* Apply the given transition to the given displayObject
                * @param display : Target of the tween
                * @param ref : The name of the fade transition to applied
                * @return the actuator
            </haxe_doc>
        </applyTransition>
        <startTransition set="method" line="57" static="1">
            <f a="display:ref">
                <t path="nme.display.DisplayObject"/>
                <c path="String"/>
                <t path="Null">
                    <c path="motion.actuators.IGenericActuator"/>
                </t>
            </f>
        </startTransition>
        <discover public="1" set="method" line="86" static="1">
            <f a="display:ref:it">
                <t path="nme.display.DisplayObject"/>
                <c path="String"/>
                <x path="Int"/>
                <c path="motion.actuators.IGenericActuator"/>
            </f>
            <haxe_doc>* Get a discover in effect for the object
                * @param display : Target of the tween
                * @param ref : The name of the fade transition to applied
                * @return the actuator
            </haxe_doc>
        </discover>
        <fastForwardDiscover public="1" set="method" line="143" static="1">
            <f a="">
                <x path="Void"/>
            </f>
        </fastForwardDiscover>
        <fade public="1" set="method" line="161" static="1">
            <f a="display:ref">
                <t path="nme.display.DisplayObject"/>
                <c path="String"/>
                <c path="motion.actuators.IGenericActuator"/>
            </f>
            <haxe_doc>* Get a fade in effect for the object
                * @param display : Target of the tween
                * @param ref : The name of the fade transition to applied
                * @return the actuator
            </haxe_doc>
        </fade>
        <wiggle public="1" set="method" line="177" static="1">
            <f a="display:ref">
                <t path="nme.display.DisplayObject"/>
                <c path="String"/>
                <c path="motion.actuators.IGenericActuator"/>
            </f>
            <haxe_doc>* Get a wiggle effect for the object
                * @param display : Target of the tween
                * @param ref : The name of the fade transition to applied
                * @return the actuator
            </haxe_doc>
        </wiggle>
        <zoom public="1" set="method" line="195" static="1">
            <f a="display:ref">
                <t path="nme.display.DisplayObject"/>
                <c path="String"/>
                <c path="motion.actuators.IGenericActuator"/>
            </f>
            <haxe_doc>* Get a zoom effect for the object
                * @param display : Target of the tween
                * @param ref : The name of the fade transition to applied
                * @return the actuator
            </haxe_doc>
        </zoom>
        <slide public="1" set="method" line="221" static="1">
            <f a="display:ref">
                <t path="nme.display.DisplayObject"/>
                <c path="String"/>
                <c path="motion.actuators.IGenericActuator"/>
            </f>
            <haxe_doc>* Translate the object
                * @param display : Target of the tween
                * @param ref : The name of the fade transition to applied
                * @return the actuator
            </haxe_doc>
        </slide>
        <transform public="1" set="method" line="232" static="1">
            <f a="display:ref">
                <t path="nme.display.DisplayObject"/>
                <c path="String"/>
                <c path="motion.actuators.IGenericActuator"/>
            </f>
        </transform>
        <resetTransform public="1" set="method" line="239" static="1">
            <f a="display">
                <t path="nme.display.DisplayObject"/>
                <x path="Void"/>
            </f>
        </resetTransform>
        <blink public="1" set="method" line="244" static="1">
            <f a="display:ref">
                <t path="nme.display.DisplayObject"/>
                <c path="String"/>
                <c path="motion.actuators.IGenericActuator"/>
            </f>
        </blink>
        <stop public="1" set="method" line="251" static="1">
            <f a="target:?properties:?complete:?sendEvent">
                <d/>
                <d/>
                <x path="Bool"/>
                <x path="Bool"/>
                <x path="Void"/>
            </f>
        </stop>
        <loadTemplate public="1" set="method" line="261" static="1">
            <f a="file">
                <c path="String"/>
                <x path="Void"/>
            </f>
            <haxe_doc>* Load an XML file with transitions templates
                * @param file : Path to the file
            </haxe_doc>
        </loadTemplate>
        <getEasing set="method" line="301" static="1">
            <f a="transition">
                <d/>
                <c path="motion.easing.IEasing"/>
            </f>
        </getEasing>
        <parseValue set="method" line="315" static="1">
            <f a="parameter:value:display">
                <c path="String"/>
                <c path="String"/>
                <t path="nme.display.DisplayObject"/>
                <c path="Array">
                    <x path="Float"/>
                </c>
            </f>
        </parseValue>
        <haxe_doc>* Manage the most frequently used tweens</haxe_doc>
    </class>
    <class path="com.knowledgeplayers.grar.display.activity.ActivityDisplay" params=""
           file="/Users/jbrichardet/IdeaProjects/grar/com/knowledgeplayers/grar/display/activity/ActivityDisplay.hx">
        <extends path="com.knowledgeplayers.grar.display.KpDisplay"/>
        <onValidate set="method" line="144">
            <f a="e">
                <c path="com.knowledgeplayers.grar.event.ButtonActionEvent"/>
                <x path="Void"/>
            </f>
        </onValidate>
        <onUnload set="method" line="139">
            <f a="ev">
                <t path="nme.events.Event"/>
                <x path="Void"/>
            </f>
        </onUnload>
        <setButtonAction set="method" line="130" override="1">
            <f a="button:action">
                <c path="com.knowledgeplayers.grar.display.component.button.DefaultButton"/>
                <c path="String"/>
                <x path="Void"/>
            </f>
        </setButtonAction>
        <unLoad set="method" line="119">
            <f a="?keepLayer">
                <x path="Int"/>
                <x path="Void"/>
            </f>
        </unLoad>
        <displayActivity set="method" line="95">
            <f a="">
                <x path="Void"/>
            </f>
        </displayActivity>
        <parseContent public="1" set="method" line="83" override="1">
            <f a="content">
                <c path="Xml"/>
                <x path="Void"/>
            </f>
        </parseContent>
        <showDebrief public="1" set="method" line="78">
            <f a="">
                <x path="Void"/>
            </f>
            <haxe_doc>* Show the debrief of this activity</haxe_doc>
        </showDebrief>
        <endActivity public="1" set="method" line="68">
            <f a="">
                <x path="Void"/>
            </f>
            <haxe_doc>* End the activity</haxe_doc>
        </endActivity>
        <startActivity public="1" set="method" line="49">
            <f a="">
                <x path="Void"/>
            </f>
            <haxe_doc>* Start the activity</haxe_doc>
        </startActivity>
        <set_model public="1" set="method" line="38">
            <f a="model">
                <c path="com.knowledgeplayers.grar.structure.activity.Activity"/>
                <c path="com.knowledgeplayers.grar.structure.activity.Activity"/>
            </f>
            <haxe_doc>* Setter for the model
                * @param model : the model to set
                * @return the model
            </haxe_doc>
        </set_model>
        <transitionOut public="1">
            <c path="String"/>
            <haxe_doc>* Transition when the activity disappears</haxe_doc>
        </transitionOut>
        <transitionIn public="1">
            <c path="String"/>
            <haxe_doc>* Transition when the activity appears</haxe_doc>
        </transitionIn>
        <model public="1" set="accessor">
            <c path="com.knowledgeplayers.grar.structure.activity.Activity"/>
            <haxe_doc>* Model to display</haxe_doc>
        </model>
        <new set="method" line="125">
            <f a="">
                <x path="Void"/>
            </f>
        </new>
        <haxe_doc>* Abstract display for an activity</haxe_doc>
    </class>
    <class path="com.knowledgeplayers.grar.display.activity.ActivityManager" params=""
           file="/Users/jbrichardet/IdeaProjects/grar/com/knowledgeplayers/grar/display/activity/ActivityManager.hx">
        <instance public="1" get="accessor" set="null" static="1">
            <c path="com.knowledgeplayers.grar.display.activity.ActivityManager"/>
            <haxe_doc>* Instance</haxe_doc>
        </instance>
        <get_instance public="1" set="method" line="27" static="1">
            <f a="">
                <c path="com.knowledgeplayers.grar.display.activity.ActivityManager"/>
            </f>
            <haxe_doc>* @return the instance</haxe_doc>
        </get_instance>
        <getActivity public="1" set="method" line="41">
            <f a="name">
                <c path="String"/>
                <t path="Null">
                    <c path="com.knowledgeplayers.grar.display.activity.ActivityDisplay"/>
                </t>
            </f>
            <haxe_doc>* Return the requested activity display
                * @param name : Name of the activity
                * @return the display for this activity
            </haxe_doc>
        </getActivity>
        <activities public="1" set="null">
            <x path="Map">
                <c path="String"/>
                <c path="com.knowledgeplayers.grar.display.activity.ActivityDisplay"/>
            </x>
            <haxe_doc>* Hash of all the activities displays</haxe_doc>
        </activities>
        <new set="method" line="61">
            <f a="">
                <x path="Void"/>
            </f>
        </new>
        <haxe_doc>* Manager of the activity, store all the activity display for a game</haxe_doc>
    </class>
    <class path="com.knowledgeplayers.grar.display.activity.cards.CardsDisplay" params=""
           file="/Users/jbrichardet/IdeaProjects/grar/com/knowledgeplayers/grar/display/activity/cards/CardsDisplay.hx">
        <extends path="com.knowledgeplayers.grar.display.activity.ActivityDisplay"/>
        <instance public="1" get="accessor" set="null" static="1">
            <c path="com.knowledgeplayers.grar.display.activity.cards.CardsDisplay"/>
            <haxe_doc>* Instance</haxe_doc>
        </instance>
        <get_instance public="1" set="method" line="58" static="1">
            <f a="">
                <c path="com.knowledgeplayers.grar.display.activity.cards.CardsDisplay"/>
            </f>
            <haxe_doc>* @return the instance</haxe_doc>
        </get_instance>
        <unLoad set="method" line="224" override="1">
            <f a="?keepLayer">
                <x path="Int"/>
                <x path="Void"/>
            </f>
        </unLoad>
        <onEnterFrameClip set="method" line="215">
            <f a="e">
                <t path="nme.events.Event"/>
                <x path="Void"/>
            </f>
        </onEnterFrameClip>
        <showPopUp set="method" line="178">
            <f a="pText">
                <c path="String"/>
                <x path="Void"/>
            </f>
        </showPopUp>
        <launchCard set="method" line="156">
            <f a="">
                <x path="Void"/>
            </f>
        </launchCard>
        <closePopUp set="method" line="143">
            <f a="">
                <x path="Void"/>
            </f>
        </closePopUp>
        <onClosePopUp set="method" line="136">
            <f a="ev">
                <t path="nme.events.MouseEvent"/>
                <x path="Void"/>
            </f>
        </onClosePopUp>
        <createElement set="method" line="102" override="1">
            <f a="elemNode">
                <c path="haxe.xml.Fast"/>
                <x path="Void"/>
            </f>
        </createElement>
        <set_model public="1" set="method" line="88" override="1">
            <f a="model">
                <c path="com.knowledgeplayers.grar.structure.activity.Activity"/>
                <c path="com.knowledgeplayers.grar.structure.activity.Activity"/>
            </f>
        </set_model>
        <displayActivity set="method" line="83" override="1">
            <f a="">
                <x path="Void"/>
            </f>
        </displayActivity>
        <clickCard public="1" set="method" line="69">
            <f a="pCard:pText">
                <c path="com.knowledgeplayers.grar.display.activity.cards.CardsElementDisplay"/>
                <c path="String"/>
                <x path="Void"/>
            </f>
            <haxe_doc>*</haxe_doc>
        </clickCard>
        <elementsArray>
            <c path="Array">
                <c path="com.knowledgeplayers.grar.display.activity.cards.CardsElementDisplay"/>
            </c>
        </elementsArray>
        <elementBackground>
            <c path="String"/>
        </elementBackground>
        <stylesheet>
            <c path="String"/>
        </stylesheet>
        <content>
            <c path="haxe.xml.Fast"/>
        </content>
        <background>
            <t path="nme.display.Bitmap"/>
        </background>
        <elementsContainer>
            <t path="nme.display.Sprite"/>
        </elementsContainer>
        <nextText>
            <c path="String"/>
        </nextText>
        <nextCard>
            <c path="com.knowledgeplayers.grar.display.activity.cards.CardsElementDisplay"/>
        </nextCard>
        <cardInProgress>
            <c path="com.knowledgeplayers.grar.display.activity.cards.CardsElementDisplay"/>
        </cardInProgress>
        <flipDirection>
            <x path="Int"/>
        </flipDirection>
        <flipClip>
            <c path="aze.display.TileClip"/>
        </flipClip>
        <flipLayer>
            <c path="aze.display.TileLayer"/>
        </flipLayer>
        <grids public="1" set="null">
            <x path="Map">
                <c path="String"/>
                <c path="com.knowledgeplayers.grar.util.Grid"/>
            </x>
            <haxe_doc>* Grid to dispatch cards</haxe_doc>
        </grids>
        <popUp public="1">
            <t path="nme.display.Sprite"/>
            <haxe_doc>* PopUp where additional text will be displayed</haxe_doc>
        </popUp>
        <new set="method" line="232">
            <f a="">
                <x path="Void"/>
            </f>
        </new>
        <haxe_doc>* Display of the model activity</haxe_doc>
    </class>
    <class path="com.knowledgeplayers.grar.display.activity.cards.CardsElementDisplay" params=""
           file="/Users/jbrichardet/IdeaProjects/grar/com/knowledgeplayers/grar/display/activity/cards/CardsElementDisplay.hx">
        <extends path="flash.display.Sprite"/>
        <onClick set="method" line="50">
            <f a="e">
                <t path="nme.events.MouseEvent"/>
                <x path="Void"/>
            </f>
        </onClick>
        <blockElement public="1" set="method" line="44">
            <f a="">
                <x path="Void"/>
            </f>
        </blockElement>
        <content public="1" set="null">
            <c path="String"/>
            <haxe_doc>* Content ID</haxe_doc>
        </content>
        <text public="1" set="null">
            <c path="com.knowledgeplayers.grar.display.component.container.ScrollPanel"/>
            <haxe_doc>* Text of the element</haxe_doc>
        </text>
        <new public="1" set="method" line="29">
            <f a="content:width:height:background">
                <c path="String"/>
                <x path="Float"/>
                <x path="Float"/>
                <c path="String"/>
                <x path="Void"/>
            </f>
            <haxe_doc>* Constructor
                * @param content : Text of the element
                * @param width : Width of the element
                * @param height : Height of the element
            </haxe_doc>
        </new>
        <haxe_doc>* Display of an element in a folder activity</haxe_doc>
    </class>
    <class path="com.knowledgeplayers.grar.display.activity.folder.FolderDisplay" params=""
           file="/Users/jbrichardet/IdeaProjects/grar/com/knowledgeplayers/grar/display/activity/folder/FolderDisplay.hx">
        <extends path="com.knowledgeplayers.grar.display.activity.ActivityDisplay"/>
        <instance public="1" get="accessor" set="null" static="1">
            <c path="com.knowledgeplayers.grar.display.activity.folder.FolderDisplay"/>
            <haxe_doc>* Instance</haxe_doc>
        </instance>
        <get_instance public="1" set="method" line="71" static="1">
            <f a="">
                <c path="com.knowledgeplayers.grar.display.activity.folder.FolderDisplay"/>
            </f>
        </get_instance>
        <onClosePopUp set="method" line="228">
            <f a="ev">
                <t path="nme.events.MouseEvent"/>
                <x path="Void"/>
            </f>
        </onClosePopUp>
        <onValidate set="method" line="221" override="1">
            <f a="e">
                <c path="com.knowledgeplayers.grar.event.ButtonActionEvent"/>
                <x path="Void"/>
            </f>
        </onValidate>
        <unLoad set="method" line="210" override="1">
            <f a="?keepLayer">
                <x path="Int"/>
                <x path="Void"/>
            </f>
        </unLoad>
        <createElement set="method" line="102" override="1">
            <f a="elemNode">
                <c path="haxe.xml.Fast"/>
                <x path="Void"/>
            </f>
        </createElement>
        <set_model public="1" set="method" line="90" override="1">
            <f a="model">
                <c path="com.knowledgeplayers.grar.structure.activity.Activity"/>
                <c path="com.knowledgeplayers.grar.structure.activity.Activity"/>
            </f>
        </set_model>
        <displayActivity set="method" line="80" override="1">
            <f a="">
                <x path="Void"/>
            </f>
        </displayActivity>
        <background>
            <t path="nme.display.Bitmap"/>
        </background>
        <elementsArray>
            <c path="Array">
                <c path="com.knowledgeplayers.grar.display.activity.folder.FolderElementDisplay"/>
            </c>
        </elementsArray>
        <elementTemplate>
            <a>
                <width>
                    <x path="Float"/>
                </width>
                <height>
                    <x path="Float"/>
                </height>
                <filters>
                    <c path="String"/>
                </filters>
                <buttonPos>
                    <t path="nme.geom.Point"/>
                </buttonPos>
                <buttonIcon>
                    <t path="nme.display.BitmapData"/>
                </buttonIcon>
                <background>
                    <t path="nme.display.BitmapData"/>
                </background>
            </a>
        </elementTemplate>
        <targetSpritesheet public="1">
            <x path="Bool"/>
            <haxe_doc>* Tell whether or not the targets use spritesheets</haxe_doc>
        </targetSpritesheet>
        <grids public="1" set="null">
            <x path="Map">
                <c path="String"/>
                <c path="com.knowledgeplayers.grar.util.Grid"/>
            </x>
            <haxe_doc><![CDATA[* Grid to organize drag & drop display]]></haxe_doc>
        </grids>
        <popUp public="1">
            <a>
                <titlePos>
                    <t path="nme.geom.Point"/>
                </titlePos>
                <sprite>
                    <t path="nme.display.Sprite"/>
                </sprite>
                <contentPos>
                    <t path="nme.geom.Point"/>
                </contentPos>
            </a>
            <haxe_doc>* PopUp where additional text will be displayed</haxe_doc>
        </popUp>
        <targets public="1">
            <c path="Array">
                <a>
                    <obj>
                        <t path="nme.display.DisplayObject"/>
                    </obj>
                    <name>
                        <c path="String"/>
                    </name>
                    <elem>
                        <c path="com.knowledgeplayers.grar.display.activity.folder.FolderElementDisplay"/>
                    </elem>
                </a>
            </c>
            <haxe_doc>* DisplayObject where to drag the elements</haxe_doc>
        </targets>
        <new set="method" line="63">
            <f a="">
                <x path="Void"/>
            </f>
            <haxe_doc>* @return the instance</haxe_doc>
        </new>
        <haxe_doc>* Display of the folder activity</haxe_doc>
    </class>
    <class path="com.knowledgeplayers.grar.display.activity.folder.FolderElementDisplay" params=""
           file="/Users/jbrichardet/IdeaProjects/grar/com/knowledgeplayers/grar/display/activity/folder/FolderElementDisplay.hx">
        <extends path="flash.display.Sprite"/>
        <createSprite set="method" line="196">
            <f a="text:width">
                <c path="String"/>
                <x path="Float"/>
                <t path="nme.display.Sprite"/>
            </f>
        </createSprite>
        <onPlusClick set="method" line="174">
            <f a="ev">
                <t path="nme.events.MouseEvent"/>
                <x path="Void"/>
            </f>
        </onPlusClick>
        <onUp set="method" line="128">
            <f a="e">
                <t path="nme.events.MouseEvent"/>
                <x path="Void"/>
            </f>
        </onUp>
        <onDown set="method" line="119">
            <f a="e">
                <t path="nme.events.MouseEvent"/>
                <x path="Void"/>
            </f>
        </onDown>
        <onAdd set="method" line="114">
            <f a="ev">
                <t path="nme.events.Event"/>
                <x path="Void"/>
            </f>
        </onAdd>
        <reset public="1" set="method" line="101">
            <f a="">
                <x path="Void"/>
            </f>
        </reset>
        <blockElement public="1" set="method" line="94">
            <f a="">
                <x path="Void"/>
            </f>
        </blockElement>
        <stylesheet>
            <c path="String"/>
        </stylesheet>
        <originHeight>
            <x path="Float"/>
        </originHeight>
        <originWidth>
            <x path="Float"/>
        </originWidth>
        <shadows>
            <x path="Map">
                <c path="String"/>
                <t path="nme.filters.BitmapFilter"/>
            </x>
        </shadows>
        <origin public="1">
            <t path="nme.geom.Point"/>
            <haxe_doc>* Origin before the drag</haxe_doc>
        </origin>
        <model public="1" set="null">
            <c path="com.knowledgeplayers.grar.structure.activity.folder.FolderElement"/>
            <haxe_doc>* Model</haxe_doc>
        </model>
        <text public="1" set="null">
            <c path="com.knowledgeplayers.grar.display.component.container.ScrollPanel"/>
            <haxe_doc>* Text of the element</haxe_doc>
        </text>
        <new public="1" set="method" line="50">
            <f a="model:width:height:filters:background:?buttonIcon:?buttonPos:?stylesheet">
                <c path="com.knowledgeplayers.grar.structure.activity.folder.FolderElement"/>
                <x path="Float"/>
                <x path="Float"/>
                <c path="String"/>
                <t path="nme.display.BitmapData"/>
                <t path="nme.display.BitmapData"/>
                <t path="nme.geom.Point"/>
                <c path="String"/>
                <x path="Void"/>
            </f>
            <haxe_doc>* Constructor
                * @param content : Text of the element
                * @param width : Width of the element
                * @param height : Height of the element
            </haxe_doc>
        </new>
        <haxe_doc>* Display of an element in a folder activity</haxe_doc>
    </class>
    <class path="com.knowledgeplayers.grar.display.activity.quiz.QuizDisplay" params=""
           file="/Users/jbrichardet/IdeaProjects/grar/com/knowledgeplayers/grar/display/activity/quiz/QuizDisplay.hx">
        <extends path="com.knowledgeplayers.grar.display.activity.ActivityDisplay"/>
        <instance public="1" get="accessor" set="null" static="1">
            <c path="com.knowledgeplayers.grar.display.activity.quiz.QuizDisplay"/>
            <haxe_doc>* Instance</haxe_doc>
        </instance>
        <get_instance public="1" set="method" line="54" static="1">
            <f a="">
                <c path="com.knowledgeplayers.grar.display.activity.quiz.QuizDisplay"/>
            </f>
            <haxe_doc>* @return the instance</haxe_doc>
        </get_instance>
        <setState set="method" line="157">
            <f a="state">
                <e path="com.knowledgeplayers.grar.structure.activity.quiz.QuizzState"/>
                <x path="Void"/>
            </f>
        </setState>
        <updateRound set="method" line="149">
            <f a="">
                <x path="Void"/>
            </f>
        </updateRound>
        <onValidate set="method" line="126" override="1">
            <f a="e">
                <c path="com.knowledgeplayers.grar.event.ButtonActionEvent"/>
                <x path="Void"/>
            </f>
        </onValidate>
        <updateButtonText set="method" line="113">
            <f a="">
                <x path="Void"/>
            </f>
        </updateButtonText>
        <createGroup set="method" line="106">
            <f a="groupNode">
                <c path="haxe.xml.Fast"/>
                <x path="Void"/>
            </f>
        </createGroup>
        <createElement set="method" line="98" override="1">
            <f a="elemNode">
                <c path="haxe.xml.Fast"/>
                <x path="Void"/>
            </f>
        </createElement>
        <displayRound set="method" line="80">
            <f a="">
                <x path="Void"/>
            </f>
        </displayRound>
        <startActivity public="1" set="method" line="68" override="1">
            <f a="">
                <x path="Void"/>
            </f>
        </startActivity>
        <set_model public="1" set="method" line="62" override="1">
            <f a="model">
                <c path="com.knowledgeplayers.grar.structure.activity.Activity"/>
                <c path="com.knowledgeplayers.grar.structure.activity.Activity"/>
            </f>
        </set_model>
        <resizeD>
            <c path="com.knowledgeplayers.grar.display.ResizeManager"/>
        </resizeD>
        <quiz>
            <c path="com.knowledgeplayers.grar.structure.activity.quiz.Quiz"/>
        </quiz>
        <locked public="1">
            <x path="Bool"/>
            <haxe_doc>* Lock state of the quiz. If true, the answers can't be changed</haxe_doc>
        </locked>
        <backgrounds public="1" set="null">
            <x path="Map">
                <c path="String"/>
                <t path="nme.display.DisplayObject"/>
            </x>
            <haxe_doc>* Backgrounds for the quiz</haxe_doc>
        </backgrounds>
        <quizGroups public="1" set="null">
            <x path="Map">
                <c path="String"/>
                <c path="com.knowledgeplayers.grar.display.activity.quiz.QuizGroupDisplay"/>
            </x>
            <haxe_doc>* Template for groups of answers</haxe_doc>
        </quizGroups>
        <items public="1" set="null">
            <x path="Map">
                <c path="String"/>
                <t path="nme.display.BitmapData"/>
            </x>
            <haxe_doc>* Graphical item for the quiz (checkboxes, checks, ...)</haxe_doc>
        </items>
        <new set="method" line="88">
            <f a="">
                <x path="Void"/>
            </f>
        </new>
        <haxe_doc>* Display for quiz activity. Since all quiz in a game must look alike,
            * this is a singleton.
            * @author jbrichardet
        </haxe_doc>
    </class>
    <class path="com.knowledgeplayers.grar.display.activity.quiz.QuizGroupDisplay" params=""
           file="/Users/jbrichardet/IdeaProjects/grar/com/knowledgeplayers/grar/display/activity/quiz/QuizGroupDisplay.hx">
        <extends path="flash.display.Sprite"/>
        <unloadItems set="method" line="124">
            <f a="">
                <x path="Void"/>
            </f>
        </unloadItems>
        <updateItems set="method" line="103">
            <f a="">
                <x path="Void"/>
            </f>
        </updateItems>
        <correct public="1" set="method" line="94">
            <f a="">
                <x path="Void"/>
            </f>
            <haxe_doc>* Point out the good answers</haxe_doc>
        </correct>
        <validate public="1" set="method" line="83">
            <f a="">
                <x path="Void"/>
            </f>
            <haxe_doc>* Validate the answers</haxe_doc>
        </validate>
        <set_model public="1" set="method" line="70">
            <f a="model">
                <c path="com.knowledgeplayers.grar.structure.activity.quiz.QuizGroup"/>
                <c path="com.knowledgeplayers.grar.structure.activity.quiz.QuizGroup"/>
            </f>
            <haxe_doc>* Setter of the model
                * @param model : Model to set
                * @return the model
            </haxe_doc>
        </set_model>
        <separator>
            <t path="nme.display.BitmapData"/>
        </separator>
        <itemTemplates>
            <x path="Map">
                <c path="String"/>
                <c path="haxe.xml.Fast"/>
            </x>
        </itemTemplates>
        <yOffset>
            <x path="Float"/>
        </yOffset>
        <xOffset>
            <x path="Float"/>
        </xOffset>
        <items>
            <c path="Array">
                <c path="com.knowledgeplayers.grar.display.activity.quiz.QuizItemDisplay"/>
            </c>
        </items>
        <model public="1" set="accessor">
            <c path="com.knowledgeplayers.grar.structure.activity.quiz.QuizGroup"/>
            <haxe_doc>* Model to display</haxe_doc>
        </model>
        <new public="1" set="method" line="32">
            <f a="?xOffset:?yOffset:?width:?height:?separator:?xml">
                <x path="Float"/>
                <x path="Float"/>
                <x path="Float"/>
                <x path="Float"/>
                <t path="nme.display.BitmapData"/>
                <c path="haxe.xml.Fast"/>
                <x path="Void"/>
            </f>
            <haxe_doc>* Constructor
                * @param group : Model to display
            </haxe_doc>
        </new>
        <haxe_doc>* Display for a group of answer in a quiz</haxe_doc>
    </class>
    <class path="com.knowledgeplayers.grar.display.activity.quiz.QuizItemDisplay" params=""
           file="/Users/jbrichardet/IdeaProjects/grar/com/knowledgeplayers/grar/display/activity/quiz/QuizItemDisplay.hx">
        <extends path="flash.display.Sprite"/>
        <onClick set="method" line="131">
            <f a="event">
                <t path="nme.events.MouseEvent"/>
                <x path="Void"/>
            </f>
        </onClick>
        <setIcon public="1" set="method" line="116">
            <f a="id:?spritesheet">
                <c path="String"/>
                <c path="String"/>
                <x path="Void"/>
            </f>
            <haxe_doc>* Set the icon for the item
                * @param id : Id of the tile used for the icon
            </haxe_doc>
        </setIcon>
        <displayCorrection public="1" set="method" line="105">
            <f a="">
                <x path="Void"/>
            </f>
            <haxe_doc>* Display the correction icon if the item is a right answer</haxe_doc>
        </displayCorrection>
        <validate public="1" set="method" line="91">
            <f a="">
                <x path="Void"/>
            </f>
            <haxe_doc>* Change the icon to iconCheckRight if the answer is correct</haxe_doc>
        </validate>
        <spritesheetRef>
            <c path="String"/>
        </spritesheetRef>
        <checkIconRef>
            <c path="String"/>
        </checkIconRef>
        <model>
            <c path="com.knowledgeplayers.grar.structure.activity.quiz.QuizItem"/>
        </model>
        <text public="1" set="null">
            <c path="com.knowledgeplayers.grar.display.component.container.ScrollPanel"/>
            <haxe_doc>* Text of the answer</haxe_doc>
        </text>
        <correction public="1" set="null">
            <t path="nme.display.Bitmap"/>
            <haxe_doc>* Icon to show good answers</haxe_doc>
        </correction>
        <checkIcon public="1" set="null">
            <t path="nme.display.Bitmap"/>
            <haxe_doc>* Icon for the item</haxe_doc>
        </checkIcon>
        <new public="1" set="method" line="45">
            <f a="item:?xmlTemplate:?width:?height:?style">
                <c path="com.knowledgeplayers.grar.structure.activity.quiz.QuizItem"/>
                <c path="haxe.xml.Fast"/>
                <x path="Float"/>
                <x path="Float"/>
                <c path="String"/>
                <x path="Void"/>
            </f>
            <haxe_doc>* Construcor
                * @param item : Model to display
            </haxe_doc>
        </new>
        <haxe_doc>* Display for quiz propositions
            * @author jbrichardet
        </haxe_doc>
    </class>
    <class path="com.knowledgeplayers.grar.display.activity.scanner.PointDisplay" params=""
           file="/Users/jbrichardet/IdeaProjects/grar/com/knowledgeplayers/grar/display/activity/scanner/PointDisplay.hx">
        <extends path="flash.display.Sprite"/>
        <onOut set="method" line="63">
            <f a="e">
                <t path="nme.events.MouseEvent"/>
                <x path="Void"/>
            </f>
        </onOut>
        <onOver set="method" line="55">
            <f a="e">
                <t path="nme.events.MouseEvent"/>
                <x path="Void"/>
            </f>
        </onOver>
        <setGraphic set="method" line="39">
            <f a="state">
                <c path="String"/>
                <x path="Void"/>
            </f>
        </setGraphic>
        <point>
            <c path="com.knowledgeplayers.grar.structure.activity.scanner.ScannerPoint"/>
        </point>
        <bitmap>
            <t path="nme.display.Bitmap"/>
        </bitmap>
        <style>
            <c path="com.knowledgeplayers.grar.display.activity.scanner.PointStyle"/>
        </style>
        <new public="1" set="method" line="24">
            <f a="style:point">
                <c path="com.knowledgeplayers.grar.display.activity.scanner.PointStyle"/>
                <c path="com.knowledgeplayers.grar.structure.activity.scanner.ScannerPoint"/>
                <x path="Void"/>
            </f>
            <haxe_doc>* Constructor
                * @param graphic : Set of the graphics for the different states of the point
                * @param radius : Radius of the point in pixel
                * @param point : Model of the display
            </haxe_doc>
        </new>
    </class>
    <class path="com.knowledgeplayers.grar.display.activity.scanner.PointStyle" params=""
           file="/Users/jbrichardet/IdeaProjects/grar/com/knowledgeplayers/grar/display/activity/scanner/PointDisplay.hx"
           module="com.knowledgeplayers.grar.display.activity.scanner.PointDisplay">
        <addGraphic public="1" set="method" line="85">
            <f a="key:graph">
                <c path="String"/>
                <c path="String"/>
                <x path="Void"/>
            </f>
        </addGraphic>
        <graphics public="1">
            <x path="Map">
                <c path="String"/>
                <c path="String"/>
            </x>
            <haxe_doc>* Graphics for the different states of the point</haxe_doc>
        </graphics>
        <radius public="1">
            <x path="Float"/>
            <haxe_doc>* Radius of the point. If 0, the size of the image will be unchanged</haxe_doc>
        </radius>
        <new public="1" set="method" line="80">
            <f a="">
                <x path="Void"/>
            </f>
        </new>
    </class>
    <class path="com.knowledgeplayers.grar.display.activity.scanner.ScannerDisplay" params=""
           file="/Users/jbrichardet/IdeaProjects/grar/com/knowledgeplayers/grar/display/activity/scanner/ScannerDisplay.hx">
        <extends path="com.knowledgeplayers.grar.display.activity.ActivityDisplay"/>
        <instance public="1" get="accessor" set="null" static="1">
            <c path="com.knowledgeplayers.grar.display.activity.scanner.ScannerDisplay"/>
            <haxe_doc>* Instance</haxe_doc>
        </instance>
        <get_instance public="1" set="method" line="24" static="1">
            <f a="">
                <c path="com.knowledgeplayers.grar.display.activity.scanner.ScannerDisplay"/>
            </f>
            <haxe_doc>* @return the instance</haxe_doc>
        </get_instance>
        <createElement set="method" line="51" override="1">
            <f a="elemNode">
                <c path="haxe.xml.Fast"/>
                <x path="Void"/>
            </f>
        </createElement>
        <set_model public="1" set="method" line="39" override="1">
            <f a="model">
                <c path="com.knowledgeplayers.grar.structure.activity.Activity"/>
                <c path="com.knowledgeplayers.grar.structure.activity.Activity"/>
            </f>
        </set_model>
        <setText public="1" set="method" line="31">
            <f a="textId:content">
                <c path="String"/>
                <c path="String"/>
                <x path="Void"/>
            </f>
        </setText>
        <lineHeight>
            <x path="Float"/>
        </lineHeight>
        <pointStyles>
            <x path="Map">
                <c path="String"/>
                <c path="com.knowledgeplayers.grar.display.activity.scanner.PointStyle"/>
            </x>
        </pointStyles>
        <new set="method" line="64">
            <f a="">
                <x path="Void"/>
            </f>
        </new>
    </class>
    <class path="com.knowledgeplayers.grar.display.component.ProgressBar" params=""
           file="/Users/jbrichardet/IdeaProjects/grar/com/knowledgeplayers/grar/display/component/ProgressBar.hx">
        <extends path="flash.display.Sprite"/>
        <unfillBar set="method" line="141">
            <f a="end">
                <x path="Float"/>
                <x path="Void"/>
            </f>
        </unfillBar>
        <fillBar set="method" line="133">
            <f a="end">
                <x path="Float"/>
                <x path="Void"/>
            </f>
        </fillBar>
        <onEnterPart set="method" line="81">
            <f a="e">
                <c path="com.knowledgeplayers.grar.event.PartEvent"/>
                <x path="Void"/>
            </f>
        </onEnterPart>
        <addIcons set="method" line="57">
            <f a="prefix">
                <c path="String"/>
                <x path="Void"/>
            </f>
        </addIcons>
        <init public="1" set="method" line="39">
            <f a="_node">
                <c path="haxe.xml.Fast"/>
                <x path="Void"/>
            </f>
        </init>
        <allItems>
            <c path="Array">
                <c path="com.knowledgeplayers.grar.tracking.Trackable"/>
            </c>
        </allItems>
        <xProgress>
            <x path="Float"/>
        </xProgress>
        <iconScale>
            <x path="Float"/>
        </iconScale>
        <barHeight>
            <x path="Float"/>
        </barHeight>
        <barWidth>
            <x path="Float"/>
        </barWidth>
        <icons>
            <x path="Map">
                <c path="String"/>
                <c path="aze.display.TileClip"/>
            </x>
        </icons>
        <layerProgressBar>
            <c path="aze.display.TileLayer"/>
        </layerProgressBar>
        <progressColor>
            <x path="Int"/>
        </progressColor>
        <backgroundColor>
            <x path="Int"/>
        </backgroundColor>
        <new public="1" set="method" line="24">
            <f a="">
                <x path="Void"/>
            </f>
        </new>
    </class>
    <class path="com.knowledgeplayers.grar.display.component.ScrollBar" params=""
           file="/Users/jbrichardet/IdeaProjects/grar/com/knowledgeplayers/grar/display/component/ScrollBar.hx">
        <extends path="flash.display.Sprite"/>
        <createBar set="method" line="120">
            <f a="layer:graphics:width:height">
                <c path="aze.display.TileLayer"/>
                <c path="aze.display.TileGroup"/>
                <x path="Float"/>
                <x path="Float"/>
                <x path="Void"/>
            </f>
        </createBar>
        <cursorStop set="method" line="113">
            <f a="e">
                <t path="nme.events.MouseEvent"/>
                <x path="Void"/>
            </f>
        </cursorStop>
        <cursorStart set="method" line="106">
            <f a="e">
                <t path="nme.events.MouseEvent"/>
                <x path="Void"/>
            </f>
        </cursorStart>
        <onScroll set="method" line="100">
            <f a="e">
                <t path="nme.events.MouseEvent"/>
                <x path="Void"/>
            </f>
        </onScroll>
        <scrolled public="1" set="dynamic" line="95">
            <f a="destination">
                <x path="Float"/>
                <x path="Void"/>
            </f>
            <haxe_doc>* Abstract function to scroll the text
                * @param destination : where to scroll
            </haxe_doc>
        </scrolled>
        <moveCursor public="1" set="method" line="76">
            <f a="delta">
                <x path="Float"/>
                <x path="Void"/>
            </f>
            <haxe_doc>* Move the cursor. Can't go out of bound
                * @param delta : distance to move the cursor
            </haxe_doc>
        </moveCursor>
        <maxHeight>
            <x path="Float"/>
        </maxHeight>
        <layer>
            <c path="aze.display.TileLayer"/>
        </layer>
        <ratio>
            <x path="Float"/>
        </ratio>
        <page>
            <x path="Float"/>
        </page>
        <cursorHeight>
            <x path="Float"/>
        </cursorHeight>
        <cursorSprite>
            <t path="nme.display.Sprite"/>
        </cursorSprite>
        <cursor>
            <c path="aze.display.TileLayer"/>
        </cursor>
        <new public="1" set="method" line="35">
            <f a="width:height:ratio:tilesheet:tileBackground:tileCursor">
                <x path="Float"/>
                <x path="Float"/>
                <x path="Float"/>
                <c path="aze.display.TilesheetEx"/>
                <c path="String"/>
                <c path="String"/>
                <x path="Void"/>
            </f>
            <haxe_doc>* Constructor
                * @param width : Width of the scrollbar
                * @param height : Height of the scrollbar
                * @param ratio : Ratio of the cursor
                * @param tileBackground : Tile containing background image
                * @param tileCursor : Tile containing cursor image
                *
                * @see UiFactory
            </haxe_doc>
        </new>
        <haxe_doc>* Scrollbar for text overflow</haxe_doc>
    </class>
    <class path="com.knowledgeplayers.grar.display.component.button.DefaultButton" params=""
           file="/Users/jbrichardet/IdeaProjects/grar/com/knowledgeplayers/grar/display/component/button/DefaultButton.hx">
        <extends path="flash.display.Sprite"/>
        <onMouseEvent set="method" line="335">
            <f a="event">
                <t path="nme.events.MouseEvent"/>
                <x path="Void"/>
            </f>
        </onMouseEvent>
        <removeAllEventsListeners set="method" line="321">
            <f a="listener">
                <f a="">
                    <t path="nme.events.MouseEvent"/>
                    <x path="Void"/>
                </f>
                <x path="Void"/>
            </f>
        </removeAllEventsListeners>
        <sortDisplayObjects set="method" line="311">
            <f a="x:y">
                <a>
                    <z>
                        <x path="Int"/>
                    </z>
                    <trans>
                        <c path="String"/>
                    </trans>
                    <dpo>
                        <t path="nme.display.DisplayObject"/>
                    </dpo>
                </a>
                <a>
                    <z>
                        <x path="Int"/>
                    </z>
                    <trans>
                        <c path="String"/>
                    </trans>
                    <dpo>
                        <t path="nme.display.DisplayObject"/>
                    </dpo>
                </a>
                <x path="Int"/>
            </f>
        </sortDisplayObjects>
        <setText public="1" set="method" line="296">
            <f a="pContent:?pKey">
                <c path="String"/>
                <c path="String"/>
                <x path="Void"/>
            </f>
        </setText>
        <renderState set="method" line="236">
            <f a="state">
                <c path="String"/>
                <x path="Void"/>
            </f>
        </renderState>
        <init set="method" line="220">
            <f a="">
                <x path="Void"/>
            </f>
        </init>
        <onClickUp set="method" line="215">
            <f a="event">
                <t path="nme.events.MouseEvent"/>
                <x path="Void"/>
            </f>
        </onClickUp>
        <onClickDown set="method" line="210">
            <f a="event">
                <t path="nme.events.MouseEvent"/>
                <x path="Void"/>
            </f>
        </onClickDown>
        <onOut set="method" line="205">
            <f a="event">
                <t path="nme.events.MouseEvent"/>
                <x path="Void"/>
            </f>
        </onOut>
        <onOver set="method" line="200">
            <f a="event">
                <t path="nme.events.MouseEvent"/>
                <x path="Void"/>
            </f>
        </onOver>
        <setAllListeners set="method" line="187">
            <f a="listener">
                <f a="">
                    <t path="nme.events.MouseEvent"/>
                    <x path="Void"/>
                </f>
                <x path="Void"/>
            </f>
        </setAllListeners>
        <close set="method" line="182">
            <f a="event">
                <t path="nme.events.MouseEvent"/>
                <x path="Void"/>
            </f>
        </close>
        <open set="method" line="179">
            <f a="event">
                <t path="nme.events.MouseEvent"/>
                <x path="Void"/>
            </f>
        </open>
        <onDblClick set="method" line="176">
            <f a="event">
                <t path="nme.events.MouseEvent"/>
                <x path="Void"/>
            </f>
        </onDblClick>
        <onClick set="method" line="167">
            <f a="event">
                <t path="nme.events.MouseEvent"/>
                <x path="Void"/>
            </f>
        </onClick>
        <onMouseOut set="method" line="164">
            <f a="event">
                <t path="nme.events.MouseEvent"/>
                <x path="Void"/>
            </f>
        </onMouseOut>
        <onMouseOver set="method" line="159">
            <f a="event">
                <t path="nme.events.MouseEvent"/>
                <x path="Void"/>
            </f>
        </onMouseOver>
        <setToggle public="1" set="method" line="151">
            <f a="toggle">
                <x path="Bool"/>
                <x path="Void"/>
            </f>
            <haxe_doc>* Define if the button is in state active or inactive</haxe_doc>
        </setToggle>
        <set_mirror public="1" set="method" line="138">
            <f a="mirror">
                <x path="Int"/>
                <x path="Int"/>
            </f>
        </set_mirror>
        <set_scale public="1" set="method" line="133">
            <f a="scale">
                <x path="Float"/>
                <x path="Float"/>
            </f>
        </set_scale>
        <set_enabled public="1" set="method" line="126">
            <f a="activate">
                <x path="Bool"/>
                <x path="Bool"/>
            </f>
            <haxe_doc>* Enable or disable the button
                * @param activate : True to activate the button
                * @return true if the button is now activated
            </haxe_doc>
        </set_enabled>
        <set_transitionOut public="1" set="method" line="111">
            <f a="transition">
                <c path="String"/>
                <c path="String"/>
            </f>
        </set_transitionOut>
        <set_transitionIn public="1" set="method" line="101">
            <f a="transition">
                <c path="String"/>
                <c path="String"/>
            </f>
        </set_transitionIn>
        <clip>
            <c path="aze.display.TileClip"/>
        </clip>
        <currentState>
            <c path="String"/>
        </currentState>
        <toggle>
            <c path="String"/>
        </toggle>
        <propagateNativeEvent public="1">
            <x path="Bool"/>
            <haxe_doc>* Control whether or not the native event (CLICK) must be propagated</haxe_doc>
        </propagateNativeEvent>
        <eventType public="1">
            <c path="String"/>
            <haxe_doc>* Type of the event to dispatch</haxe_doc>
        </eventType>
        <states public="1" set="null">
            <x path="Map">
                <c path="String"/>
                <x path="Map">
                    <c path="String"/>
                    <a>
                        <z>
                            <x path="Int"/>
                        </z>
                        <trans>
                            <c path="String"/>
                        </trans>
                        <dpo>
                            <t path="nme.display.DisplayObject"/>
                        </dpo>
                    </a>
                </x>
            </x>
            <haxe_doc>* Different states of the button</haxe_doc>
        </states>
        <transitionOut public="1" set="accessor">
            <c path="String"/>
            <haxe_doc>* Transition when the button disappears</haxe_doc>
        </transitionOut>
        <transitionIn public="1" set="accessor">
            <c path="String"/>
            <haxe_doc>* Transition when the button appears</haxe_doc>
        </transitionIn>
        <className public="1">
            <c path="String"/>
            <haxe_doc>* Class of style for the button</haxe_doc>
        </className>
        <mirror public="1" set="accessor">
            <x path="Int"/>
            <haxe_doc>* Mirror</haxe_doc>
        </mirror>
        <scale public="1" set="accessor">
            <x path="Float"/>
            <haxe_doc>* Scale of the button</haxe_doc>
        </scale>
        <ref public="1">
            <c path="String"/>
            <haxe_doc>* Reference of the button</haxe_doc>
        </ref>
        <enabled public="1" set="accessor">
            <x path="Bool"/>
            <haxe_doc>* Switch to enable the button</haxe_doc>
        </enabled>
        <layer public="1">
            <c path="aze.display.TileLayer"/>
            <haxe_doc>* Layer of the button</haxe_doc>
        </layer>
        <new public="1" set="method" line="88">
            <f a="pStates:?action">
                <x path="Map">
                    <c path="String"/>
                    <x path="Map">
                        <c path="String"/>
                        <a>
                            <z>
                                <x path="Int"/>
                            </z>
                            <trans>
                                <c path="String"/>
                            </trans>
                            <dpo>
                                <t path="nme.display.DisplayObject"/>
                            </dpo>
                        </a>
                    </x>
                </x>
                <c path="String"/>
                <x path="Void"/>
            </f>
            <haxe_doc>* Constructor.
                * @param tilesheet : UI Sheet
                * @param tile : Tile containing the upstate
            </haxe_doc>
        </new>
        <haxe_doc>* Custom base button class</haxe_doc>
    </class>
    <class path="com.knowledgeplayers.grar.display.component.container.ScrollPanel" params=""
           file="/Users/jbrichardet/IdeaProjects/grar/com/knowledgeplayers/grar/display/component/container/ScrollPanel.hx">
        <extends path="flash.display.Sprite"/>
        <onWheel set="method" line="249">
            <f a="e">
                <t path="nme.events.MouseEvent"/>
                <x path="Void"/>
            </f>
        </onWheel>
        <onRemoved set="method" line="244">
            <f a="e">
                <t path="nme.events.Event"/>
                <x path="Void"/>
            </f>
        </onRemoved>
        <onAdded set="method" line="231">
            <f a="e">
                <t path="nme.events.Event"/>
                <x path="Void"/>
            </f>
        </onAdded>
        <moveCursor set="method" line="224">
            <f a="delta">
                <x path="Float"/>
                <x path="Void"/>
            </f>
        </moveCursor>
        <displayText set="method" line="216">
            <f a="">
                <x path="Void"/>
            </f>
        </displayText>
        <clear set="method" line="208">
            <f a="">
                <x path="Void"/>
            </f>
        </clear>
        <scrollToRatio set="method" line="203">
            <f a="position">
                <x path="Float"/>
                <x path="Void"/>
            </f>
        </scrollToRatio>
        <set_textAlpha public="1" set="method" line="195">
            <f a="alpha">
                <x path="Float"/>
                <x path="Float"/>
            </f>
        </set_textAlpha>
        <setBackground public="1" set="method" line="169">
            <f a="bkg:?tilesheet:?alpha">
                <c path="String"/>
                <c path="aze.display.TilesheetEx"/>
                <x path="Float"/>
                <x path="Void"/>
            </f>
        </setBackground>
        <setContent public="1" set="method" line="93">
            <f a="contentString">
                <c path="String"/>
                <x path="Void"/>
            </f>
            <haxe_doc>* Set the text to the panel
                * @param content : Text to set
                * @return the text
            </haxe_doc>
        </setContent>
        <background>
            <c path="String"/>
            <haxe_doc>* Background of the panel. It can be only a color or a reference to a Bitmap,</haxe_doc>
        </background>
        <scrollable>
            <x path="Bool"/>
        </scrollable>
        <maskHeight>
            <x path="Float"/>
        </maskHeight>
        <maskWidth>
            <x path="Float"/>
        </maskWidth>
        <scrollBar>
            <c path="com.knowledgeplayers.grar.display.component.ScrollBar"/>
        </scrollBar>
        <textAlpha public="1" set="accessor">
            <x path="Float"/>
            <haxe_doc>* Alpha of the text only</haxe_doc>
        </textAlpha>
        <transitionOut public="1">
            <c path="String"/>
            <haxe_doc>* Transition when the panel disappears</haxe_doc>
        </transitionOut>
        <transitionIn public="1">
            <c path="String"/>
            <haxe_doc>* Transition when the panel appears</haxe_doc>
        </transitionIn>
        <textTransition public="1">
            <c path="String"/>
            <haxe_doc>* Transition when the text appears</haxe_doc>
        </textTransition>
        <styleSheet public="1">
            <c path="String"/>
            <haxe_doc>* Style sheet used for this panel</haxe_doc>
        </styleSheet>
        <scrollLock public="1">
            <x path="Bool"/>
            <haxe_doc>* If true, the text won't scroll even if it's bigger than the panel</haxe_doc>
        </scrollLock>
        <content set="null">
            <t path="nme.display.Sprite"/>
            <haxe_doc>* Text in the panel</haxe_doc>
        </content>
        <new public="1" set="method" line="74">
            <f a="width:height:?_scrollLock:?_styleSheet">
                <x path="Float"/>
                <x path="Float"/>
                <x path="Bool"/>
                <c path="String"/>
                <x path="Void"/>
            </f>
            <haxe_doc>* Constructor
                * @param width : Width of the displayed content
                * @param height : Height of the displayed content
                * @param scrollLock : Disable scroll. False by default
                * @param styleSheet : Style sheet used for this panel
            </haxe_doc>
        </new>
        <haxe_doc>* ScrollPanel to manage text overflow, with auto scrollbar</haxe_doc>
    </class>
    <class path="com.knowledgeplayers.grar.display.contextual.InventoryDisplay" params=""
           file="/Users/jbrichardet/IdeaProjects/grar/com/knowledgeplayers/grar/display/contextual/InventoryDisplay.hx">
        <extends path="flash.display.Sprite"/>
        <onOutToken set="method" line="320">
            <f a="e">
                <t path="nme.events.MouseEvent"/>
                <x path="Void"/>
            </f>
        </onOutToken>
        <onOverToken set="method" line="305">
            <f a="e">
                <t path="nme.events.MouseEvent"/>
                <x path="Void"/>
            </f>
        </onOverToken>
        <removeElements set="method" line="294">
            <f a="">
                <x path="Void"/>
            </f>
        </removeElements>
        <closeFullscreen set="method" line="278">
            <f a="e">
                <c path="com.knowledgeplayers.grar.event.ButtonActionEvent"/>
                <x path="Void"/>
            </f>
        </closeFullscreen>
        <onClickToken set="method" line="239">
            <f a="e">
                <t path="nme.events.MouseEvent"/>
                <x path="Void"/>
            </f>
        </onClickToken>
        <onTokenActivated set="method" line="212">
            <f a="e">
                <c path="com.knowledgeplayers.grar.event.TokenEvent"/>
                <x path="Void"/>
            </f>
        </onTokenActivated>
        <init public="1" set="method" line="187">
            <f a="tokens">
                <c path="haxe.ds.GenericStack_String"/>
                <x path="Void"/>
            </f>
            <haxe_doc>* Init the inventory with all the tokens it will contained</haxe_doc>
        </init>
        <iconPage>
            <t path="nme.display.Bitmap"/>
        </iconPage>
        <fullScreenTransitionOut>
            <c path="String"/>
        </fullScreenTransitionOut>
        <fullScreenTransitionIn>
            <c path="String"/>
        </fullScreenTransitionIn>
        <imgSlot>
            <t path="nme.display.Sprite"/>
        </imgSlot>
        <title>
            <c path="com.knowledgeplayers.grar.display.component.container.ScrollPanel"/>
        </title>
        <background>
            <t path="nme.display.Sprite"/>
        </background>
        <largeImage>
            <t path="nme.display.Bitmap"/>
        </largeImage>
        <closeButton>
            <c path="com.knowledgeplayers.grar.display.component.button.DefaultButton"/>
        </closeButton>
        <contentToken>
            <c path="com.knowledgeplayers.grar.display.component.container.ScrollPanel"/>
        </contentToken>
        <tooltipOrigin>
            <t path="nme.geom.Point"/>
        </tooltipOrigin>
        <tooltip>
            <c path="com.knowledgeplayers.grar.display.component.container.ScrollPanel"/>
        </tooltip>
        <slots>
            <x path="Map">
                <c path="String"/>
                <t path="nme.display.Sprite"/>
            </x>
        </slots>
        <tokens>
            <c path="haxe.ds.GenericStack_String"/>
        </tokens>
        <transitionOut public="1">
            <c path="String"/>
            <haxe_doc>* Reference to the transition when inventory disappears</haxe_doc>
        </transitionOut>
        <transitionIn public="1">
            <c path="String"/>
            <haxe_doc>* Reference to the transition when inventory appears</haxe_doc>
        </transitionIn>
        <tipTransitionOut public="1">
            <c path="String"/>
            <haxe_doc>* Reference to the transition when tooltip disappears</haxe_doc>
        </tipTransitionOut>
        <tipTransitionIn public="1">
            <c path="String"/>
            <haxe_doc>* Reference to the transition when tooltip appears</haxe_doc>
        </tipTransitionIn>
        <iconTransition public="1">
            <c path="String"/>
            <haxe_doc>* Transition when the token icon appears</haxe_doc>
        </iconTransition>
        <iconScale public="1">
            <x path="Float"/>
            <haxe_doc>* Scale of the token icon</haxe_doc>
        </iconScale>
        <iconPosition public="1">
            <t path="nme.geom.Point"/>
            <haxe_doc>* Point to place the token icon into the slot</haxe_doc>
        </iconPosition>
        <maxWidth public="1">
            <x path="Float"/>
            <haxe_doc>* Max width. Slots will be centered based on this width</haxe_doc>
        </maxWidth>
        <slotBackgroundUnlocked public="1">
            <t path="nme.display.BitmapData"/>
            <haxe_doc>* BitmapData for the slots when they're unlocked</haxe_doc>
        </slotBackgroundUnlocked>
        <slotBackground public="1">
            <t path="nme.display.BitmapData"/>
            <haxe_doc>* BitmapData for the slots when they're locked</haxe_doc>
        </slotBackground>
        <new public="1" set="method" line="103">
            <f a="?fast">
                <c path="haxe.xml.Fast"/>
                <x path="Void"/>
            </f>
            <haxe_doc>* Constructor
                * @param fast : Fast XML
            </haxe_doc>
        </new>
        <haxe_doc>* View of an inventory</haxe_doc>
    </class>
    <class path="com.knowledgeplayers.grar.display.element.AnimationDisplay" params=""
           file="/Users/jbrichardet/IdeaProjects/grar/com/knowledgeplayers/grar/display/element/AnimationDisplay.hx">
        <extends path="flash.display.Sprite"/>
        <loop set="method" line="71">
            <f a="e">
                <t path="nme.events.Event"/>
                <x path="Void"/>
            </f>
        </loop>
        <goto public="1" set="method" line="65">
            <f a="_frame">
                <x path="Int"/>
                <x path="Void"/>
            </f>
        </goto>
        <stopElement public="1" set="method" line="55">
            <f a="">
                <x path="Void"/>
            </f>
            <haxe_doc>* Stop the animation</haxe_doc>
        </stopElement>
        <animElement public="1" set="method" line="45">
            <f a="?e">
                <t path="nme.events.Event"/>
                <x path="Void"/>
            </f>
            <haxe_doc>* Play the animation with an Enter_Frame</haxe_doc>
        </animElement>
        <clip>
            <c path="aze.display.TileClip"/>
        </clip>
        <layer>
            <c path="aze.display.TileLayer"/>
        </layer>
        <new public="1" set="method" line="14">
            <f a="_id:_x:_y:_tileSheet:_scaleX:_scaleY:_loop:_alpha:mirror">
                <c path="String"/>
                <x path="Float"/>
                <x path="Float"/>
                <c path="aze.display.TilesheetEx"/>
                <x path="Float"/>
                <x path="Float"/>
                <x path="Float"/>
                <x path="Float"/>
                <c path="String"/>
                <x path="Void"/>
            </f>
        </new>
    </class>
    <class path="com.knowledgeplayers.grar.display.element.CharacterDisplay" params=""
           file="/Users/jbrichardet/IdeaProjects/grar/com/knowledgeplayers/grar/display/element/CharacterDisplay.hx">
        <extends path="flash.display.Sprite"/>
        <reset public="1" set="method" line="70">
            <f a="?e">
                <t path="nme.events.Event"/>
                <x path="Void"/>
            </f>
        </reset>
        <set_scale public="1" set="method" line="63">
            <f a="scale">
                <x path="Float"/>
                <x path="Float"/>
            </f>
        </set_scale>
        <img>
            <c path="aze.display.TileSprite"/>
        </img>
        <layer>
            <c path="aze.display.TileLayer"/>
        </layer>
        <nameRef public="1">
            <c path="String"/>
            <haxe_doc>* Reference to the panel where to display its name</haxe_doc>
        </nameRef>
        <model public="1">
            <c path="com.knowledgeplayers.grar.structure.part.dialog.Character"/>
            <haxe_doc>* Model of the character</haxe_doc>
        </model>
        <scale public="1" set="accessor">
            <x path="Float"/>
            <haxe_doc>* Scale of the character</haxe_doc>
        </scale>
        <origin public="1">
            <a>
                <scale>
                    <x path="Float"/>
                </scale>
                <pos>
                    <t path="nme.geom.Point"/>
                </pos>
            </a>
            <haxe_doc>* Starting point of the character</haxe_doc>
        </origin>
        <new public="1" set="method" line="39">
            <f a="spritesheet:tileId:?model:?mirror">
                <c path="aze.display.TilesheetEx"/>
                <c path="String"/>
                <c path="com.knowledgeplayers.grar.structure.part.dialog.Character"/>
                <c path="String"/>
                <x path="Void"/>
            </f>
        </new>
        <haxe_doc>* Graphic representation of a character of the game</haxe_doc>
    </class>
    <class path="com.knowledgeplayers.grar.display.element.TokenNotification" params=""
           file="/Users/jbrichardet/IdeaProjects/grar/com/knowledgeplayers/grar/display/element/TokenNotification.hx">
        <extends path="flash.display.Sprite"/>
        <hideNotification public="1" set="method" line="100">
            <f a="">
                <x path="Void"/>
            </f>
        </hideNotification>
        <showNotification public="1" set="method" line="86">
            <f a="tokenName">
                <c path="String"/>
                <x path="Void"/>
            </f>
        </showNotification>
        <tokenArea>
            <c path="com.knowledgeplayers.grar.display.component.container.ScrollPanel"/>
        </tokenArea>
        <titleArea>
            <c path="com.knowledgeplayers.grar.display.component.container.ScrollPanel"/>
        </titleArea>
        <img>
            <c path="aze.display.TileSprite"/>
        </img>
        <layer>
            <c path="aze.display.TileLayer"/>
        </layer>
        <duration public="1">
            <x path="Int"/>
            <haxe_doc>* Time (in millisecond) before the notification disappear</haxe_doc>
        </duration>
        <content public="1">
            <c path="String"/>
            <haxe_doc>* Text to display in the notification</haxe_doc>
        </content>
        <iconPosition public="1">
            <t path="nme.geom.Point"/>
            <haxe_doc>* Position of the token image</haxe_doc>
        </iconPosition>
        <maxWidth public="1">
            <x path="Float"/>
            <haxe_doc>* Max width for token image</haxe_doc>
        </maxWidth>
        <hideToken public="1">
            <c path="String"/>
            <haxe_doc>* Reference to the "out" transition for the notification</haxe_doc>
        </hideToken>
        <showToken public="1">
            <c path="String"/>
            <haxe_doc>* Reference to the "in" transition for the notification</haxe_doc>
        </showToken>
        <new public="1" set="method" line="53">
            <f a="fast">
                <c path="haxe.xml.Fast"/>
                <x path="Void"/>
            </f>
        </new>
        <haxe_doc>* Graphic representation of a token of the game</haxe_doc>
    </class>
    <class path="com.knowledgeplayers.grar.display.layout.Layout" params=""
           file="/Users/jbrichardet/IdeaProjects/grar/com/knowledgeplayers/grar/display/layout/Layout.hx">
        <onNewZone set="method" line="57">
            <f a="e">
                <c path="com.knowledgeplayers.grar.event.LayoutEvent"/>
                <x path="Void"/>
            </f>
        </onNewZone>
        <get_content public="1" set="method" line="50">
            <f a="">
                <c path="com.knowledgeplayers.grar.display.layout.Zone"/>
            </f>
        </get_content>
        <name public="1">
            <c path="String"/>
            <haxe_doc>* Name of this layout</haxe_doc>
        </name>
        <content public="1" get="accessor" set="null">
            <c path="com.knowledgeplayers.grar.display.layout.Zone"/>
            <haxe_doc>* Content of the layout</haxe_doc>
        </content>
        <zones public="1">
            <x path="Map">
                <c path="String"/>
                <c path="com.knowledgeplayers.grar.display.layout.Zone"/>
            </x>
            <haxe_doc>* All the child zones of this layout</haxe_doc>
        </zones>
        <new public="1" set="method" line="33">
            <f a="?_name:?_content:?_fast">
                <c path="String"/>
                <c path="com.knowledgeplayers.grar.display.layout.Zone"/>
                <c path="haxe.xml.Fast"/>
                <x path="Void"/>
            </f>
            <haxe_doc>* Constructor
                * @param name : Name of the layout
                * @param content : Content of the layout
                * @param fast : XML description of the layout
            </haxe_doc>
        </new>
        <haxe_doc>* Layout of the application</haxe_doc>
    </class>
    <class path="com.knowledgeplayers.grar.display.layout.Zone" params=""
           file="/Users/jbrichardet/IdeaProjects/grar/com/knowledgeplayers/grar/display/layout/Zone.hx">
        <extends path="flash.display.Sprite"/>
        <onGameLoaded set="method" line="239">
            <f a="e">
                <c path="com.knowledgeplayers.grar.event.PartEvent"/>
                <x path="Void"/>
            </f>
        </onGameLoaded>
        <onNewZone set="method" line="234">
            <f a="e">
                <c path="com.knowledgeplayers.grar.event.LayoutEvent"/>
                <x path="Void"/>
            </f>
        </onNewZone>
        <initSize set="method" line="209">
            <f a="sizes:maxSize">
                <c path="String"/>
                <x path="Float"/>
                <c path="Array">
                    <d/>
                </c>
            </f>
        </initSize>
        <activeSound set="method" line="193">
            <f a="e">
                <t path="nme.events.Event"/>
                <x path="Void"/>
            </f>
        </activeSound>
        <onActionEvent public="1" set="method" line="185">
            <f a="e">
                <t path="nme.events.Event"/>
                <x path="Void"/>
            </f>
        </onActionEvent>
        <createMenu public="1" set="method" line="172">
            <f a="element">
                <c path="haxe.xml.Fast"/>
                <x path="Void"/>
            </f>
        </createMenu>
        <createBackground public="1" set="method" line="155">
            <f a="bkgNode:?_container">
                <c path="haxe.xml.Fast"/>
                <t path="nme.display.Sprite"/>
                <t path="nme.display.Sprite"/>
            </f>
        </createBackground>
        <createText set="method" line="141">
            <f a="element">
                <c path="haxe.xml.Fast"/>
                <c path="com.knowledgeplayers.grar.display.component.container.ScrollPanel"/>
            </f>
        </createText>
        <createProgressBar set="method" line="132">
            <f a="element">
                <c path="haxe.xml.Fast"/>
                <c path="com.knowledgeplayers.grar.display.component.ProgressBar"/>
            </f>
        </createProgressBar>
        <createHeader set="method" line="127">
            <f a="">
                <x path="Void"/>
            </f>
        </createHeader>
        <createImage public="1" set="method" line="118">
            <f a="imageNode">
                <c path="haxe.xml.Fast"/>
                <c path="aze.display.TileSprite"/>
            </f>
        </createImage>
        <createButton public="1" set="method" line="104">
            <f a="_child">
                <c path="haxe.xml.Fast"/>
                <c path="com.knowledgeplayers.grar.display.component.button.DefaultButton"/>
            </f>
        </createButton>
        <init public="1" set="method" line="38">
            <f a="_zone">
                <c path="haxe.xml.Fast"/>
                <x path="Void"/>
            </f>
        </init>
        <menuXml>
            <c path="haxe.xml.Fast"/>
        </menuXml>
        <soundState>
            <x path="Bool"/>
        </soundState>
        <layer>
            <c path="aze.display.TileLayer"/>
        </layer>
        <menu>
            <c path="com.knowledgeplayers.grar.display.part.MenuDisplay"/>
        </menu>
        <zoneHeight>
            <x path="Float"/>
        </zoneHeight>
        <zoneWidth>
            <x path="Float"/>
        </zoneWidth>
        <ref public="1">
            <c path="String"/>
        </ref>
        <new public="1" set="method" line="29">
            <f a="_width:_height">
                <x path="Float"/>
                <x path="Float"/>
                <x path="Void"/>
            </f>
        </new>
    </class>
    <class path="com.knowledgeplayers.grar.display.part.PartDisplay" params=""
           file="/Users/jbrichardet/IdeaProjects/grar/com/knowledgeplayers/grar/display/part/PartDisplay.hx">
        <extends path="com.knowledgeplayers.grar.display.KpDisplay"/>
        <mustBeDisplayed set="method" line="464">
            <f a="key">
                <c path="String"/>
                <x path="Bool"/>
            </f>
        </mustBeDisplayed>
        <sortDisplayObjects set="method" line="454">
            <f a="x:y">
                <a>
                    <z>
                        <x path="Int"/>
                    </z>
                    <obj>
                        <t path="nme.display.DisplayObject"/>
                    </obj>
                </a>
                <a>
                    <z>
                        <x path="Int"/>
                    </z>
                    <obj>
                        <t path="nme.display.DisplayObject"/>
                    </obj>
                </a>
                <x path="Int"/>
            </f>
        </sortDisplayObjects>
        <displayPart set="method" line="414">
            <f a="">
                <x path="Void"/>
            </f>
        </displayPart>
        <setText set="method" line="399">
            <f a="item:?isFirst">
                <c path="com.knowledgeplayers.grar.structure.part.TextItem"/>
                <x path="Bool"/>
                <x path="Void"/>
            </f>
        </setText>
        <setupTextItem set="method" line="346">
            <f a="item:?isFirst">
                <c path="com.knowledgeplayers.grar.structure.part.TextItem"/>
                <x path="Bool"/>
                <x path="Void"/>
            </f>
        </setupTextItem>
        <setSpeaker set="method" line="311">
            <f a="author:?transition">
                <c path="String"/>
                <c path="String"/>
                <x path="Void"/>
            </f>
        </setSpeaker>
        <displayBackground set="method" line="280">
            <f a="background">
                <c path="String"/>
                <x path="Void"/>
            </f>
        </displayBackground>
        <setButtonAction set="method" line="273" override="1">
            <f a="button:action">
                <c path="com.knowledgeplayers.grar.display.component.button.DefaultButton"/>
                <c path="String"/>
                <x path="Void"/>
            </f>
        </setButtonAction>
        <startPattern set="method" line="268">
            <f a="pattern">
                <c path="com.knowledgeplayers.grar.structure.part.Pattern"/>
                <x path="Void"/>
            </f>
        </startPattern>
        <checkPartLoaded set="method" line="259">
            <f a="">
                <x path="Void"/>
            </f>
        </checkPartLoaded>
        <createDisplay set="method" line="252" override="1">
            <f a="">
                <x path="Void"/>
            </f>
        </createDisplay>
        <createElement set="method" line="238" override="1">
            <f a="elemNode">
                <c path="haxe.xml.Fast"/>
                <x path="Void"/>
            </f>
        </createElement>
        <unLoad set="method" line="209">
            <f a="">
                <x path="Void"/>
            </f>
            <haxe_doc>* Unload the display from the scene</haxe_doc>
        </unLoad>
        <next public="1" set="method" line="198">
            <f a="event">
                <c path="com.knowledgeplayers.grar.event.ButtonActionEvent"/>
                <x path="Void"/>
            </f>
        </next>
        <parseContent public="1" set="method" line="187" override="1">
            <f a="content">
                <c path="Xml"/>
                <x path="Void"/>
            </f>
        </parseContent>
        <startPart public="1" set="method" line="181">
            <f a="?startPosition">
                <x path="Int"/>
                <x path="Void"/>
            </f>
            <haxe_doc>* Start the part
                * @param startPosition : Start at this position
            </haxe_doc>
        </startPart>
        <nextElement public="1" set="method" line="113">
            <f a="?startIndex">
                <x path="Int"/>
                <x path="Void"/>
            </f>
            <haxe_doc>* @param startIndex : Next element after this index
                * @return the TextItem in the part or null if there is an activity or the part is over
            </haxe_doc>
        </nextElement>
        <exitPart public="1" set="method" line="100">
            <f a="">
                <x path="Void"/>
            </f>
        </exitPart>
        <init public="1" set="method" line="86">
            <f a="">
                <x path="Void"/>
            </f>
            <haxe_doc>* Initialize the part display. Dispatch a PartEvent.PART_LOADED
                * when ready.
            </haxe_doc>
        </init>
        <transitions>
            <c path="Array">
                <a>
                    <tween>
                        <c path="String"/>
                    </tween>
                    <obj>
                        <t path="nme.display.DisplayObject"/>
                    </obj>
                </a>
            </c>
        </transitions>
        <itemSoundChannel>
            <t path="nme.media.SoundChannel"/>
        </itemSoundChannel>
        <itemSound>
            <t path="nme.media.Sound"/>
        </itemSound>
        <inventory>
            <c path="com.knowledgeplayers.grar.display.contextual.InventoryDisplay"/>
        </inventory>
        <currentTextItem>
            <c path="com.knowledgeplayers.grar.structure.part.TextItem"/>
        </currentTextItem>
        <currentItems>
            <c path="haxe.ds.GenericStack_flash_display_DisplayObject"/>
        </currentItems>
        <displayLoaded>
            <x path="Bool"/>
        </displayLoaded>
        <localeLoaded>
            <x path="Bool"/>
        </localeLoaded>
        <displayArea>
            <t path="nme.display.Sprite"/>
        </displayArea>
        <previousBackground>
            <a>
                <ref>
                    <c path="String"/>
                </ref>
                <bmp>
                    <t path="nme.display.Bitmap"/>
                </bmp>
            </a>
        </previousBackground>
        <currentSpeaker>
            <c path="com.knowledgeplayers.grar.display.element.CharacterDisplay"/>
        </currentSpeaker>
        <resizeD>
            <c path="com.knowledgeplayers.grar.display.ResizeManager"/>
        </resizeD>
        <currentElement>
            <c path="com.knowledgeplayers.grar.structure.part.PartElement"/>
        </currentElement>
        <introScreenOn public="1" set="null">
            <x path="Bool"/>
        </introScreenOn>
        <transitionOut public="1">
            <c path="String"/>
            <haxe_doc>* Transition to play at the end of the part</haxe_doc>
        </transitionOut>
        <transitionIn public="1">
            <c path="String"/>
            <haxe_doc>* Transition to play at the beginning of the part</haxe_doc>
        </transitionIn>
        <part public="1">
            <c path="com.knowledgeplayers.grar.structure.part.Part"/>
            <haxe_doc>* Part model to display</haxe_doc>
        </part>
        <new public="1" set="method" line="70">
            <f a="part">
                <c path="com.knowledgeplayers.grar.structure.part.Part"/>
                <x path="Void"/>
            </f>
            <haxe_doc>* Constructor
                * @param part : Part to display
            </haxe_doc>
        </new>
        <haxe_doc>* Display of a part</haxe_doc>
    </class>
    <class path="com.knowledgeplayers.grar.display.part.DialogDisplay" params=""
           file="/Users/jbrichardet/IdeaProjects/grar/com/knowledgeplayers/grar/display/part/DialogDisplay.hx">
        <extends path="com.knowledgeplayers.grar.display.part.PartDisplay"/>
        <onOutChoice set="method" line="152">
            <f a="e">
                <t path="nme.events.MouseEvent"/>
                <x path="Void"/>
            </f>
        </onOutChoice>
        <onOverChoice set="method" line="121">
            <f a="e">
                <t path="nme.events.MouseEvent"/>
                <x path="Void"/>
            </f>
        </onOverChoice>
        <onChoice set="method" line="108">
            <f a="ev">
                <c path="com.knowledgeplayers.grar.event.ButtonActionEvent"/>
                <x path="Void"/>
            </f>
        </onChoice>
        <setButtonAction set="method" line="98" override="1">
            <f a="button:action">
                <c path="com.knowledgeplayers.grar.display.component.button.DefaultButton"/>
                <c path="String"/>
                <x path="Void"/>
            </f>
        </setButtonAction>
        <goToPattern public="1" set="method" line="85">
            <f a="target">
                <c path="String"/>
                <x path="Void"/>
            </f>
            <haxe_doc>* Go to a specific pattern
                * @param target : Name of the pattern to go
            </haxe_doc>
        </goToPattern>
        <startPattern set="method" line="51" override="1">
            <f a="pattern">
                <c path="com.knowledgeplayers.grar.structure.part.Pattern"/>
                <x path="Void"/>
            </f>
        </startPattern>
        <next public="1" set="method" line="39" override="1">
            <f a="event">
                <c path="com.knowledgeplayers.grar.event.ButtonActionEvent"/>
                <x path="Void"/>
            </f>
        </next>
        <nextActivity>
            <c path="com.knowledgeplayers.grar.structure.activity.Activity"/>
        </nextActivity>
        <currentPattern public="1">
            <c path="com.knowledgeplayers.grar.structure.part.Pattern"/>
            <haxe_doc>* Pattern playing</haxe_doc>
        </currentPattern>
        <new public="1" set="method" line="34">
            <f a="part">
                <c path="com.knowledgeplayers.grar.structure.part.dialog.DialogPart"/>
                <x path="Void"/>
            </f>
            <haxe_doc>* Constructor
                * @param part : DialogPart to display
            </haxe_doc>
        </new>
        <haxe_doc>* Display of a dialog</haxe_doc>
    </class>
    <class path="com.knowledgeplayers.grar.display.part.IntroScreen" params=""
           file="/Users/jbrichardet/IdeaProjects/grar/com/knowledgeplayers/grar/display/part/IntroScreen.hx">
        <extends path="flash.display.Sprite"/>
        <onAdded set="method" line="107">
            <f a="e">
                <t path="nme.events.Event"/>
                <x path="Void"/>
            </f>
        </onAdded>
        <dispose set="method" line="99">
            <f a="">
                <x path="Void"/>
            </f>
        </dispose>
        <hide set="method" line="87">
            <f a="">
                <x path="Void"/>
            </f>
        </hide>
        <set_text public="1" set="method" line="79">
            <f a="text">
                <c path="String"/>
                <c path="String"/>
            </f>
        </set_text>
        <content>
            <c path="com.knowledgeplayers.grar.display.component.container.ScrollPanel"/>
        </content>
        <transitionOut public="1">
            <c path="String"/>
            <haxe_doc>* Transition when the screen disappears</haxe_doc>
        </transitionOut>
        <transitionIn public="1">
            <c path="String"/>
            <haxe_doc>* Transition when the screen appears</haxe_doc>
        </transitionIn>
        <duration public="1">
            <x path="Int"/>
            <haxe_doc>* Time (in ms) before the screen disappear</haxe_doc>
        </duration>
        <text public="1" set="accessor">
            <c path="String"/>
            <haxe_doc>* Text to display in the intro</haxe_doc>
        </text>
        <new public="1" set="method" line="38">
            <f a="?xml">
                <c path="haxe.xml.Fast"/>
                <x path="Void"/>
            </f>
        </new>
    </class>
    <class path="com.knowledgeplayers.grar.display.part.MenuDisplay" params=""
           file="/Users/jbrichardet/IdeaProjects/grar/com/knowledgeplayers/grar/display/part/MenuDisplay.hx">
        <extends path="com.knowledgeplayers.grar.display.layout.Zone"/>
        <onFinishPart set="method" line="185">
            <f a="e">
                <c path="com.knowledgeplayers.grar.event.PartEvent"/>
                <x path="Void"/>
            </f>
        </onFinishPart>
        <onClick set="method" line="174">
            <f a="e">
                <c path="com.knowledgeplayers.grar.event.ButtonActionEvent"/>
                <x path="Void"/>
            </f>
        </onClick>
        <addButton set="method" line="160">
            <f a="fast:text">
                <c path="haxe.xml.Fast"/>
                <c path="String"/>
                <c path="com.knowledgeplayers.grar.display.component.button.DefaultButton"/>
            </f>
        </addButton>
        <addLine set="method" line="142">
            <f a="fast">
                <c path="haxe.xml.Fast"/>
                <x path="Void"/>
            </f>
        </addLine>
        <createMenuLevel set="method" line="114">
            <f a="level">
                <c path="Xml"/>
                <x path="Void"/>
            </f>
        </createMenuLevel>
        <initMenu public="1" set="method" line="74">
            <f a="display">
                <c path="haxe.xml.Fast"/>
                <x path="Void"/>
            </f>
            <haxe_doc>* Init the menu with an XML descriptor
                * @param xml : XML descriptor
            </haxe_doc>
        </initMenu>
        <onActionEvent public="1" set="method" line="61" override="1">
            <f a="e">
                <t path="nme.events.Event"/>
                <x path="Void"/>
            </f>
        </onActionEvent>
        <set_orientation public="1" set="method" line="55">
            <f a="orientation">
                <c path="String"/>
                <c path="String"/>
            </f>
            <haxe_doc>* @:setter for orientation
                * @param orientation : The orientation set
                * @return the orientation
            </haxe_doc>
        </set_orientation>
        <buttons>
            <x path="Map">
                <c path="String"/>
                <c path="com.knowledgeplayers.grar.display.component.button.DefaultButton"/>
            </x>
        </buttons>
        <xBase>
            <x path="Float"/>
        </xBase>
        <yBase>
            <x path="Float"/>
        </yBase>
        <yOffset>
            <x path="Float"/>
        </yOffset>
        <xOffset>
            <x path="Float"/>
        </xOffset>
        <levelDisplays>
            <x path="Map">
                <c path="String"/>
                <c path="haxe.xml.Fast"/>
            </x>
        </levelDisplays>
        <transitionOut public="1">
            <c path="String"/>
            <haxe_doc>* transition close menu</haxe_doc>
        </transitionOut>
        <transitionIn public="1">
            <c path="String"/>
            <haxe_doc>* transition open menu</haxe_doc>
        </transitionIn>
        <orientation public="1" set="accessor">
            <c path="String"/>
            <haxe_doc>* Orientation of the menu. Must be Horizontal or Vertical</haxe_doc>
        </orientation>
        <new public="1" set="method" line="42">
            <f a="_width:_height">
                <x path="Float"/>
                <x path="Float"/>
                <x path="Void"/>
            </f>
        </new>
        <haxe_doc>* Display of a menu</haxe_doc>
    </class>
    <class path="com.knowledgeplayers.grar.display.part.StripDisplay" params=""
           file="/Users/jbrichardet/IdeaProjects/grar/com/knowledgeplayers/grar/display/part/StripDisplay.hx">
        <extends path="com.knowledgeplayers.grar.display.part.PartDisplay"/>
        <displayPart set="method" line="63" override="1">
            <f a="">
                <x path="Void"/>
            </f>
        </displayPart>
        <startPattern set="method" line="47" override="1">
            <f a="pattern">
                <c path="com.knowledgeplayers.grar.structure.part.Pattern"/>
                <x path="Void"/>
            </f>
        </startPattern>
        <createElement set="method" line="38" override="1">
            <f a="elemNode">
                <c path="haxe.xml.Fast"/>
                <x path="Void"/>
            </f>
        </createElement>
        <next public="1" set="method" line="31" override="1">
            <f a="event">
                <c path="com.knowledgeplayers.grar.event.ButtonActionEvent"/>
                <x path="Void"/>
            </f>
        </next>
        <boxIndex>
            <x path="Int"/>
        </boxIndex>
        <currentItem>
            <c path="com.knowledgeplayers.grar.structure.part.TextItem"/>
        </currentItem>
        <currentBox>
            <c path="com.knowledgeplayers.grar.structure.part.strip.pattern.BoxPattern"/>
        </currentBox>
        <boxesref>
            <c path="Array">
                <c path="String"/>
            </c>
        </boxesref>
        <new public="1" set="method" line="25">
            <f a="part">
                <c path="com.knowledgeplayers.grar.structure.part.strip.StripPart"/>
                <x path="Void"/>
            </f>
        </new>
        <haxe_doc>* Display for the strip parts, like a comic</haxe_doc>
    </class>
    <class path="com.knowledgeplayers.grar.display.style.KpTextDownElement" params=""
           file="/Users/jbrichardet/IdeaProjects/grar/com/knowledgeplayers/grar/display/style/KpTextDownElement.hx">
        <setBackground set="method" line="218">
            <f a="styleName:output">
                <c path="String"/>
                <t path="nme.display.Sprite"/>
                <x path="Void"/>
            </f>
        </setBackground>
        <setIcons set="method" line="194">
            <f a="content:styleName:output">
                <c path="String"/>
                <c path="String"/>
                <t path="nme.display.Sprite"/>
                <x path="Void"/>
            </f>
        </setIcons>
        <createTextField set="method" line="115">
            <f a="content:?styleName">
                <c path="String"/>
                <c path="String"/>
                <c path="com.knowledgeplayers.grar.display.text.StyledTextField"/>
            </f>
        </createTextField>
        <concatObjects set="method" line="92">
            <f a="container:objLeft:?objRight">
                <t path="nme.display.DisplayObjectContainer"/>
                <t path="nme.display.DisplayObject"/>
                <t path="nme.display.DisplayObject"/>
                <x path="Void"/>
            </f>
        </concatObjects>
        <toString public="1" set="method" line="85">
            <f a="">
                <c path="String"/>
            </f>
        </toString>
        <createSprite public="1" set="method" line="31">
            <f a="_width">
                <x path="Float"/>
                <t path="nme.display.Sprite"/>
            </f>
        </createSprite>
        <width>
            <x path="Float"/>
        </width>
        <lineWidth public="1">
            <x path="Float"/>
        </lineWidth>
        <numLines public="1">
            <x path="Int"/>
        </numLines>
        <lineHeight public="1">
            <x path="Float"/>
        </lineHeight>
        <bullet public="1">
            <c path="String"/>
        </bullet>
        <style public="1">
            <c path="String"/>
        </style>
        <content public="1">
            <c path="String"/>
        </content>
        <new public="1" set="method" line="25">
            <f a="">
                <x path="Void"/>
            </f>
        </new>
    </class>
    <class path="com.knowledgeplayers.grar.display.style.KpTextDownParser" params=""
           file="/Users/jbrichardet/IdeaProjects/grar/com/knowledgeplayers/grar/display/style/KpTextDownParser.hx">
        <parse public="1" set="method" line="13" static="1">
            <f a="text">
                <c path="String"/>
                <c path="Array">
                    <c path="com.knowledgeplayers.grar.display.style.KpTextDownElement"/>
                </c>
            </f>
            <haxe_doc>* Parse the string for MarkUp
                * @param text : text to parse
                * @return a sprite with well-formed text
            </haxe_doc>
        </parse>
        <parseLine set="method" line="32" static="1">
            <f a="line">
                <c path="String"/>
                <c path="com.knowledgeplayers.grar.display.style.KpTextDownElement"/>
            </f>
        </parseLine>
        <haxe_doc>* Parser for the KP MarkUp language</haxe_doc>
    </class>
    <class path="haxe.ds.StringMap" params="T" file="/usr/lib/haxe/std/flash/_std/haxe/ds/StringMap.hx">
        <implements path="IMap">
            <c path="String"/>
            <c path="haxe.ds.StringMap.T"/>
        </implements>
        <toString public="1" set="method" line="64">
            <f a="">
                <c path="String"/>
            </f>
            <haxe_doc>Returns an displayable representation of the hashtable content.</haxe_doc>
        </toString>
        <iterator public="1" set="method" line="55">
            <f a="">
                <t path="Iterator">
                    <c path="haxe.ds.StringMap.T"/>
                </t>
            </f>
            <haxe_doc>Returns an iterator of all values in the hashtable.</haxe_doc>
        </iterator>
        <keys public="1" set="method" line="51">
            <f a="">
                <t path="Iterator">
                    <c path="String"/>
                </t>
            </f>
            <haxe_doc>Returns an iterator of all keys in the hashtable.</haxe_doc>
        </keys>
        <remove public="1" set="method" line="44">
            <f a="key">
                <c path="String"/>
                <x path="Bool"/>
            </f>
            <haxe_doc>Removes a hashtable entry. Returns [true] if
                there was such entry.
            </haxe_doc>
        </remove>
        <exists public="1" set="method" line="40">
            <f a="key">
                <c path="String"/>
                <x path="Bool"/>
            </f>
            <haxe_doc>Tells if a value exists for the given key.
                In particular, it's useful to tells if a key has
                a [null] value versus no value.
            </haxe_doc>
        </exists>
        <get public="1" set="method" line="36">
            <f a="key">
                <c path="String"/>
                <t path="Null">
                    <c path="haxe.ds.StringMap.T"/>
                </t>
            </f>
            <haxe_doc>Get a value for the given key.</haxe_doc>
        </get>
        <set public="1" set="method" line="32">
            <f a="key:value">
                <c path="String"/>
                <c path="haxe.ds.StringMap.T"/>
                <x path="Void"/>
            </f>
            <haxe_doc>Set a value for the given key.</haxe_doc>
        </set>
        <h>
            <c path="flash.utils.Dictionary"/>
        </h>
        <new public="1" set="method" line="28">
            <f a="">
                <x path="Void"/>
            </f>
            <haxe_doc>Creates a new empty hashtable.</haxe_doc>
        </new>
        <haxe_doc>Hashtable over a set of elements, using [String] as keys.
            Other kind of keys are not possible on all platforms since they
            can't always be implemented efficiently.
        </haxe_doc>
        <meta>
            <m n=":keep"/>
            <m n=":coreApi"/>
        </meta>
    </class>
    <class path="com.knowledgeplayers.grar.display.style.Style" params=""
           file="/Users/jbrichardet/IdeaProjects/grar/com/knowledgeplayers/grar/display/style/Style.hx">
        <extends path="haxe.ds.StringMap">
            <c path="String"/>
        </extends>
        <getPadding public="1" set="method" line="207">
            <f a="">
                <c path="Array">
                    <x path="Float"/>
                </c>
            </f>
        </getPadding>
        <getAlignment public="1" set="method" line="186">
            <f a="">
                <d/>
            </f>
            <haxe_doc>* @return the alignment of the text</haxe_doc>
        </getAlignment>
        <getLeading public="1" set="method" line="161">
            <f a="">
                <c path="Array">
                    <x path="Float"/>
                </c>
            </f>
            <haxe_doc>* @return an array with line leading in 0 and paragraph leading in 1</haxe_doc>
        </getLeading>
        <getCase public="1" set="method" line="148">
            <f a="">
                <t path="Null">
                    <c path="String"/>
                </t>
            </f>
        </getCase>
        <getUnderline public="1" set="method" line="143">
            <f a="">
                <t path="Null">
                    <x path="Bool"/>
                </t>
            </f>
            <haxe_doc>* @return whether or not the style is underline</haxe_doc>
        </getUnderline>
        <getItalic public="1" set="method" line="134">
            <f a="">
                <t path="Null">
                    <x path="Bool"/>
                </t>
            </f>
            <haxe_doc>* @return whether or not the style is italic</haxe_doc>
        </getItalic>
        <getBold public="1" set="method" line="125">
            <f a="">
                <t path="Null">
                    <x path="Bool"/>
                </t>
            </f>
            <haxe_doc>* @return whether or not the style is bold</haxe_doc>
        </getBold>
        <getColor public="1" set="method" line="116">
            <f a="">
                <t path="Null">
                    <x path="Int"/>
                </t>
            </f>
            <haxe_doc>* @return the color of the style</haxe_doc>
        </getColor>
        <getSize public="1" set="method" line="107">
            <f a="">
                <t path="Null">
                    <x path="Int"/>
                </t>
            </f>
            <haxe_doc>* @return the size of the style</haxe_doc>
        </getSize>
        <getFont public="1" set="method" line="98">
            <f a="">
                <t path="Null">
                    <t path="nme.text.Font"/>
                </t>
            </f>
            <haxe_doc>* @return the font of the style</haxe_doc>
        </getFont>
        <setIconMargin public="1" set="method" line="71">
            <f a="string">
                <c path="String"/>
                <x path="Void"/>
            </f>
        </setIconMargin>
        <inherit public="1" set="method" line="62">
            <f a="parent">
                <c path="com.knowledgeplayers.grar.display.style.Style"/>
                <x path="Void"/>
            </f>
            <haxe_doc>* Make this style inherit from the parent style
                * @param parentName : Name of the parent style
            </haxe_doc>
        </inherit>
        <addRule public="1" set="method" line="52">
            <f a="name:value">
                <c path="String"/>
                <c path="String"/>
                <x path="Void"/>
            </f>
            <haxe_doc>* Add a rule to the style
                * @param name : Name of the rule
                * @param value : Value of the rule;
            </haxe_doc>
        </addRule>
        <iconMargin public="1" set="null">
            <c path="Array">
                <x path="Float"/>
            </c>
            <haxe_doc>* Margin around the icon</haxe_doc>
        </iconMargin>
        <background public="1">
            <t path="nme.display.Bitmap"/>
            <haxe_doc>* Background propertie</haxe_doc>
        </background>
        <iconResize public="1">
            <x path="Bool"/>
            <haxe_doc>* Wheter or not the icon must be resized</haxe_doc>
        </iconResize>
        <iconPosition public="1">
            <c path="String"/>
            <haxe_doc>* Position of the icon</haxe_doc>
        </iconPosition>
        <icon public="1">
            <t path="nme.display.BitmapData"/>
            <haxe_doc>* Icon in the style</haxe_doc>
        </icon>
        <name public="1">
            <c path="String"/>
            <haxe_doc>* Name of the style</haxe_doc>
        </name>
        <new public="1" set="method" line="15">
            <f a="">
                <x path="Void"/>
            </f>
        </new>
        <haxe_doc>* Style of a text</haxe_doc>
    </class>
    <typedef path="com.knowledgeplayers.grar.display.style.StyleSheet" params=""
             file="/Users/jbrichardet/IdeaProjects/grar/com/knowledgeplayers/grar/display/style/StyleParser.hx"
             module="com.knowledgeplayers.grar.display.style.StyleParser">
        <x path="Map">
            <c path="String"/>
            <c path="com.knowledgeplayers.grar.display.style.Style"/>
        </x>
    </typedef>
    <class path="com.knowledgeplayers.grar.display.style.StyleParser" params=""
           file="/Users/jbrichardet/IdeaProjects/grar/com/knowledgeplayers/grar/display/style/StyleParser.hx">
        <currentStyleSheet public="1" static="1">
            <c path="String"/>
            <haxe_doc>* Path to the current style sheet</haxe_doc>
        </currentStyleSheet>
        <currentLocale public="1" static="1">
            <c path="String"/>
            <haxe_doc>* Current locale of the app</haxe_doc>
        </currentLocale>
        <styles line="25" static="1">
            <x path="Map">
                <c path="String"/>
                <x path="Map">
                    <c path="String"/>
                    <t path="com.knowledgeplayers.grar.display.style.StyleSheet"/>
                </x>
            </x>
        </styles>
        <parse public="1" set="method" line="32" static="1">
            <f a="xmlContent">
                <c path="Xml"/>
                <x path="Void"/>
            </f>
            <haxe_doc>* Parse the style file
                * @param xmlContent : content of the style file
            </haxe_doc>
        </parse>
        <getStyle public="1" set="method" line="78" static="1">
            <f a="?name">
                <c path="String"/>
                <t path="Null">
                    <c path="com.knowledgeplayers.grar.display.style.Style"/>
                </t>
            </f>
            <haxe_doc>* Get a style by its name. The style file must have been parsed first!
                * @param name : Name of the style
                * @return the style, or null if it doesn't exist
            </haxe_doc>
        </getStyle>
        <haxe_doc>* Parser and manager of the styles</haxe_doc>
    </class>
    <class path="flash.text.TextField" params="" file="/usr/lib/haxe/std/flash/text/TextField.hx" extern="1">
        <extends path="flash.display.InteractiveObject"/>
        <isFontCompatible public="1" set="method" static="1">
            <f a="fontName:fontStyle">
                <c path="String"/>
                <c path="String"/>
                <x path="Bool"/>
            </f>
            <meta>
                <m n=":require">
                    <e>flash10</e>
                </m>
            </meta>
        </isFontCompatible>
        <setTextFormat public="1" set="method">
            <f a="format:?beginIndex:?endIndex">
                <c path="flash.text.TextFormat"/>
                <x path="Int"/>
                <x path="Int"/>
                <x path="Void"/>
            </f>
        </setTextFormat>
        <setSelection public="1" set="method">
            <f a="beginIndex:endIndex">
                <x path="Int"/>
                <x path="Int"/>
                <x path="Void"/>
            </f>
        </setSelection>
        <replaceText public="1" set="method">
            <f a="beginIndex:endIndex:newText">
                <x path="Int"/>
                <x path="Int"/>
                <c path="String"/>
                <x path="Void"/>
            </f>
        </replaceText>
        <replaceSelectedText public="1" set="method">
            <f a="value">
                <c path="String"/>
                <x path="Void"/>
            </f>
        </replaceSelectedText>
        <pasteRichText public="1" set="method">
            <f a="richText">
                <c path="String"/>
                <x path="Bool"/>
            </f>
        </pasteRichText>
        <insertXMLText public="1" set="method">
            <f a="beginIndex:endIndex:richText:?pasting">
                <x path="Int"/>
                <x path="Int"/>
                <c path="String"/>
                <x path="Bool"/>
                <x path="Void"/>
            </f>
        </insertXMLText>
        <getXMLText public="1" set="method">
            <f a="?beginIndex:?endIndex">
                <x path="Int"/>
                <x path="Int"/>
                <c path="String"/>
            </f>
        </getXMLText>
        <getTextRuns public="1" set="method">
            <f a="?beginIndex:?endIndex">
                <x path="Int"/>
                <x path="Int"/>
                <c path="Array">
                    <d/>
                </c>
            </f>
        </getTextRuns>
        <getTextFormat public="1" set="method">
            <f a="?beginIndex:?endIndex">
                <x path="Int"/>
                <x path="Int"/>
                <c path="flash.text.TextFormat"/>
            </f>
        </getTextFormat>
        <getRawText public="1" set="method">
            <f a="">
                <c path="String"/>
            </f>
        </getRawText>
        <getParagraphLength public="1" set="method">
            <f a="charIndex">
                <x path="Int"/>
                <x path="Int"/>
            </f>
        </getParagraphLength>
        <getLineText public="1" set="method">
            <f a="lineIndex">
                <x path="Int"/>
                <c path="String"/>
            </f>
        </getLineText>
        <getLineOffset public="1" set="method">
            <f a="lineIndex">
                <x path="Int"/>
                <x path="Int"/>
            </f>
        </getLineOffset>
        <getLineMetrics public="1" set="method">
            <f a="lineIndex">
                <x path="Int"/>
                <c path="flash.text.TextLineMetrics"/>
            </f>
        </getLineMetrics>
        <getLineLength public="1" set="method">
            <f a="lineIndex">
                <x path="Int"/>
                <x path="Int"/>
            </f>
        </getLineLength>
        <getLineIndexOfChar public="1" set="method">
            <f a="charIndex">
                <x path="Int"/>
                <x path="Int"/>
            </f>
        </getLineIndexOfChar>
        <getLineIndexAtPoint public="1" set="method">
            <f a="x:y">
                <x path="Float"/>
                <x path="Float"/>
                <x path="Int"/>
            </f>
        </getLineIndexAtPoint>
        <getImageReference public="1" set="method">
            <f a="id">
                <c path="String"/>
                <c path="flash.display.DisplayObject"/>
            </f>
        </getImageReference>
        <getFirstCharInParagraph public="1" set="method">
            <f a="charIndex">
                <x path="Int"/>
                <x path="Int"/>
            </f>
        </getFirstCharInParagraph>
        <getCharIndexAtPoint public="1" set="method">
            <f a="x:y">
                <x path="Float"/>
                <x path="Float"/>
                <x path="Int"/>
            </f>
        </getCharIndexAtPoint>
        <getCharBoundaries public="1" set="method">
            <f a="charIndex">
                <x path="Int"/>
                <c path="flash.geom.Rectangle"/>
            </f>
        </getCharBoundaries>
        <copyRichText public="1" set="method">
            <f a="">
                <c path="String"/>
            </f>
        </copyRichText>
        <appendText public="1" set="method">
            <f a="newText">
                <c path="String"/>
                <x path="Void"/>
            </f>
        </appendText>
        <wordWrap public="1">
            <x path="Bool"/>
        </wordWrap>
        <useRichTextClipboard public="1">
            <x path="Bool"/>
        </useRichTextClipboard>
        <type public="1">
            <e path="flash.text.TextFieldType"/>
        </type>
        <thickness public="1">
            <x path="Float"/>
        </thickness>
        <textWidth public="1" set="null">
            <x path="Float"/>
        </textWidth>
        <textInteractionMode public="1" set="null">
            <e path="flash.text.TextInteractionMode"/>
            <meta>
                <m n=":require">
                    <e>flash11</e>
                </m>
            </meta>
        </textInteractionMode>
        <textHeight public="1" set="null">
            <x path="Float"/>
        </textHeight>
        <textColor public="1">
            <x path="UInt"/>
        </textColor>
        <text public="1">
            <c path="String"/>
        </text>
        <styleSheet public="1">
            <c path="flash.text.StyleSheet"/>
        </styleSheet>
        <sharpness public="1">
            <x path="Float"/>
        </sharpness>
        <selectionEndIndex public="1" set="null">
            <x path="Int"/>
        </selectionEndIndex>
        <selectionBeginIndex public="1" set="null">
            <x path="Int"/>
        </selectionBeginIndex>
        <selectedText public="1" set="null">
            <c path="String"/>
        </selectedText>
        <selectable public="1">
            <x path="Bool"/>
        </selectable>
        <scrollV public="1">
            <x path="Int"/>
        </scrollV>
        <scrollH public="1">
            <x path="Int"/>
        </scrollH>
        <restrict public="1">
            <c path="String"/>
        </restrict>
        <numLines public="1" set="null">
            <x path="Int"/>
        </numLines>
        <multiline public="1">
            <x path="Bool"/>
        </multiline>
        <mouseWheelEnabled public="1">
            <x path="Bool"/>
        </mouseWheelEnabled>
        <maxScrollV public="1" set="null">
            <x path="Int"/>
        </maxScrollV>
        <maxScrollH public="1" set="null">
            <x path="Int"/>
        </maxScrollH>
        <maxChars public="1">
            <x path="Int"/>
        </maxChars>
        <length public="1" set="null">
            <x path="Int"/>
        </length>
        <htmlText public="1">
            <c path="String"/>
        </htmlText>
        <gridFitType public="1">
            <e path="flash.text.GridFitType"/>
        </gridFitType>
        <embedFonts public="1">
            <x path="Bool"/>
        </embedFonts>
        <displayAsPassword public="1">
            <x path="Bool"/>
        </displayAsPassword>
        <defaultTextFormat public="1">
            <c path="flash.text.TextFormat"/>
        </defaultTextFormat>
        <condenseWhite public="1">
            <x path="Bool"/>
        </condenseWhite>
        <caretIndex public="1" set="null">
            <x path="Int"/>
        </caretIndex>
        <bottomScrollV public="1" set="null">
            <x path="Int"/>
        </bottomScrollV>
        <borderColor public="1">
            <x path="UInt"/>
        </borderColor>
        <border public="1">
            <x path="Bool"/>
        </border>
        <backgroundColor public="1">
            <x path="UInt"/>
        </backgroundColor>
        <background public="1">
            <x path="Bool"/>
        </background>
        <autoSize public="1">
            <e path="flash.text.TextFieldAutoSize"/>
        </autoSize>
        <antiAliasType public="1">
            <e path="flash.text.AntiAliasType"/>
        </antiAliasType>
        <alwaysShowSelection public="1">
            <x path="Bool"/>
        </alwaysShowSelection>
        <new public="1" set="method">
            <f a="">
                <x path="Void"/>
            </f>
        </new>
    </class>
    <class path="com.knowledgeplayers.grar.display.text.StyledTextField" params=""
           file="/Users/jbrichardet/IdeaProjects/grar/com/knowledgeplayers/grar/display/text/StyledTextField.hx">
        <extends path="flash.text.TextField"/>
        <applyStyle set="method" line="66">
            <f a="style:?startIndex:?endIndex">
                <c path="com.knowledgeplayers.grar.display.style.Style"/>
                <x path="Int"/>
                <x path="Int"/>
                <x path="Void"/>
            </f>
        </applyStyle>
        <setPartialStyle public="1" set="method" line="59">
            <f a="style:startIndex:endIndex">
                <c path="com.knowledgeplayers.grar.display.style.Style"/>
                <x path="Int"/>
                <x path="Int"/>
                <x path="Void"/>
            </f>
            <haxe_doc>* Set a style between bounds
                * @param style : Style to set
                * @param startIndex : First affected char
                * @param endIndex : Last affected char
            </haxe_doc>
        </setPartialStyle>
        <set_style public="1" set="method" line="43">
            <f a="style">
                <c path="com.knowledgeplayers.grar.display.style.Style"/>
                <c path="com.knowledgeplayers.grar.display.style.Style"/>
            </f>
            <haxe_doc>* Set the style of the text
                * @param style : Style to set
                * @return the style
            </haxe_doc>
        </set_style>
        <style public="1" set="accessor">
            <c path="com.knowledgeplayers.grar.display.style.Style"/>
            <haxe_doc>* Style of the text</haxe_doc>
        </style>
        <new public="1" set="method" line="22">
            <f a="?style">
                <c path="com.knowledgeplayers.grar.display.style.Style"/>
                <x path="Void"/>
            </f>
            <haxe_doc>* Constructor
                * @param style : Style of the text
            </haxe_doc>
        </new>
        <haxe_doc>* Textfield with embedded style</haxe_doc>
    </class>
    <class path="com.knowledgeplayers.grar.display.text.UrlField" params=""
           file="/Users/jbrichardet/IdeaProjects/grar/com/knowledgeplayers/grar/display/text/UrlField.hx">
        <extends path="flash.display.Sprite"/>
        <onClick set="method" line="38">
            <f a="e">
                <t path="nme.events.MouseEvent"/>
                <x path="Void"/>
            </f>
        </onClick>
        <textField>
            <c path="com.knowledgeplayers.grar.display.text.StyledTextField"/>
        </textField>
        <url public="1">
            <c path="String"/>
            <haxe_doc>* Url targeted by the field</haxe_doc>
        </url>
        <new public="1" set="method" line="26">
            <f a="url:?text">
                <c path="String"/>
                <c path="String"/>
                <x path="Void"/>
            </f>
            <haxe_doc>* Constructor
                * @param url : URL to target
                * @param text : text to display instead of the URL
            </haxe_doc>
        </new>
        <haxe_doc>* Url Filed</haxe_doc>
    </class>
    <class path="flash.events.Event" params="" file="/usr/lib/haxe/std/flash/events/Event.hx" extern="1">
        <ACTIVATE public="1" static="1">
            <c path="String"/>
        </ACTIVATE>
        <ADDED public="1" static="1">
            <c path="String"/>
        </ADDED>
        <ADDED_TO_STAGE public="1" static="1">
            <c path="String"/>
        </ADDED_TO_STAGE>
        <CANCEL public="1" static="1">
            <c path="String"/>
        </CANCEL>
        <CHANGE public="1" static="1">
            <c path="String"/>
        </CHANGE>
        <CHANNEL_MESSAGE public="1" static="1">
            <c path="String"/>
        </CHANNEL_MESSAGE>
        <CHANNEL_STATE public="1" static="1">
            <c path="String"/>
        </CHANNEL_STATE>
        <CLEAR public="1" static="1">
            <c path="String"/>
            <meta>
                <m n=":require">
                    <e>flash10</e>
                </m>
            </meta>
        </CLEAR>
        <CLOSE public="1" static="1">
            <c path="String"/>
        </CLOSE>
        <COMPLETE public="1" static="1">
            <c path="String"/>
        </COMPLETE>
        <CONNECT public="1" static="1">
            <c path="String"/>
        </CONNECT>
        <CONTEXT3D_CREATE public="1" static="1">
            <c path="String"/>
            <meta>
                <m n=":require">
                    <e>flash11</e>
                </m>
            </meta>
        </CONTEXT3D_CREATE>
        <COPY public="1" static="1">
            <c path="String"/>
            <meta>
                <m n=":require">
                    <e>flash10</e>
                </m>
            </meta>
        </COPY>
        <CUT public="1" static="1">
            <c path="String"/>
            <meta>
                <m n=":require">
                    <e>flash10</e>
                </m>
            </meta>
        </CUT>
        <DEACTIVATE public="1" static="1">
            <c path="String"/>
        </DEACTIVATE>
        <ENTER_FRAME public="1" static="1">
            <c path="String"/>
        </ENTER_FRAME>
        <EXIT_FRAME public="1" static="1">
            <c path="String"/>
            <meta>
                <m n=":require">
                    <e>flash10</e>
                </m>
            </meta>
        </EXIT_FRAME>
        <FRAME_CONSTRUCTED public="1" static="1">
            <c path="String"/>
            <meta>
                <m n=":require">
                    <e>flash10</e>
                </m>
            </meta>
        </FRAME_CONSTRUCTED>
        <FULLSCREEN public="1" static="1">
            <c path="String"/>
        </FULLSCREEN>
        <ID3 public="1" static="1">
            <c path="String"/>
        </ID3>
        <INIT public="1" static="1">
            <c path="String"/>
        </INIT>
        <MOUSE_LEAVE public="1" static="1">
            <c path="String"/>
        </MOUSE_LEAVE>
        <OPEN public="1" static="1">
            <c path="String"/>
        </OPEN>
        <PASTE public="1" static="1">
            <c path="String"/>
            <meta>
                <m n=":require">
                    <e>flash10</e>
                </m>
            </meta>
        </PASTE>
        <REMOVED public="1" static="1">
            <c path="String"/>
        </REMOVED>
        <REMOVED_FROM_STAGE public="1" static="1">
            <c path="String"/>
        </REMOVED_FROM_STAGE>
        <RENDER public="1" static="1">
            <c path="String"/>
        </RENDER>
        <RESIZE public="1" static="1">
            <c path="String"/>
        </RESIZE>
        <SCROLL public="1" static="1">
            <c path="String"/>
        </SCROLL>
        <SELECT public="1" static="1">
            <c path="String"/>
        </SELECT>
        <SELECT_ALL public="1" static="1">
            <c path="String"/>
            <meta>
                <m n=":require">
                    <e>flash10</e>
                </m>
            </meta>
        </SELECT_ALL>
        <SOUND_COMPLETE public="1" static="1">
            <c path="String"/>
        </SOUND_COMPLETE>
        <TAB_CHILDREN_CHANGE public="1" static="1">
            <c path="String"/>
        </TAB_CHILDREN_CHANGE>
        <TAB_ENABLED_CHANGE public="1" static="1">
            <c path="String"/>
        </TAB_ENABLED_CHANGE>
        <TAB_INDEX_CHANGE public="1" static="1">
            <c path="String"/>
        </TAB_INDEX_CHANGE>
        <TEXT_INTERACTION_MODE_CHANGE public="1" static="1">
            <c path="String"/>
            <meta>
                <m n=":require">
                    <e>flash11</e>
                </m>
            </meta>
        </TEXT_INTERACTION_MODE_CHANGE>
        <UNLOAD public="1" static="1">
            <c path="String"/>
        </UNLOAD>
        <VIDEO_FRAME public="1" static="1">
            <c path="String"/>
        </VIDEO_FRAME>
        <WORKER_STATE public="1" static="1">
            <c path="String"/>
        </WORKER_STATE>
        <toString public="1" set="method">
            <f a="">
                <c path="String"/>
            </f>
        </toString>
        <stopPropagation public="1" set="method">
            <f a="">
                <x path="Void"/>
            </f>
        </stopPropagation>
        <stopImmediatePropagation public="1" set="method">
            <f a="">
                <x path="Void"/>
            </f>
        </stopImmediatePropagation>
        <preventDefault public="1" set="method">
            <f a="">
                <x path="Void"/>
            </f>
        </preventDefault>
        <isDefaultPrevented public="1" set="method">
            <f a="">
                <x path="Bool"/>
            </f>
        </isDefaultPrevented>
        <formatToString public="1" set="method">
            <f a="className:?p1:?p2:?p3:?p4:?p5">
                <c path="String"/>
                <d/>
                <d/>
                <d/>
                <d/>
                <d/>
                <c path="String"/>
            </f>
        </formatToString>
        <clone public="1" set="method">
            <f a="">
                <c path="flash.events.Event"/>
            </f>
        </clone>
        <type public="1" set="null">
            <c path="String"/>
        </type>
        <target public="1" set="null">
            <d/>
        </target>
        <eventPhase public="1" set="null">
            <e path="flash.events.EventPhase"/>
        </eventPhase>
        <currentTarget public="1" set="null">
            <d/>
        </currentTarget>
        <cancelable public="1" set="null">
            <x path="Bool"/>
        </cancelable>
        <bubbles public="1" set="null">
            <x path="Bool"/>
        </bubbles>
        <new public="1" set="method">
            <f a="type:?bubbles:?cancelable">
                <c path="String"/>
                <x path="Bool"/>
                <x path="Bool"/>
                <x path="Void"/>
            </f>
        </new>
    </class>
    <class path="com.knowledgeplayers.grar.event.ButtonActionEvent" params=""
           file="/Users/jbrichardet/IdeaProjects/grar/com/knowledgeplayers/grar/event/ButtonActionEvent.hx">
        <extends path="flash.events.Event"/>
        <NEXT public="1" set="null" line="13" static="1">
            <c path="String"/>
            <haxe_doc>* Move to the next item</haxe_doc>
        </NEXT>
        <GOTO public="1" set="null" line="18" static="1">
            <c path="String"/>
            <haxe_doc>* Move to a specific pattern</haxe_doc>
        </GOTO>
        <new public="1" set="method" line="20">
            <f a="type:?bubbles:?cancelable">
                <c path="String"/>
                <x path="Bool"/>
                <x path="Bool"/>
                <x path="Void"/>
            </f>
        </new>
        <haxe_doc>* Event for the buttons
            * @author jbrichardet
        </haxe_doc>
    </class>
    <class path="com.knowledgeplayers.grar.event.GameEvent" params=""
           file="/Users/jbrichardet/IdeaProjects/grar/com/knowledgeplayers/grar/event/GameEvent.hx">
        <extends path="flash.events.Event"/>
        <GAME_OVER public="1" set="null" line="12" static="1">
            <c path="String"/>
            <haxe_doc>* The game is over</haxe_doc>
        </GAME_OVER>
        <new public="1" set="method" line="14">
            <f a="type:?bubbles:?cancelable">
                <c path="String"/>
                <x path="Bool"/>
                <x path="Bool"/>
                <x path="Void"/>
            </f>
        </new>
        <haxe_doc>* Events of the game</haxe_doc>
    </class>
    <class path="com.knowledgeplayers.grar.event.LayoutEvent" params=""
           file="/Users/jbrichardet/IdeaProjects/grar/com/knowledgeplayers/grar/event/LayoutEvent.hx">
        <extends path="flash.events.Event"/>
        <NEW_ZONE public="1" set="null" line="13" static="1">
            <c path="String"/>
            <haxe_doc>* Move to the next item</haxe_doc>
        </NEW_ZONE>
        <clone public="1" set="method" line="32" override="1">
            <f a="">
                <t path="nme.events.Event"/>
            </f>
        </clone>
        <zone public="1">
            <c path="com.knowledgeplayers.grar.display.layout.Zone"/>
            <haxe_doc>* Zone which dispatched the event</haxe_doc>
        </zone>
        <ref public="1">
            <c path="String"/>
            <haxe_doc>* Reference of the zone which dispatched the event</haxe_doc>
        </ref>
        <new public="1" set="method" line="25">
            <f a="type:_ref:_zone:?bubbles:?cancelable">
                <c path="String"/>
                <c path="String"/>
                <c path="com.knowledgeplayers.grar.display.layout.Zone"/>
                <x path="Bool"/>
                <x path="Bool"/>
                <x path="Void"/>
            </f>
        </new>
        <haxe_doc>* Event for the layouts</haxe_doc>
    </class>
    <class path="com.knowledgeplayers.grar.event.PartEvent" params=""
           file="/Users/jbrichardet/IdeaProjects/grar/com/knowledgeplayers/grar/event/PartEvent.hx">
        <extends path="flash.events.Event"/>
        <ENTER_PART public="1" set="null" line="13" static="1">
            <c path="String"/>
            <haxe_doc>* Enter the part</haxe_doc>
        </ENTER_PART>
        <ENTER_SUB_PART public="1" set="null" line="18" static="1">
            <c path="String"/>
            <haxe_doc>* Enter a sub-part</haxe_doc>
        </ENTER_SUB_PART>
        <EXIT_PART public="1" set="null" line="23" static="1">
            <c path="String"/>
            <haxe_doc>* Exit the part</haxe_doc>
        </EXIT_PART>
        <PART_LOADED public="1" set="null" line="28" static="1">
            <c path="String"/>
            <haxe_doc>* The part is fully loaded</haxe_doc>
        </PART_LOADED>
        <set_part public="1" set="method" line="45">
            <f a="part">
                <c path="com.knowledgeplayers.grar.structure.part.Part"/>
                <c path="com.knowledgeplayers.grar.structure.part.Part"/>
            </f>
        </set_part>
        <partId public="1">
            <c path="String"/>
            <haxe_doc>* Id of the part</haxe_doc>
        </partId>
        <part public="1" set="accessor">
            <c path="com.knowledgeplayers.grar.structure.part.Part"/>
            <haxe_doc>* Part concerned by the event</haxe_doc>
        </part>
        <new public="1" set="method" line="40">
            <f a="type:?bubbles:?cancelable">
                <c path="String"/>
                <x path="Bool"/>
                <x path="Bool"/>
                <x path="Void"/>
            </f>
        </new>
        <haxe_doc>* Part related event</haxe_doc>
    </class>
    <class path="com.knowledgeplayers.grar.event.TokenEvent" params=""
           file="/Users/jbrichardet/IdeaProjects/grar/com/knowledgeplayers/grar/event/TokenEvent.hx">
        <extends path="flash.events.Event"/>
        <ADD public="1" set="null" line="13" static="1">
            <c path="String"/>
            <haxe_doc>* Add token to the inventory</haxe_doc>
        </ADD>
        <clone public="1" set="method" line="27" override="1">
            <f a="">
                <t path="nme.events.Event"/>
            </f>
        </clone>
        <token public="1">
            <c path="com.knowledgeplayers.grar.structure.Token"/>
            <haxe_doc>* object Token</haxe_doc>
        </token>
        <new public="1" set="method" line="20">
            <f a="type:?_token:?bubbles:?cancelable">
                <c path="String"/>
                <c path="com.knowledgeplayers.grar.structure.Token"/>
                <x path="Bool"/>
                <x path="Bool"/>
                <x path="Void"/>
            </f>
        </new>
        <haxe_doc>* Token related event</haxe_doc>
    </class>
    <class path="com.knowledgeplayers.grar.factory.ActivityFactory" params=""
           file="/Users/jbrichardet/IdeaProjects/grar/com/knowledgeplayers/grar/factory/ActivityFactory.hx">
        <createActivity public="1" set="method" line="29" static="1">
            <f a="activityType:id:name:?content:?tokenRef:?tresholds:?perk:?container">
                <c path="String"/>
                <c path="String"/>
                <c path="String"/>
                <c path="String"/>
                <c path="String"/>
                <c path="Array">
                    <a>
                        <score>
                            <c path="String"/>
                        </score>
                        <next>
                            <c path="String"/>
                        </next>
                    </a>
                </c>
                <c path="String"/>
                <c path="com.knowledgeplayers.grar.structure.part.Part"/>
                <t path="Null">
                    <c path="com.knowledgeplayers.grar.structure.activity.Activity"/>
                </t>
            </f>
            <haxe_doc>* Create an activity
                * @param activityName : Name of the activity, define the type of the creation
                * @param content : Path to a content file for the creation
                * @return an newly created activity, or null if the given name doesn't correspond to a valid type
            </haxe_doc>
        </createActivity>
        <createActivityFromXml public="1" set="method" line="60" static="1">
            <f a="xml:?container">
                <c path="haxe.xml.Fast"/>
                <c path="com.knowledgeplayers.grar.structure.part.Part"/>
                <t path="Null">
                    <c path="com.knowledgeplayers.grar.structure.activity.Activity"/>
                </t>
            </f>
            <haxe_doc>* Create an activity from XML infos
                * @param xml : fast xml node with structure infos
                * @return an newly created activity, or null if the given name doesn't correspond to a valid type
            </haxe_doc>
        </createActivityFromXml>
        <new set="method" line="17">
            <f a="">
                <x path="Void"/>
            </f>
        </new>
        <haxe_doc>* Factory for activities creation</haxe_doc>
    </class>
    <class path="com.knowledgeplayers.grar.factory.DisplayFactory" params=""
           file="/Users/jbrichardet/IdeaProjects/grar/com/knowledgeplayers/grar/factory/DisplayFactory.hx">
        <createPartDisplay public="1" set="method" line="25" static="1">
            <f a="part">
                <c path="com.knowledgeplayers.grar.structure.part.Part"/>
                <t path="Null">
                    <c path="com.knowledgeplayers.grar.display.part.PartDisplay"/>
                </t>
            </f>
            <haxe_doc>* Create a display for a part
                * @param part : Part to display
                * @return the corresponding PartDisplay
            </haxe_doc>
        </createPartDisplay>
        <new set="method" line="15">
            <f a="">
                <x path="Void"/>
            </f>
        </new>
        <haxe_doc>* Factory to create displays</haxe_doc>
    </class>
    <class path="com.knowledgeplayers.grar.factory.ItemFactory" params=""
           file="/Users/jbrichardet/IdeaProjects/grar/com/knowledgeplayers/grar/factory/ItemFactory.hx">
        <createItem public="1" set="method" line="26" static="1">
            <f a="itemType:?xml">
                <c path="String"/>
                <c path="haxe.xml.Fast"/>
                <t path="Null">
                    <c path="com.knowledgeplayers.grar.structure.part.TextItem"/>
                </t>
            </f>
            <haxe_doc>* Create an item
                * @param itemType : Type of the item
                * @param xml : Fast xml node with infos
                * @return an item, or null if the type is not supported
            </haxe_doc>
        </createItem>
        <createItemFromXml public="1" set="method" line="44" static="1">
            <f a="xml">
                <c path="haxe.xml.Fast"/>
                <t path="Null">
                    <c path="com.knowledgeplayers.grar.structure.part.TextItem"/>
                </t>
            </f>
            <haxe_doc>* Create an item from XML infos
                * @param xml : Fast xml node with infos
                * @return an item, or null if the type is not supported
            </haxe_doc>
        </createItemFromXml>
        <new set="method" line="14">
            <f a="">
                <x path="Void"/>
            </f>
        </new>
        <haxe_doc>* Factory to create dialog items
            * @author jbrichardet
        </haxe_doc>
    </class>
    <class path="com.knowledgeplayers.grar.factory.PartFactory" params=""
           file="/Users/jbrichardet/IdeaProjects/grar/com/knowledgeplayers/grar/factory/PartFactory.hx">
        <createPart public="1" set="method" line="25" static="1">
            <f a="partType">
                <c path="String"/>
                <t path="Null">
                    <c path="com.knowledgeplayers.grar.structure.part.Part"/>
                </t>
            </f>
            <haxe_doc>* Create a part
                * @param partType : Type of the part
                * @return the part, or null if the type is not supported
            </haxe_doc>
        </createPart>
        <createPartFromXml public="1" set="method" line="44" static="1">
            <f a="xml">
                <c path="haxe.xml.Fast"/>
                <t path="Null">
                    <c path="com.knowledgeplayers.grar.structure.part.Part"/>
                </t>
            </f>
            <haxe_doc>* Create a part from XML infos
                * @param xml : Fast XML node with info
                * @return the part, or null if the type is not supported
            </haxe_doc>
        </createPartFromXml>
        <new set="method" line="14">
            <f a="">
                <x path="Void"/>
            </f>
        </new>
        <haxe_doc>* Factory to create parts</haxe_doc>
    </class>
    <class path="com.knowledgeplayers.grar.factory.PatternFactory" params=""
           file="/Users/jbrichardet/IdeaProjects/grar/com/knowledgeplayers/grar/factory/PatternFactory.hx">
        <createPattern public="1" set="method" line="28" static="1">
            <f a="patternType:patternName">
                <c path="String"/>
                <c path="String"/>
                <t path="Null">
                    <c path="com.knowledgeplayers.grar.structure.part.Pattern"/>
                </t>
            </f>
            <haxe_doc>* Create a pattern
                * @param patternType : Type of the pattern
                * @param patternName : Name of the pattern
                * @return the pattern or null if the type is not supported
            </haxe_doc>
        </createPattern>
        <createPatternFromXml public="1" set="method" line="49" static="1">
            <f a="xml">
                <c path="haxe.xml.Fast"/>
                <t path="Null">
                    <c path="com.knowledgeplayers.grar.structure.part.Pattern"/>
                </t>
            </f>
            <haxe_doc>* Create a pattern from XML infos
                * @param xml : fast XML node with infos
                * @param patternName : Name of the pattern
                * @return the pattern or null if the type is not supported
            </haxe_doc>
        </createPatternFromXml>
        <new set="method" line="16">
            <f a="">
                <x path="Void"/>
            </f>
        </new>
        <haxe_doc>* Factory to create dialog pattern
            * @author jbrichardet
        </haxe_doc>
    </class>
    <class path="com.knowledgeplayers.grar.factory.UiFactory" params=""
           file="/Users/jbrichardet/IdeaProjects/grar/com/knowledgeplayers/grar/factory/UiFactory.hx">
        <tilesheet public="1" set="null" static="1">
            <c path="aze.display.TilesheetEx"/>
            <haxe_doc>* Tilesheet containing UI elements</haxe_doc>
        </tilesheet>
        <layerPath static="1">
            <c path="String"/>
        </layerPath>
        <createButton public="1" set="method" line="40" static="1">
            <f a="ref:?x:?y:states:?action:?transitionIn:?transitionOut">
                <c path="String"/>
                <x path="Float"/>
                <x path="Float"/>
                <x path="Map">
                    <c path="String"/>
                    <x path="Map">
                        <c path="String"/>
                        <a>
                            <z>
                                <x path="Int"/>
                            </z>
                            <trans>
                                <c path="String"/>
                            </trans>
                            <dpo>
                                <t path="nme.display.DisplayObject"/>
                            </dpo>
                        </a>
                    </x>
                </x>
                <c path="String"/>
                <c path="String"/>
                <c path="String"/>
                <c path="com.knowledgeplayers.grar.display.component.button.DefaultButton"/>
            </f>
            <haxe_doc>* Create a button
                * @param buttonType : Type of the button
                * @param tile : Tile containing the button icon
                * @param action : Event to dispatch when the button is clicked. No effects for DefaultButton type
                * @return the created button
            </haxe_doc>
        </createButton>
        <createScrollBar public="1" set="method" line="63" static="1">
            <f a="width:height:ratio:tileBackground:tileCursor">
                <x path="Float"/>
                <x path="Float"/>
                <x path="Float"/>
                <c path="String"/>
                <c path="String"/>
                <c path="com.knowledgeplayers.grar.display.component.ScrollBar"/>
            </f>
            <haxe_doc>* Create a scrollbar
                * @param width : Width of the scrollbar
                * @param height : Height of the scrollbar
                * @param ratio : Ratio of the cursor
                * @param tileBackground : Tile containing background image
                * @param tileCursor : Tile containing cursor image
                * @return the fresh new scrollbar
            </haxe_doc>
        </createScrollBar>
        <createButtonFromXml public="1" set="method" line="74" static="1">
            <f a="xml">
                <c path="haxe.xml.Fast"/>
                <c path="com.knowledgeplayers.grar.display.component.button.DefaultButton"/>
            </f>
            <haxe_doc>* Create a button from XML infos
                * @param xml : fast xml node with infos
                * @return the button
            </haxe_doc>
        </createButtonFromXml>
        <createStates set="method" line="104" static="1">
            <f a="node">
                <c path="haxe.xml.Fast"/>
                <x path="Map">
                    <c path="String"/>
                    <a>
                        <z>
                            <x path="Int"/>
                        </z>
                        <trans>
                            <c path="String"/>
                        </trans>
                        <dpo>
                            <t path="nme.display.DisplayObject"/>
                        </dpo>
                    </a>
                </x>
            </f>
        </createStates>
        <createAnimationFromXml public="1" set="method" line="136" static="1">
            <f a="xml">
                <c path="haxe.xml.Fast"/>
                <c path="com.knowledgeplayers.grar.display.element.AnimationDisplay"/>
            </f>
            <haxe_doc>* Create an animation from an XML descriptor
                * @param xml : Fast descriptor
                * @return a AnimationDisplay (sprite)
            </haxe_doc>
        </createAnimationFromXml>
        <createImageFromXml public="1" set="method" line="158" static="1">
            <f a="xml:layer">
                <c path="haxe.xml.Fast"/>
                <c path="aze.display.TileLayer"/>
                <c path="aze.display.TileSprite"/>
            </f>
            <haxe_doc>* Create a tilesprite from an XML descriptor
                * @param xml : Fast descriptor
                * @return a tilesprite
            </haxe_doc>
        </createImageFromXml>
        <createTextFromXml public="1" set="method" line="177" static="1">
            <f a="textNode:?spritesheets">
                <c path="haxe.xml.Fast"/>
                <x path="Map">
                    <c path="String"/>
                    <c path="aze.display.TilesheetEx"/>
                </x>
                <c path="com.knowledgeplayers.grar.display.component.container.ScrollPanel"/>
            </f>
            <haxe_doc>* Create a textfield from an XML descriptor
                * @param xml : Fast descriptor
                * @return a textfield
            </haxe_doc>
        </createTextFromXml>
        <createSpriteFormXml public="1" set="method" line="209" static="1">
            <f a="xml">
                <c path="haxe.xml.Fast"/>
                <t path="nme.display.Sprite"/>
            </f>
            <haxe_doc>* Create a sprite from an XML descriptor
                * @param xml : Fast descriptor
                * @return a sprite
            </haxe_doc>
        </createSpriteFormXml>
        <setSpriteSheet public="1" set="method" line="233" static="1">
            <f a="id">
                <c path="String"/>
                <x path="Void"/>
            </f>
            <haxe_doc>* Set the spritesheet file containing all the UI images
                * @param id : ID of the Spritesheet in the assets
            </haxe_doc>
        </setSpriteSheet>
        <new set="method" line="29">
            <f a="">
                <x path="Void"/>
            </f>
        </new>
        <haxe_doc>* Factory to create UI components</haxe_doc>
    </class>
    <class path="com.knowledgeplayers.grar.localisation.Localisation" params=""
           file="/Users/jbrichardet/IdeaProjects/grar/com/knowledgeplayers/grar/localisation/Localisation.hx">
        <extends path="flash.events.EventDispatcher"/>
        <parseExcelContent set="method" line="71">
            <f a="content">
                <c path="Xml"/>
                <x path="Void"/>
            </f>
        </parseExcelContent>
        <parseXmlContent set="method" line="61">
            <f a="content">
                <c path="Xml"/>
                <x path="Void"/>
            </f>
        </parseXmlContent>
        <parseContent set="method" line="53">
            <f a="content">
                <c path="Xml"/>
                <x path="Void"/>
            </f>
        </parseContent>
        <getItem public="1" set="method" line="48">
            <f a="key">
                <c path="String"/>
                <c path="String"/>
            </f>
            <haxe_doc>* Get the localised text for an item
                * @param key : key of the item
                * @return the localised text
            </haxe_doc>
        </getItem>
        <setLocaleFile public="1" set="method" line="37">
            <f a="path">
                <c path="String"/>
                <x path="Void"/>
            </f>
            <haxe_doc>* Set the path to the file for this locale
                * @param path : path to the locale folder
            </haxe_doc>
        </setLocaleFile>
        <tradHash>
            <x path="Map">
                <c path="String"/>
                <c path="String"/>
            </x>
        </tradHash>
        <name public="1" set="null">
            <c path="String"/>
            <haxe_doc>* Name of the localisation</haxe_doc>
        </name>
        <new public="1" set="method" line="25">
            <f a="name">
                <c path="String"/>
                <x path="Void"/>
            </f>
            <haxe_doc>* Constructor
                * @param name : Name of the localisation (aka language)
            </haxe_doc>
        </new>
        <haxe_doc>* Localisation</haxe_doc>
    </class>
    <class path="com.knowledgeplayers.grar.localisation.Localiser" params=""
           file="/Users/jbrichardet/IdeaProjects/grar/com/knowledgeplayers/grar/localisation/Localiser.hx">
        <extends path="flash.events.EventDispatcher"/>
        <instance public="1" get="accessor" set="null" static="1">
            <c path="com.knowledgeplayers.grar.localisation.Localiser"/>
            <haxe_doc>* Instance of the singleton</haxe_doc>
        </instance>
        <get_instance public="1" set="method" line="50" static="1">
            <f a="">
                <c path="com.knowledgeplayers.grar.localisation.Localiser"/>
            </f>
            <haxe_doc>* @return the instance of the singleton</haxe_doc>
        </get_instance>
        <pushLocale public="1" set="method" line="133">
            <f a="">
                <x path="Void"/>
            </f>
            <haxe_doc>* Restore the previously stored locale</haxe_doc>
        </pushLocale>
        <popLocale public="1" set="method" line="122">
            <f a="">
                <x path="Void"/>
            </f>
            <haxe_doc>* Store the current locale</haxe_doc>
        </popLocale>
        <setLocalisationFile public="1" set="method" line="104">
            <f a="path">
                <c path="String"/>
                <x path="Void"/>
            </f>
            <haxe_doc>* Set File of localisation</haxe_doc>
        </setLocalisationFile>
        <getItemContent public="1" set="method" line="90">
            <f a="key">
                <c path="String"/>
                <t path="Null">
                    <c path="String"/>
                </t>
            </f>
            <haxe_doc>* Get the localised text for the specified item
                * @param key : key of the item
                * @return the localised text
            </haxe_doc>
        </getItemContent>
        <set_currentLocale public="1" set="method" line="77">
            <f a="locale">
                <c path="String"/>
                <c path="String"/>
            </f>
            <haxe_doc>* Setter of the current locale
                * @param locale : name of the current locale
                * @return the name of the current locale
            </haxe_doc>
        </set_currentLocale>
        <set_layoutPath public="1" set="method" line="64">
            <f a="path">
                <c path="String"/>
                <c path="String"/>
            </f>
            <haxe_doc>* Setter of the layout file
                * @param path : Path to the file
                * @return the path
            </haxe_doc>
        </set_layoutPath>
        <stashedLocale>
            <c path="haxe.ds.GenericStack_com_knowledgeplayers_grar_localisation_Localisation"/>
        </stashedLocale>
        <localisation>
            <c path="com.knowledgeplayers.grar.localisation.Localisation"/>
        </localisation>
        <outroId>
            <c path="String"/>
        </outroId>
        <introId>
            <c path="String"/>
        </introId>
        <layoutPath public="1" set="accessor">
            <c path="String"/>
            <haxe_doc>* Path of the structure file that describes the layout</haxe_doc>
        </layoutPath>
        <localisations public="1" set="null">
            <x path="Map">
                <c path="String"/>
                <c path="String"/>
            </x>
            <haxe_doc>* Hash of all the localisations registred in the localiser</haxe_doc>
        </localisations>
        <currentLocale public="1" set="accessor">
            <c path="String"/>
            <haxe_doc>* Current locale</haxe_doc>
        </currentLocale>
        <new set="method" line="39">
            <f a="">
                <x path="Void"/>
            </f>
        </new>
        <haxe_doc>* Singleton manager of the localisation</haxe_doc>
    </class>
    <class path="com.knowledgeplayers.grar.structure.Game" params=""
           file="/Users/jbrichardet/IdeaProjects/grar/com/knowledgeplayers/grar/structure/Game.hx" interface="1">
        <extends path="flash.events.IEventDispatcher"/>
        <getPart public="1" set="method">
            <f a="id">
                <c path="String"/>
                <t path="Null">
                    <c path="com.knowledgeplayers.grar.structure.part.Part"/>
                </t>
            </f>
        </getPart>
        <getItemName public="1" set="method">
            <f a="id">
                <c path="String"/>
                <t path="Null">
                    <c path="String"/>
                </t>
            </f>
        </getItemName>
        <toString public="1" set="method">
            <f a="">
                <c path="String"/>
            </f>
        </toString>
        <getLoadingCompletion public="1" set="method">
            <f a="">
                <x path="Float"/>
            </f>
        </getLoadingCompletion>
        <initTracking public="1" set="method">
            <f a="?mode">
                <e path="com.knowledgeplayers.grar.tracking.Mode"/>
                <x path="Void"/>
            </f>
        </initTracking>
        <addLanguage public="1" set="method">
            <f a="value:path:flagIconPath">
                <c path="String"/>
                <c path="String"/>
                <c path="String"/>
                <x path="Void"/>
            </f>
        </addLanguage>
        <getAllItems public="1" set="method">
            <f a="">
                <c path="Array">
                    <c path="com.knowledgeplayers.grar.tracking.Trackable"/>
                </c>
            </f>
        </getAllItems>
        <getAllParts public="1" set="method">
            <f a="">
                <c path="Array">
                    <c path="com.knowledgeplayers.grar.structure.part.Part"/>
                </c>
            </f>
        </getAllParts>
        <addPart public="1" set="method">
            <f a="partId:part">
                <c path="String"/>
                <c path="com.knowledgeplayers.grar.structure.part.Part"/>
                <x path="Void"/>
            </f>
        </addPart>
        <init public="1" set="method">
            <f a="xml">
                <c path="Xml"/>
                <x path="Void"/>
            </f>
        </init>
        <start public="1" set="method">
            <f a="?partId">
                <c path="String"/>
                <t path="Null">
                    <c path="com.knowledgeplayers.grar.structure.part.Part"/>
                </t>
            </f>
        </start>
        <connection public="1" set="null">
            <c path="com.knowledgeplayers.grar.tracking.Connection"/>
        </connection>
        <stateInfos public="1" set="null">
            <c path="com.knowledgeplayers.grar.tracking.StateInfos"/>
        </stateInfos>
        <menu public="1">
            <c path="Xml"/>
        </menu>
        <ref public="1">
            <c path="String"/>
        </ref>
        <inventory public="1" set="null">
            <c path="Array">
                <c path="com.knowledgeplayers.grar.structure.Token"/>
            </c>
        </inventory>
        <state public="1">
            <c path="String"/>
        </state>
        <title public="1">
            <c path="String"/>
        </title>
        <mode public="1">
            <e path="com.knowledgeplayers.grar.tracking.Mode"/>
        </mode>
    </class>
    <class path="com.knowledgeplayers.grar.structure.KpGame" params=""
           file="/Users/jbrichardet/IdeaProjects/grar/com/knowledgeplayers/grar/structure/KpGame.hx">
        <extends path="flash.events.EventDispatcher"/>
        <implements path="com.knowledgeplayers.grar.structure.Game"/>
        <onExit set="method" line="426">
            <f a="e">
                <t path="nme.events.Event"/>
                <x path="Void"/>
            </f>
        </onExit>
        <checkLoading set="method" line="402">
            <f a="">
                <x path="Void"/>
            </f>
        </checkLoading>
        <onPartLoaded set="method" line="392">
            <f a="event">
                <c path="com.knowledgeplayers.grar.event.PartEvent"/>
                <x path="Void"/>
            </f>
        </onPartLoaded>
        <onStyleLoaded set="method" line="381">
            <f a="styleSheet">
                <c path="Xml"/>
                <x path="Void"/>
            </f>
        </onStyleLoaded>
        <createMenuXml set="method" line="364">
            <f a="xml:part:?level">
                <c path="Xml"/>
                <c path="com.knowledgeplayers.grar.structure.part.Part"/>
                <x path="Int"/>
                <x path="Void"/>
            </f>
        </createMenuXml>
        <initActivities set="method" line="354">
            <f a="xml">
                <c path="Xml"/>
                <x path="Void"/>
            </f>
        </initActivities>
        <initLangs set="method" line="346">
            <f a="xml">
                <c path="Xml"/>
                <x path="Void"/>
            </f>
        </initLangs>
        <addPartFromXml set="method" line="339">
            <f a="partIndex:partXml">
                <c path="String"/>
                <c path="haxe.xml.Fast"/>
                <x path="Void"/>
            </f>
        </addPartFromXml>
        <checkIntegrity set="method" line="332">
            <f a="">
                <x path="Void"/>
            </f>
        </checkIntegrity>
        <getPart public="1" set="method" line="322">
            <f a="id">
                <c path="String"/>
                <t path="Null">
                    <c path="com.knowledgeplayers.grar.structure.part.Part"/>
                </t>
            </f>
            <haxe_doc>* @param id : Id of the part
                * @return the part with the given id
            </haxe_doc>
        </getPart>
        <getItemName public="1" set="method" line="306">
            <f a="id">
                <c path="String"/>
                <t path="Null">
                    <c path="String"/>
                </t>
            </f>
            <haxe_doc>* @param id : Id of the item
                * @return the name of the item
            </haxe_doc>
        </getItemName>
        <getAllItems public="1" set="method" line="291">
            <f a="">
                <c path="Array">
                    <c path="com.knowledgeplayers.grar.tracking.Trackable"/>
                </c>
            </f>
            <haxe_doc>* @return all trackable items of the game</haxe_doc>
        </getAllItems>
        <getAllParts public="1" set="method" line="277">
            <f a="">
                <c path="Array">
                    <c path="com.knowledgeplayers.grar.structure.part.Part"/>
                </c>
            </f>
            <haxe_doc>* @return all the parts of the game</haxe_doc>
        </getAllParts>
        <getLoadingCompletion public="1" set="method" line="268">
            <f a="">
                <x path="Float"/>
            </f>
            <haxe_doc>* Get the state of loading of the game
                * @return a float between 0 (nothing loaded) and 1 (everything's loaded)
            </haxe_doc>
        </getLoadingCompletion>
        <initTracking public="1" set="method" line="250">
            <f a="?mode">
                <e path="com.knowledgeplayers.grar.tracking.Mode"/>
                <x path="Void"/>
            </f>
            <haxe_doc>* Start the tracking
                * @param mode : tracking mode (SCORM/AICC)
            </haxe_doc>
        </initTracking>
        <toString public="1" set="method" line="240" override="1">
            <f a="">
                <c path="String"/>
            </f>
            <haxe_doc>* @return a string-based representation of the game</haxe_doc>
        </toString>
        <addLanguage public="1" set="method" line="230">
            <f a="value:path:flagIconPath">
                <c path="String"/>
                <c path="String"/>
                <c path="String"/>
                <x path="Void"/>
            </f>
            <haxe_doc>* Add a language to the game
                * @param value : name of the language
                * @param path : path to the localisation folder
                * @param flagIconPath : path to the flag for this language
            </haxe_doc>
        </addLanguage>
        <addPart public="1" set="method" line="217">
            <f a="partId:part">
                <c path="String"/>
                <c path="com.knowledgeplayers.grar.structure.part.Part"/>
                <x path="Void"/>
            </f>
            <haxe_doc>* Add a part to the game at partIndex
                * @param partId : ID of the part
                * @param part : the part to add
            </haxe_doc>
        </addPart>
        <start public="1" set="method" line="183">
            <f a="?partId">
                <c path="String"/>
                <t path="Null">
                    <c path="com.knowledgeplayers.grar.structure.part.Part"/>
                </t>
            </f>
            <haxe_doc>* Start the game
                * @param partId : the ID of the part to start.
                * @return the part with id partId or null if this part doesn't exist
            </haxe_doc>
        </start>
        <init public="1" set="method" line="113">
            <f a="xml">
                <c path="Xml"/>
                <x path="Void"/>
            </f>
            <haxe_doc>* Initialize the game with a xml structure
                * @param xml : the structure
            </haxe_doc>
        </init>
        <activitiesWaiting>
            <c path="haxe.ds.GenericStack_Xml"/>
        </activitiesWaiting>
        <numStyleSheetLoaded>
            <x path="Int"/>
        </numStyleSheetLoaded>
        <numStyleSheet>
            <x path="Int"/>
        </numStyleSheet>
        <layoutLoaded>
            <x path="Bool"/>
        </layoutLoaded>
        <nbPartsLoaded>
            <x path="Int"/>
        </nbPartsLoaded>
        <numParts>
            <x path="Int"/>
        </numParts>
        <parts>
            <c path="Array">
                <c path="com.knowledgeplayers.grar.structure.part.Part"/>
            </c>
        </parts>
        <flags>
            <x path="Map">
                <c path="String"/>
                <c path="String"/>
            </x>
        </flags>
        <languages>
            <x path="Map">
                <c path="String"/>
                <c path="String"/>
            </x>
        </languages>
        <structureXml>
            <c path="haxe.xml.Fast"/>
        </structureXml>
        <partIndex>
            <x path="Int"/>
            <haxe_doc>* Index of the current part</haxe_doc>
        </partIndex>
        <connection public="1" set="null">
            <c path="com.knowledgeplayers.grar.tracking.Connection"/>
            <haxe_doc>* Connection with the LMS</haxe_doc>
        </connection>
        <stateInfos public="1" set="null">
            <c path="com.knowledgeplayers.grar.tracking.StateInfos"/>
            <haxe_doc>* Tracking infos</haxe_doc>
        </stateInfos>
        <menu public="1">
            <c path="Xml"/>
            <haxe_doc>* Xml describing the menu</haxe_doc>
        </menu>
        <ref public="1">
            <c path="String"/>
            <haxe_doc>* Reference for the layout</haxe_doc>
        </ref>
        <inventory public="1" set="null">
            <c path="Array">
                <c path="com.knowledgeplayers.grar.structure.Token"/>
            </c>
            <haxe_doc>* Global inventory</haxe_doc>
        </inventory>
        <state public="1">
            <c path="String"/>
            <haxe_doc>* State of the game</haxe_doc>
        </state>
        <title public="1">
            <c path="String"/>
            <haxe_doc>* Game title</haxe_doc>
        </title>
        <mode public="1">
            <e path="com.knowledgeplayers.grar.tracking.Mode"/>
            <haxe_doc>* Connection mode</haxe_doc>
        </mode>
        <new public="1" set="method" line="92">
            <f a="">
                <x path="Void"/>
            </f>
            <haxe_doc>* Constructor.
                * Register the game to the GameManager
            </haxe_doc>
        </new>
        <haxe_doc>* KP inmplentation of a game</haxe_doc>
    </class>
    <class path="com.knowledgeplayers.grar.structure.Token" params=""
           file="/Users/jbrichardet/IdeaProjects/grar/com/knowledgeplayers/grar/structure/Token.hx">
        <fullScreenContent public="1">
            <c path="String"/>
            <haxe_doc>* Content of this token when it's fullscreen</haxe_doc>
        </fullScreenContent>
        <content public="1">
            <c path="String"/>
            <haxe_doc>* Content of this token</haxe_doc>
        </content>
        <name public="1">
            <c path="String"/>
            <haxe_doc>* Key to the name of this token</haxe_doc>
        </name>
        <isActivated public="1">
            <x path="Bool"/>
            <haxe_doc>* State of activation</haxe_doc>
        </isActivated>
        <type public="1">
            <c path="String"/>
            <haxe_doc>* Type of the token</haxe_doc>
        </type>
        <ref public="1">
            <c path="String"/>
            <haxe_doc>* Reference to the display</haxe_doc>
        </ref>
        <new public="1" set="method" line="44">
            <f a="?_fast">
                <c path="haxe.xml.Fast"/>
                <x path="Void"/>
            </f>
            <haxe_doc>* Constructor
                * @param fast : Xml descriptor of the token
            </haxe_doc>
        </new>
        <haxe_doc>* A token that can be earn during parts or activities and store into the inventory</haxe_doc>
    </class>
    <class path="com.knowledgeplayers.grar.tracking.Trackable" params=""
           file="/Users/jbrichardet/IdeaProjects/grar/com/knowledgeplayers/grar/tracking/Trackable.hx" interface="1">
        <name public="1">
            <c path="String"/>
        </name>
        <id public="1">
            <c path="String"/>
        </id>
        <haxe_doc>* Trackable item</haxe_doc>
    </class>
    <class path="com.knowledgeplayers.grar.structure.part.PartElement" params=""
           file="/Users/jbrichardet/IdeaProjects/grar/com/knowledgeplayers/grar/structure/part/PartElement.hx"
           interface="1">
        <isPart public="1" set="method">
            <f a="">
                <x path="Bool"/>
            </f>
        </isPart>
        <isPattern public="1" set="method">
            <f a="">
                <x path="Bool"/>
            </f>
        </isPattern>
        <isText public="1" set="method">
            <f a="">
                <x path="Bool"/>
            </f>
        </isText>
        <isActivity public="1" set="method">
            <f a="">
                <x path="Bool"/>
            </f>
        </isActivity>
        <endScreen public="1" set="null">
            <x path="Bool"/>
        </endScreen>
        <token public="1" set="null">
            <c path="String"/>
        </token>
    </class>
    <class path="com.knowledgeplayers.grar.structure.activity.Activity" params=""
           file="/Users/jbrichardet/IdeaProjects/grar/com/knowledgeplayers/grar/structure/activity/Activity.hx">
        <extends path="flash.events.EventDispatcher"/>
        <implements path="com.knowledgeplayers.grar.tracking.Trackable"/>
        <implements path="com.knowledgeplayers.grar.structure.part.PartElement"/>
        <parseContent set="method" line="187">
            <f a="content">
                <c path="Xml"/>
                <x path="Void"/>
            </f>
        </parseContent>
        <isPart public="1" set="method" line="180">
            <f a="">
                <x path="Bool"/>
            </f>
            <haxe_doc>* @return false</haxe_doc>
        </isPart>
        <isPattern public="1" set="method" line="171">
            <f a="">
                <x path="Bool"/>
            </f>
            <haxe_doc>* @return false</haxe_doc>
        </isPattern>
        <isActivity public="1" set="method" line="162">
            <f a="">
                <x path="Bool"/>
            </f>
            <haxe_doc>* @return true</haxe_doc>
        </isActivity>
        <isText public="1" set="method" line="153">
            <f a="">
                <x path="Bool"/>
            </f>
            <haxe_doc>* @return false</haxe_doc>
        </isText>
        <addTreshold public="1" set="method" line="137">
            <f a="score:next">
                <c path="String"/>
                <c path="String"/>
                <x path="Void"/>
            </f>
        </addTreshold>
        <endActivity public="1" set="method" line="122">
            <f a="">
                <x path="Void"/>
            </f>
            <haxe_doc>* Stop the activity, set it to done</haxe_doc>
        </endActivity>
        <startActivity public="1" set="method" line="115">
            <f a="">
                <x path="Void"/>
            </f>
            <haxe_doc>* Start the activity</haxe_doc>
        </startActivity>
        <loadActivity public="1" set="method" line="105">
            <f a="">
                <x path="Void"/>
            </f>
            <haxe_doc>* Load the activity. Must be done before the start</haxe_doc>
        </loadActivity>
        <isEnded>
            <x path="Bool"/>
            <haxe_doc>* True if the activity has been done</haxe_doc>
        </isEnded>
        <thresholds>
            <c path="Array">
                <a>
                    <score>
                        <x path="Int"/>
                    </score>
                    <next>
                        <c path="String"/>
                    </next>
                </a>
            </c>
        </thresholds>
        <endScreen public="1" set="null">
            <x path="Bool"/>
        </endScreen>
        <nextPattern public="1">
            <c path="String"/>
            <haxe_doc>* Pattern to go when the activity is over</haxe_doc>
        </nextPattern>
        <token public="1">
            <c path="String"/>
            <haxe_doc>* Token won in this activity</haxe_doc>
        </token>
        <controlMode public="1">
            <c path="String"/>
            <haxe_doc>* Mode of control.
                * If end, the control is done when the activity is validated.
            </haxe_doc>
        </controlMode>
        <ref public="1">
            <c path="String"/>
            <haxe_doc>* Reference to the text zone where to display instructions</haxe_doc>
        </ref>
        <instructionContent public="1">
            <c path="String"/>
            <haxe_doc>* Localisation key for the instructions</haxe_doc>
        </instructionContent>
        <background public="1">
            <c path="String"/>
            <haxe_doc>* Reference to the background for the activity</haxe_doc>
        </background>
        <button public="1">
            <a>
                <ref>
                    <c path="String"/>
                </ref>
                <content>
                    <x path="Map">
                        <c path="String"/>
                        <c path="String"/>
                    </x>
                </content>
            </a>
            <haxe_doc>* Reference of the button which will validate the activity</haxe_doc>
        </button>
        <container public="1">
            <c path="com.knowledgeplayers.grar.structure.part.Part"/>
            <haxe_doc>* Part where the activity is</haxe_doc>
        </container>
        <content public="1">
            <c path="String"/>
            <haxe_doc>* Path to the content file</haxe_doc>
        </content>
        <score public="1">
            <x path="Int"/>
            <haxe_doc>* Score for this activity</haxe_doc>
        </score>
        <id public="1">
            <c path="String"/>
            <haxe_doc>* Id of the activity</haxe_doc>
        </id>
        <name public="1">
            <c path="String"/>
            <haxe_doc>* Name of the activity</haxe_doc>
        </name>
        <new set="method" line="91">
            <f a="content">
                <c path="String"/>
                <x path="Void"/>
            </f>
            <haxe_doc>* Constructor
                * @param content : Path to the content file
            </haxe_doc>
        </new>
        <haxe_doc>* Abstract activity</haxe_doc>
    </class>
    <class path="com.knowledgeplayers.grar.structure.activity.cards.Cards" params=""
           file="/Users/jbrichardet/IdeaProjects/grar/com/knowledgeplayers/grar/structure/activity/cards/Cards.hx">
        <extends path="com.knowledgeplayers.grar.structure.activity.Activity"/>
        <parseContent set="method" line="27" override="1">
            <f a="content">
                <c path="Xml"/>
                <x path="Void"/>
            </f>
        </parseContent>
        <elements public="1" set="null">
            <c path="Array">
                <c path="com.knowledgeplayers.grar.structure.activity.cards.CardsElement"/>
            </c>
            <haxe_doc>* Elements of the activity</haxe_doc>
        </elements>
        <new public="1" set="method" line="19">
            <f a="content">
                <c path="String"/>
                <x path="Void"/>
            </f>
            <haxe_doc>* Constructor
                * @param content : Content of the activity
            </haxe_doc>
        </new>
        <haxe_doc>* Folder activity</haxe_doc>
    </class>
    <class path="com.knowledgeplayers.grar.structure.activity.cards.CardsElement" params=""
           file="/Users/jbrichardet/IdeaProjects/grar/com/knowledgeplayers/grar/structure/activity/cards/CardsElement.hx">
        <content public="1">
            <c path="String"/>
        </content>
        <new public="1" set="method" line="6">
            <f a="content">
                <c path="String"/>
                <x path="Void"/>
            </f>
        </new>
    </class>
    <class path="com.knowledgeplayers.grar.structure.activity.folder.Folder" params=""
           file="/Users/jbrichardet/IdeaProjects/grar/com/knowledgeplayers/grar/structure/activity/folder/Folder.hx">
        <extends path="com.knowledgeplayers.grar.structure.activity.Activity"/>
        <parseContent set="method" line="43" override="1">
            <f a="xml">
                <c path="Xml"/>
                <x path="Void"/>
            </f>
        </parseContent>
        <validate public="1" set="method" line="31">
            <f a="">
                <x path="Void"/>
            </f>
        </validate>
        <targets public="1">
            <c path="Array">
                <c path="String"/>
            </c>
            <haxe_doc>* Targets where to drop elements</haxe_doc>
        </targets>
        <elements public="1" set="null">
            <x path="Map">
                <c path="String"/>
                <c path="com.knowledgeplayers.grar.structure.activity.folder.FolderElement"/>
            </x>
            <haxe_doc>* Elements of the activity</haxe_doc>
        </elements>
        <new public="1" set="method" line="24">
            <f a="content">
                <c path="String"/>
                <x path="Void"/>
            </f>
            <haxe_doc>* Constructor
                * @param content : Content of the activity
            </haxe_doc>
        </new>
        <haxe_doc>* Folder activity</haxe_doc>
    </class>
    <class path="com.knowledgeplayers.grar.structure.activity.folder.FolderElement" params=""
           file="/Users/jbrichardet/IdeaProjects/grar/com/knowledgeplayers/grar/structure/activity/folder/FolderElement.hx">
        <currentTarget public="1">
            <c path="String"/>
            <haxe_doc>* Target where the element is currently positionned</haxe_doc>
        </currentTarget>
        <ref public="1">
            <c path="String"/>
            <haxe_doc>* Reference of the element</haxe_doc>
        </ref>
        <target public="1">
            <c path="String"/>
            <haxe_doc>* Target of the element</haxe_doc>
        </target>
        <content public="1">
            <c path="String"/>
            <haxe_doc>* Content of the element</haxe_doc>
        </content>
        <new public="1" set="method" line="26">
            <f a="content:ref:?target">
                <c path="String"/>
                <c path="String"/>
                <c path="String"/>
                <x path="Void"/>
            </f>
        </new>
    </class>
    <class path="com.knowledgeplayers.grar.structure.activity.quiz.Quiz" params=""
           file="/Users/jbrichardet/IdeaProjects/grar/com/knowledgeplayers/grar/structure/activity/quiz/Quiz.hx">
        <extends path="com.knowledgeplayers.grar.structure.activity.Activity"/>
        <parseContent set="method" line="98" override="1">
            <f a="content">
                <c path="Xml"/>
                <x path="Void"/>
            </f>
        </parseContent>
        <validate public="1" set="method" line="81">
            <f a="">
                <x path="Bool"/>
            </f>
            <haxe_doc>* Validate the quiz
                * @return true if the quiz is over
            </haxe_doc>
        </validate>
        <getCurrentGroup public="1" set="method" line="71">
            <f a="">
                <c path="String"/>
            </f>
            <haxe_doc>* @return the current group template</haxe_doc>
        </getCurrentGroup>
        <getCurrentAnswers public="1" set="method" line="62">
            <f a="">
                <c path="com.knowledgeplayers.grar.structure.activity.quiz.QuizGroup"/>
            </f>
            <haxe_doc>* @return the answers being proposed</haxe_doc>
        </getCurrentAnswers>
        <getCurrentQuestion public="1" set="method" line="53">
            <f a="">
                <a>
                    <ref>
                        <c path="String"/>
                    </ref>
                    <content>
                        <c path="String"/>
                    </content>
                </a>
            </f>
            <haxe_doc>* @return the question being asked</haxe_doc>
        </getCurrentQuestion>
        <startActivity public="1" set="method" line="44" override="1">
            <f a="">
                <x path="Void"/>
            </f>
        </startActivity>
        <roundIndex>
            <x path="Int"/>
        </roundIndex>
        <groupRefs>
            <c path="Array">
                <c path="String"/>
            </c>
        </groupRefs>
        <state public="1">
            <e path="com.knowledgeplayers.grar.structure.activity.quiz.QuizzState"/>
            <haxe_doc>* State of correction of the quiz</haxe_doc>
        </state>
        <questions public="1" set="null">
            <c path="Array">
                <a>
                    <ref>
                        <c path="String"/>
                    </ref>
                    <content>
                        <c path="String"/>
                    </content>
                </a>
            </c>
            <haxe_doc>* Questions for each rounds</haxe_doc>
        </questions>
        <answers public="1" set="null">
            <c path="Array">
                <c path="com.knowledgeplayers.grar.structure.activity.quiz.QuizGroup"/>
            </c>
            <haxe_doc>* Group of answers for each rounds</haxe_doc>
        </answers>
        <new public="1" set="method" line="35">
            <f a="?content">
                <c path="String"/>
                <x path="Void"/>
            </f>
            <haxe_doc>* Constructor
                * @param content : Path to the content file
            </haxe_doc>
        </new>
        <haxe_doc>* Structure of the quiz activity
            * @author jbrichardet
        </haxe_doc>
    </class>
    <enum path="com.knowledgeplayers.grar.structure.activity.quiz.QuizzState" params=""
          file="/Users/jbrichardet/IdeaProjects/grar/com/knowledgeplayers/grar/structure/activity/quiz/Quiz.hx"
          module="com.knowledgeplayers.grar.structure.activity.quiz.Quiz">
        <VALIDATED/>
        <EMPTY/>
        <CORRECTED/>
        <haxe_doc>* Possible state of the quiz</haxe_doc>
    </enum>
    <class path="com.knowledgeplayers.grar.structure.activity.quiz.QuizGroup" params=""
           file="/Users/jbrichardet/IdeaProjects/grar/com/knowledgeplayers/grar/structure/activity/quiz/QuizGroup.hx">
        <addXmlItem public="1" set="method" line="44">
            <f a="item">
                <c path="haxe.xml.Fast"/>
                <x path="Void"/>
            </f>
            <haxe_doc>* Add an XML-described item to the group
                * @param item : fast XML node with the item infos
            </haxe_doc>
        </addXmlItem>
        <getRoundScore public="1" set="method" line="29">
            <f a="">
                <x path="Int"/>
            </f>
        </getRoundScore>
        <addItem public="1" set="method" line="24">
            <f a="item">
                <c path="com.knowledgeplayers.grar.structure.activity.quiz.QuizItem"/>
                <x path="Void"/>
            </f>
            <haxe_doc>* Add an item to the group
                * @param item : Item to add
            </haxe_doc>
        </addItem>
        <items public="1" set="null">
            <c path="List">
                <c path="com.knowledgeplayers.grar.structure.activity.quiz.QuizItem"/>
            </c>
            <haxe_doc>* List of items in this group</haxe_doc>
        </items>
        <new public="1" set="method" line="14">
            <f a="">
                <x path="Void"/>
            </f>
        </new>
        <haxe_doc>* Structure for the answer group of the quiz
            * @author jbrichardet
        </haxe_doc>
    </class>
    <class path="com.knowledgeplayers.grar.structure.activity.quiz.QuizItem" params=""
           file="/Users/jbrichardet/IdeaProjects/grar/com/knowledgeplayers/grar/structure/activity/quiz/QuizItem.hx">
        <toString public="1" set="method" line="61">
            <f a="">
                <c path="String"/>
            </f>
            <haxe_doc>* @return a string-based representation of the item</haxe_doc>
        </toString>
        <isRightAnswered public="1" set="method" line="52">
            <f a="">
                <x path="Bool"/>
            </f>
            <haxe_doc>* @return true if the item has been checked and is a correct answer</haxe_doc>
        </isRightAnswered>
        <ref public="1">
            <c path="String"/>
            <haxe_doc>* Ref of the item</haxe_doc>
        </ref>
        <content public="1">
            <c path="String"/>
            <haxe_doc>* Text of the item</haxe_doc>
        </content>
        <isAnswer public="1" set="null">
            <x path="Bool"/>
            <haxe_doc>* True if the item is the answer to the question</haxe_doc>
        </isAnswer>
        <isChecked public="1">
            <x path="Bool"/>
            <haxe_doc>* True if the item is checked</haxe_doc>
        </isChecked>
        <new public="1" set="method" line="40">
            <f a="content:ref:?isAnswer:?isChecked">
                <c path="String"/>
                <c path="String"/>
                <x path="Bool"/>
                <x path="Bool"/>
                <x path="Void"/>
            </f>
            <haxe_doc>* Constructor
                * @param content : Text of the item
                * @param isAnswer : True if the item is the answer. False by default
                * @param isChecked : True if the item is checked. False by default
            </haxe_doc>
        </new>
        <haxe_doc>* Model for quiz propositions</haxe_doc>
    </class>
    <class path="com.knowledgeplayers.grar.structure.activity.scanner.Scanner" params=""
           file="/Users/jbrichardet/IdeaProjects/grar/com/knowledgeplayers/grar/structure/activity/scanner/Scanner.hx">
        <extends path="com.knowledgeplayers.grar.structure.activity.Activity"/>
        <parseContent set="method" line="24" override="1">
            <f a="content">
                <c path="Xml"/>
                <x path="Void"/>
            </f>
        </parseContent>
        <toString public="1" set="method" line="17" override="1">
            <f a="">
                <c path="String"/>
            </f>
        </toString>
        <pointVisible public="1">
            <x path="Bool"/>
        </pointVisible>
        <pointsMap public="1" set="null">
            <c path="haxe.ds.GenericStack_com_knowledgeplayers_grar_structure_activity_scanner_ScannerPoint"/>
        </pointsMap>
        <new public="1" set="method" line="11">
            <f a="content">
                <c path="String"/>
                <x path="Void"/>
            </f>
        </new>
    </class>
    <class path="com.knowledgeplayers.grar.structure.activity.scanner.ScannerPoint" params=""
           file="/Users/jbrichardet/IdeaProjects/grar/com/knowledgeplayers/grar/structure/activity/scanner/ScannerPoint.hx">
        <extends path="flash.geom.Point"/>
        <textRef public="1">
            <c path="String"/>
            <haxe_doc>* Reference of the textfield where the content will be displayed</haxe_doc>
        </textRef>
        <ref public="1">
            <c path="String"/>
            <haxe_doc>* Reference of the point</haxe_doc>
        </ref>
        <content public="1">
            <c path="String"/>
            <haxe_doc>* Content of the point</haxe_doc>
        </content>
        <new public="1" set="method" line="28">
            <f a="x:y:ref:textRef:?content">
                <x path="Float"/>
                <x path="Float"/>
                <c path="String"/>
                <c path="String"/>
                <c path="String"/>
                <x path="Void"/>
            </f>
            <haxe_doc>* Constructor
                * @param x : X of the point
                * @param y : Y of the point
                * @param content : Content of the point
            </haxe_doc>
        </new>
    </class>
    <class path="com.knowledgeplayers.grar.structure.part.Part" params=""
           file="/Users/jbrichardet/IdeaProjects/grar/com/knowledgeplayers/grar/structure/part/Part.hx" interface="1">
        <extends path="com.knowledgeplayers.grar.tracking.Trackable"/>
        <extends path="com.knowledgeplayers.grar.structure.part.PartElement"/>
        <extends path="flash.events.IEventDispatcher"/>
        <getItemName public="1" set="method">
            <f a="id">
                <c path="String"/>
                <t path="Null">
                    <c path="String"/>
                </t>
            </f>
        </getItemName>
        <isPart public="1" set="method">
            <f a="">
                <x path="Bool"/>
            </f>
        </isPart>
        <isPattern public="1" set="method">
            <f a="">
                <x path="Bool"/>
            </f>
        </isPattern>
        <isText public="1" set="method">
            <f a="">
                <x path="Bool"/>
            </f>
        </isText>
        <isActivity public="1" set="method">
            <f a="">
                <x path="Bool"/>
            </f>
        </isActivity>
        <isStrip public="1" set="method">
            <f a="">
                <x path="Bool"/>
            </f>
        </isStrip>
        <isDialog public="1" set="method">
            <f a="">
                <x path="Bool"/>
            </f>
        </isDialog>
        <toString public="1" set="method">
            <f a="">
                <c path="String"/>
            </f>
        </toString>
        <hasParts public="1" set="method">
            <f a="">
                <x path="Bool"/>
            </f>
        </hasParts>
        <getAllItems public="1" set="method">
            <f a="">
                <c path="Array">
                    <c path="com.knowledgeplayers.grar.tracking.Trackable"/>
                </c>
            </f>
        </getAllItems>
        <getAllParts public="1" set="method">
            <f a="">
                <c path="Array">
                    <c path="com.knowledgeplayers.grar.structure.part.Part"/>
                </c>
            </f>
        </getAllParts>
        <getElementIndex public="1" set="method">
            <f a="element">
                <c path="com.knowledgeplayers.grar.structure.part.PartElement"/>
                <x path="Int"/>
            </f>
        </getElementIndex>
        <getNextElement public="1" set="method">
            <f a="?startIndex">
                <x path="Int"/>
                <t path="Null">
                    <c path="com.knowledgeplayers.grar.structure.part.PartElement"/>
                </t>
            </f>
        </getNextElement>
        <restart public="1" set="method">
            <f a="">
                <x path="Void"/>
            </f>
        </restart>
        <end public="1" set="method">
            <f a="">
                <x path="Void"/>
            </f>
        </end>
        <start public="1" set="method">
            <f a="?forced">
                <x path="Bool"/>
                <t path="Null">
                    <c path="com.knowledgeplayers.grar.structure.part.Part"/>
                </t>
            </f>
        </start>
        <init public="1" set="method">
            <f a="xml:?filePath">
                <c path="haxe.xml.Fast"/>
                <c path="String"/>
                <x path="Void"/>
            </f>
        </init>
        <soundLoop public="1">
            <t path="nme.media.Sound"/>
        </soundLoop>
        <tokens public="1" set="null">
            <c path="haxe.ds.GenericStack_String"/>
        </tokens>
        <token public="1" set="null">
            <c path="String"/>
        </token>
        <elements public="1" set="null">
            <c path="Array">
                <c path="com.knowledgeplayers.grar.structure.part.PartElement"/>
            </c>
        </elements>
        <button public="1">
            <a>
                <ref>
                    <c path="String"/>
                </ref>
                <content>
                    <x path="Map">
                        <c path="String"/>
                        <c path="String"/>
                    </x>
                </content>
            </a>
        </button>
        <next public="1">
            <c path="String"/>
        </next>
        <parent public="1">
            <c path="com.knowledgeplayers.grar.structure.part.Part"/>
        </parent>
        <isDone public="1">
            <x path="Bool"/>
        </isDone>
        <display public="1">
            <c path="String"/>
        </display>
        <file public="1" set="null">
            <c path="String"/>
        </file>
    </class>
    <class path="com.knowledgeplayers.grar.structure.part.Pattern" params=""
           file="/Users/jbrichardet/IdeaProjects/grar/com/knowledgeplayers/grar/structure/part/Pattern.hx">
        <implements path="com.knowledgeplayers.grar.structure.part.PartElement"/>
        <isPart public="1" set="method" line="149">
            <f a="">
                <x path="Bool"/>
            </f>
            <haxe_doc>* @return false</haxe_doc>
        </isPart>
        <isPattern public="1" set="method" line="140">
            <f a="">
                <x path="Bool"/>
            </f>
            <haxe_doc>* @return true</haxe_doc>
        </isPattern>
        <isText public="1" set="method" line="131">
            <f a="">
                <x path="Bool"/>
            </f>
            <haxe_doc>* @return false</haxe_doc>
        </isText>
        <isActivity public="1" set="method" line="122">
            <f a="">
                <x path="Bool"/>
            </f>
            <haxe_doc>* @return false</haxe_doc>
        </isActivity>
        <hasChoices public="1" set="method" line="111">
            <f a="">
                <x path="Bool"/>
            </f>
            <haxe_doc>* @return whether this pattern has choice or not</haxe_doc>
        </hasChoices>
        <restart public="1" set="method" line="102">
            <f a="">
                <x path="Void"/>
            </f>
            <haxe_doc>* Restart a pattern</haxe_doc>
        </restart>
        <getNextItem public="1" set="method" line="88">
            <f a="">
                <t path="Null">
                    <c path="com.knowledgeplayers.grar.structure.part.TextItem"/>
                </t>
            </f>
            <haxe_doc>* @return the next item in the pattern, or null if the pattern reachs its end</haxe_doc>
        </getNextItem>
        <init public="1" set="method" line="58">
            <f a="xml">
                <c path="haxe.xml.Fast"/>
                <x path="Void"/>
            </f>
            <haxe_doc>* Init the pattern with an XML node
                * @param xml : fast xml node with structure infos
            </haxe_doc>
        </init>
        <endScreen public="1" set="null">
            <x path="Bool"/>
        </endScreen>
        <token public="1" set="null">
            <c path="String"/>
            <haxe_doc>* Implements PartElement. Always null</haxe_doc>
        </token>
        <buttons public="1" set="null">
            <x path="Map">
                <c path="String"/>
                <x path="Map">
                    <c path="String"/>
                    <c path="String"/>
                </x>
            </x>
            <haxe_doc>* Buttons for this pattern</haxe_doc>
        </buttons>
        <nextPattern public="1">
            <c path="String"/>
            <haxe_doc>* Id of the next pattern</haxe_doc>
        </nextPattern>
        <itemIndex public="1">
            <x path="Int"/>
            <haxe_doc>* Current item index</haxe_doc>
        </itemIndex>
        <name public="1">
            <c path="String"/>
            <haxe_doc>* Name of the pattern</haxe_doc>
        </name>
        <patternContent public="1">
            <c path="Array">
                <c path="com.knowledgeplayers.grar.structure.part.TextItem"/>
            </c>
            <haxe_doc>* Array of item composing the pattern</haxe_doc>
        </patternContent>
        <new public="1" set="method" line="45">
            <f a="name">
                <c path="String"/>
                <x path="Void"/>
            </f>
            <haxe_doc>* Constructor
                * @param name : Name of the pattern
            </haxe_doc>
        </new>
    </class>
    <class path="com.knowledgeplayers.grar.structure.part.StructurePart" params=""
           file="/Users/jbrichardet/IdeaProjects/grar/com/knowledgeplayers/grar/structure/part/StructurePart.hx">
        <extends path="flash.events.EventDispatcher"/>
        <implements path="com.knowledgeplayers.grar.tracking.Trackable"/>
        <implements path="com.knowledgeplayers.grar.structure.part.Part"/>
        <fireLoaded set="method" line="425">
            <f a="">
                <x path="Void"/>
            </f>
        </fireLoaded>
        <onPartLoaded set="method" line="417">
            <f a="event">
                <c path="com.knowledgeplayers.grar.event.PartEvent"/>
                <x path="Void"/>
            </f>
        </onPartLoaded>
        <enterPart set="method" line="411">
            <f a="">
                <x path="Void"/>
            </f>
        </enterPart>
        <createPart set="method" line="400">
            <f a="partNode">
                <c path="haxe.xml.Fast"/>
                <x path="Void"/>
            </f>
        </createPart>
        <parseXml set="method" line="379">
            <f a="xml">
                <c path="haxe.xml.Fast"/>
                <x path="Void"/>
            </f>
        </parseXml>
        <parseContent set="method" line="329">
            <f a="content">
                <c path="Xml"/>
                <x path="Void"/>
            </f>
        </parseContent>
        <getItemName public="1" set="method" line="313">
            <f a="id">
                <c path="String"/>
                <t path="Null">
                    <c path="String"/>
                </t>
            </f>
            <haxe_doc>* @param id : Id of the item
                * @return the name of the item
            </haxe_doc>
        </getItemName>
        <isPart public="1" set="method" line="303">
            <f a="">
                <x path="Bool"/>
            </f>
            <haxe_doc>* @return true</haxe_doc>
        </isPart>
        <isPattern public="1" set="method" line="294">
            <f a="">
                <x path="Bool"/>
            </f>
            <haxe_doc>* @return false</haxe_doc>
        </isPattern>
        <isText public="1" set="method" line="285">
            <f a="">
                <x path="Bool"/>
            </f>
            <haxe_doc>* @return false</haxe_doc>
        </isText>
        <isActivity public="1" set="method" line="276">
            <f a="">
                <x path="Bool"/>
            </f>
            <haxe_doc>* @return false</haxe_doc>
        </isActivity>
        <isStrip public="1" set="method" line="265">
            <f a="">
                <x path="Bool"/>
            </f>
            <haxe_doc>* Tell if this part is a strip
                * @return true if this part is a strip
            </haxe_doc>
        </isStrip>
        <isDialog public="1" set="method" line="255">
            <f a="">
                <x path="Bool"/>
            </f>
            <haxe_doc>* Tell if this part is a dialog
                * @return true if this part is a dialog
            </haxe_doc>
        </isDialog>
        <restart public="1" set="method" line="245">
            <f a="">
                <x path="Void"/>
            </f>
        </restart>
        <toString public="1" set="method" line="240" override="1">
            <f a="">
                <c path="String"/>
            </f>
            <haxe_doc>* @return a string-based representation of the part</haxe_doc>
        </toString>
        <getAllItems public="1" set="method" line="217">
            <f a="">
                <c path="Array">
                    <c path="com.knowledgeplayers.grar.tracking.Trackable"/>
                </c>
            </f>
            <haxe_doc>* @return all the trackable items of this part</haxe_doc>
        </getAllItems>
        <getAllParts public="1" set="method" line="199">
            <f a="">
                <c path="Array">
                    <c path="com.knowledgeplayers.grar.structure.part.Part"/>
                </c>
            </f>
            <haxe_doc>* @return all the sub-part of this part</haxe_doc>
        </getAllParts>
        <hasParts public="1" set="method" line="186">
            <f a="">
                <x path="Bool"/>
            </f>
            <haxe_doc>* Tell if this part has sub-part or not
                * @return true if it has sub-part
            </haxe_doc>
        </hasParts>
        <getElementIndex public="1" set="method" line="172">
            <f a="element">
                <c path="com.knowledgeplayers.grar.structure.part.PartElement"/>
                <x path="Int"/>
            </f>
            <haxe_doc>* Get the position in this element in the part
                * @param element : Element to find
                * @return the position of this element
            </haxe_doc>
        </getElementIndex>
        <getNextElement public="1" set="method" line="153">
            <f a="?startIndex">
                <x path="Int"/>
                <t path="Null">
                    <c path="com.knowledgeplayers.grar.structure.part.PartElement"/>
                </t>
            </f>
            <haxe_doc>* @param startIndex : Next element after this position
                * @return the next element in the part or null if the part is over
            </haxe_doc>
        </getNextElement>
        <end public="1" set="method" line="142">
            <f a="">
                <x path="Void"/>
            </f>
            <haxe_doc>* End the part</haxe_doc>
        </end>
        <start public="1" set="method" line="128">
            <f a="?forced">
                <x path="Bool"/>
                <t path="Null">
                    <c path="com.knowledgeplayers.grar.structure.part.Part"/>
                </t>
            </f>
            <haxe_doc>* Start the part if it hasn't been done
                * @param forced : true to start the part even if it has already been done
                * @return this part, or null if it can't be start
            </haxe_doc>
        </start>
        <init public="1" set="method" line="99">
            <f a="xml:?filePath">
                <c path="haxe.xml.Fast"/>
                <c path="String"/>
                <x path="Void"/>
            </f>
            <haxe_doc>* Initialise the part with an XML node
                * @param xml : fast node with structure infos
                * @param filePath : path to an XML structure file (set the file variable)
            </haxe_doc>
        </init>
        <loaded>
            <x path="Bool"/>
        </loaded>
        <soundLoopChannel>
            <t path="nme.media.SoundChannel"/>
        </soundLoopChannel>
        <elemIndex>
            <x path="Int"/>
        </elemIndex>
        <partIndex>
            <x path="Int"/>
        </partIndex>
        <nbSubPartTotal>
            <x path="Int"/>
        </nbSubPartTotal>
        <nbSubPartLoaded>
            <x path="Int"/>
        </nbSubPartLoaded>
        <endScreen public="1" set="null">
            <x path="Bool"/>
        </endScreen>
        <next public="1">
            <c path="String"/>
        </next>
        <button public="1">
            <a>
                <ref>
                    <c path="String"/>
                </ref>
                <content>
                    <x path="Map">
                        <c path="String"/>
                        <c path="String"/>
                    </x>
                </content>
            </a>
            <haxe_doc>* Button of the part</haxe_doc>
        </button>
        <elements public="1" set="null">
            <c path="Array">
                <c path="com.knowledgeplayers.grar.structure.part.PartElement"/>
            </c>
            <haxe_doc>* Elements of the part</haxe_doc>
        </elements>
        <soundLoop public="1">
            <t path="nme.media.Sound"/>
            <haxe_doc>* Sound playing during the part</haxe_doc>
        </soundLoop>
        <token public="1">
            <c path="String"/>
            <haxe_doc>* Implements PartElement. Always null</haxe_doc>
        </token>
        <tokens public="1">
            <c path="haxe.ds.GenericStack_String"/>
            <haxe_doc>* Tokens in this part</haxe_doc>
        </tokens>
        <isDone public="1">
            <x path="Bool"/>
            <haxe_doc>* True if the part is done</haxe_doc>
        </isDone>
        <parent public="1">
            <c path="com.knowledgeplayers.grar.structure.part.Part"/>
            <haxe_doc>* Parent of this part</haxe_doc>
        </parent>
        <display public="1">
            <c path="String"/>
            <haxe_doc>* Path to the XML display file</haxe_doc>
        </display>
        <file public="1" set="null">
            <c path="String"/>
            <haxe_doc>* Path to the XML structure file</haxe_doc>
        </file>
        <id public="1">
            <c path="String"/>
            <haxe_doc>* ID of the part</haxe_doc>
        </id>
        <name public="1">
            <c path="String"/>
            <haxe_doc>* Name of the part</haxe_doc>
        </name>
        <new public="1" set="method" line="86">
            <f a="">
                <x path="Void"/>
            </f>
        </new>
    </class>
    <class path="com.knowledgeplayers.grar.structure.part.TextItem" params=""
           file="/Users/jbrichardet/IdeaProjects/grar/com/knowledgeplayers/grar/structure/part/TextItem.hx">
        <implements path="com.knowledgeplayers.grar.structure.part.PartElement"/>
        <isPart public="1" set="method" line="162">
            <f a="">
                <x path="Bool"/>
            </f>
            <haxe_doc>* @return false</haxe_doc>
        </isPart>
        <isPattern public="1" set="method" line="153">
            <f a="">
                <x path="Bool"/>
            </f>
            <haxe_doc>* @return false</haxe_doc>
        </isPattern>
        <isActivity public="1" set="method" line="144">
            <f a="">
                <x path="Bool"/>
            </f>
            <haxe_doc>* @return false</haxe_doc>
        </isActivity>
        <isText public="1" set="method" line="135">
            <f a="">
                <x path="Bool"/>
            </f>
            <haxe_doc>* @return true</haxe_doc>
        </isText>
        <hasActivity public="1" set="method" line="126">
            <f a="">
                <x path="Bool"/>
            </f>
            <haxe_doc>* @return true if the item starts an activity</haxe_doc>
        </hasActivity>
        <hasVerticalFlow public="1" set="method" line="117">
            <f a="">
                <x path="Bool"/>
            </f>
            <haxe_doc>* @return true if the item starts a vertical flow</haxe_doc>
        </hasVerticalFlow>
        <endScreen public="1" set="null">
            <x path="Bool"/>
        </endScreen>
        <introScreen public="1">
            <a>
                <ref>
                    <c path="String"/>
                </ref>
                <content>
                    <c path="String"/>
                </content>
            </a>
            <haxe_doc>* Introduction screen to show before this item</haxe_doc>
        </introScreen>
        <sound public="1">
            <c path="String"/>
            <haxe_doc>* Sound to play during this item</haxe_doc>
        </sound>
        <token public="1" set="null">
            <c path="String"/>
            <haxe_doc>* Reference to the token in this item</haxe_doc>
        </token>
        <items public="1">
            <c path="haxe.ds.GenericStack_String"/>
            <haxe_doc>* Graphicals items associated with this item</haxe_doc>
        </items>
        <ref public="1">
            <c path="String"/>
            <haxe_doc>* Unique ref that will match the display</haxe_doc>
        </ref>
        <button public="1">
            <a>
                <ref>
                    <c path="String"/>
                </ref>
                <content>
                    <x path="Map">
                        <c path="String"/>
                        <c path="String"/>
                    </x>
                </content>
            </a>
            <haxe_doc>* ID of the button that will appear with this item</haxe_doc>
        </button>
        <background public="1">
            <c path="String"/>
            <haxe_doc>* Background when the item is displayed</haxe_doc>
        </background>
        <transition public="1">
            <c path="String"/>
            <haxe_doc>* Transition between this item and the one before</haxe_doc>
        </transition>
        <author public="1">
            <c path="String"/>
            <haxe_doc>* Character who says this text</haxe_doc>
        </author>
        <content public="1">
            <c path="String"/>
            <haxe_doc>* Text of the item</haxe_doc>
        </content>
        <new public="1" set="method" line="65">
            <f a="?xml:?content">
                <c path="haxe.xml.Fast"/>
                <c path="String"/>
                <x path="Void"/>
            </f>
            <haxe_doc>* Constructor
                * @param xml : fast xml node with structure info
                * @param content : text of the item
            </haxe_doc>
        </new>
    </class>
    <class path="com.knowledgeplayers.grar.structure.part.dialog.Character" params=""
           file="/Users/jbrichardet/IdeaProjects/grar/com/knowledgeplayers/grar/structure/part/dialog/Character.hx">
        <getName public="1" set="method" line="13">
            <f a="">
                <c path="String"/>
            </f>
        </getName>
        <ref public="1">
            <c path="String"/>
        </ref>
        <new public="1" set="method" line="8">
            <f a="?ref">
                <c path="String"/>
                <x path="Void"/>
            </f>
        </new>
    </class>
    <class path="com.knowledgeplayers.grar.structure.part.dialog.DialogPart" params=""
           file="/Users/jbrichardet/IdeaProjects/grar/com/knowledgeplayers/grar/structure/part/dialog/DialogPart.hx">
        <extends path="com.knowledgeplayers.grar.structure.part.StructurePart"/>
        <parseContent set="method" line="31" override="1">
            <f a="content">
                <c path="Xml"/>
                <x path="Void"/>
            </f>
        </parseContent>
        <restart public="1" set="method" line="22" override="1">
            <f a="">
                <x path="Void"/>
            </f>
        </restart>
        <isDialog public="1" set="method" line="16" override="1">
            <f a="">
                <x path="Bool"/>
            </f>
        </isDialog>
        <new public="1" set="method" line="10">
            <f a="">
                <x path="Void"/>
            </f>
        </new>
    </class>
    <class path="com.knowledgeplayers.grar.structure.part.dialog.item.RemarkableEvent" params=""
           file="/Users/jbrichardet/IdeaProjects/grar/com/knowledgeplayers/grar/structure/part/dialog/item/RemarkableEvent.hx">
        <extends path="com.knowledgeplayers.grar.structure.part.TextItem"/>
        <hasActivity public="1" set="method" line="34" override="1">
            <f a="">
                <x path="Bool"/>
            </f>
        </hasActivity>
        <getActivity public="1" set="method" line="29">
            <f a="">
                <t path="Null">
                    <c path="com.knowledgeplayers.grar.structure.activity.Activity"/>
                </t>
            </f>
            <haxe_doc>* @return the activity</haxe_doc>
        </getActivity>
        <activity>
            <c path="haxe.xml.Fast"/>
            <haxe_doc>* Activity to start when this item is reached</haxe_doc>
        </activity>
        <new public="1" set="method" line="18">
            <f a="?xml">
                <c path="haxe.xml.Fast"/>
                <x path="Void"/>
            </f>
            <haxe_doc>* Constructor
                * @param xml : fast xml node with structure infos
            </haxe_doc>
        </new>
    </class>
    <class path="com.knowledgeplayers.grar.structure.part.dialog.pattern.ActivityPattern" params=""
           file="/Users/jbrichardet/IdeaProjects/grar/com/knowledgeplayers/grar/structure/part/dialog/pattern/ActivityPattern.hx">
        <extends path="com.knowledgeplayers.grar.structure.part.Pattern"/>
        <init public="1" set="method" line="18" override="1">
            <f a="xml">
                <c path="haxe.xml.Fast"/>
                <x path="Void"/>
            </f>
        </init>
        <event public="1">
            <c path="com.knowledgeplayers.grar.structure.part.dialog.item.RemarkableEvent"/>
            <haxe_doc>* Item that will trigger an activity</haxe_doc>
        </event>
        <new public="1" set="method" line="13">
            <f a="name">
                <c path="String"/>
                <x path="Void"/>
            </f>
        </new>
    </class>
    <class path="com.knowledgeplayers.grar.structure.part.dialog.pattern.ChoicePattern" params=""
           file="/Users/jbrichardet/IdeaProjects/grar/com/knowledgeplayers/grar/structure/part/dialog/pattern/ChoicePattern.hx">
        <extends path="com.knowledgeplayers.grar.structure.part.Pattern"/>
        <hasChoices public="1" set="method" line="62" override="1">
            <f a="">
                <x path="Bool"/>
            </f>
            <haxe_doc>* @return true</haxe_doc>
        </hasChoices>
        <getNextItem public="1" set="method" line="53" override="1">
            <f a="">
                <t path="Null">
                    <c path="com.knowledgeplayers.grar.structure.part.TextItem"/>
                </t>
            </f>
        </getNextItem>
        <init public="1" set="method" line="40" override="1">
            <f a="xml">
                <c path="haxe.xml.Fast"/>
                <x path="Void"/>
            </f>
        </init>
        <tooltipTransition public="1">
            <c path="String"/>
            <haxe_doc>* Reference to the tooltip transition</haxe_doc>
        </tooltipTransition>
        <tooltipRef public="1">
            <c path="String"/>
            <haxe_doc>* Reference to the tooltip area</haxe_doc>
        </tooltipRef>
        <choices public="1">
            <x path="Map">
                <c path="String"/>
                <t path="com.knowledgeplayers.grar.structure.part.dialog.pattern.Choice"/>
            </x>
            <haxe_doc>* All the choices for this pattern</haxe_doc>
        </choices>
        <minimumChoice public="1">
            <x path="Int"/>
            <haxe_doc>* Minimum choices that needs to be explored before leaving the pattern</haxe_doc>
        </minimumChoice>
        <new public="1" set="method" line="34">
            <f a="name">
                <c path="String"/>
                <x path="Void"/>
            </f>
            <haxe_doc>* Constructor
                * @param name : Name of the pattern
            </haxe_doc>
        </new>
        <haxe_doc>* Junction pattern with multiple choices for multiple direction</haxe_doc>
    </class>
    <typedef path="com.knowledgeplayers.grar.structure.part.dialog.pattern.Choice" params=""
             file="/Users/jbrichardet/IdeaProjects/grar/com/knowledgeplayers/grar/structure/part/dialog/pattern/ChoicePattern.hx"
             module="com.knowledgeplayers.grar.structure.part.dialog.pattern.ChoicePattern">
        <a>
            <viewed>
                <x path="Bool"/>
            </viewed>
            <toolTip>
                <c path="String"/>
            </toolTip>
            <ref>
                <c path="String"/>
            </ref>
            <goTo>
                <c path="String"/>
            </goTo>
        </a>
    </typedef>
    <class path="com.knowledgeplayers.grar.structure.part.strip.StripPart" params=""
           file="/Users/jbrichardet/IdeaProjects/grar/com/knowledgeplayers/grar/structure/part/strip/StripPart.hx">
        <extends path="com.knowledgeplayers.grar.structure.part.StructurePart"/>
        <parseContent set="method" line="28" override="1">
            <f a="content">
                <c path="Xml"/>
                <x path="Void"/>
            </f>
        </parseContent>
        <isStrip public="1" set="method" line="20" override="1">
            <f a="">
                <x path="Bool"/>
            </f>
            <haxe_doc>* @return true</haxe_doc>
        </isStrip>
        <new public="1" set="method" line="10">
            <f a="">
                <x path="Void"/>
            </f>
        </new>
    </class>
    <class path="com.knowledgeplayers.grar.structure.part.strip.pattern.BoxPattern" params=""
           file="/Users/jbrichardet/IdeaProjects/grar/com/knowledgeplayers/grar/structure/part/strip/pattern/BoxPattern.hx">
        <extends path="com.knowledgeplayers.grar.structure.part.Pattern"/>
        <new public="1" set="method" line="11">
            <f a="name">
                <c path="String"/>
                <x path="Void"/>
            </f>
            <haxe_doc>* Constructor
                * @param name : Name of the pattern
            </haxe_doc>
        </new>
    </class>
    <class path="com.knowledgeplayers.grar.structure.score.Perk" params=""
           file="/Users/jbrichardet/IdeaProjects/grar/com/knowledgeplayers/grar/structure/score/Perk.hx">
        <toString public="1" set="method" line="60">
            <f a="">
                <c path="String"/>
            </f>
            <haxe_doc>* @return a string-based representation of the object</haxe_doc>
        </toString>
        <getScore public="1" set="method" line="46">
            <f a="">
                <x path="Int"/>
            </f>
            <haxe_doc>* @return the total score for this perk</haxe_doc>
        </getScore>
        <susbscribeActivity public="1" set="method" line="37">
            <f a="activity">
                <c path="com.knowledgeplayers.grar.structure.activity.Activity"/>
                <x path="Void"/>
            </f>
            <haxe_doc>* Subscribe an activity to this perk. The score of this activity will be
                * added to the perk score
                * @param activity
            </haxe_doc>
        </susbscribeActivity>
        <activities public="1" set="null">
            <c path="haxe.ds.GenericStack_com_knowledgeplayers_grar_structure_activity_Activity"/>
            <haxe_doc>* Activities who subscribes to this perk</haxe_doc>
        </activities>
        <name public="1">
            <c path="String"/>
            <haxe_doc>* Name of the perk</haxe_doc>
        </name>
        <new public="1" set="method" line="25">
            <f a="name">
                <c path="String"/>
                <x path="Void"/>
            </f>
            <haxe_doc>* Constructor
                * @param name : Name of the perk
            </haxe_doc>
        </new>
        <haxe_doc>* Pedagogic skill representation</haxe_doc>
    </class>
    <class path="com.knowledgeplayers.grar.structure.score.ScoreChart" params=""
           file="/Users/jbrichardet/IdeaProjects/grar/com/knowledgeplayers/grar/structure/score/ScoreChart.hx">
        <instance public="1" get="accessor" set="null" static="1">
            <c path="com.knowledgeplayers.grar.structure.score.ScoreChart"/>
            <haxe_doc>* Instance</haxe_doc>
        </instance>
        <get_instance public="1" set="method" line="23" static="1">
            <f a="">
                <c path="com.knowledgeplayers.grar.structure.score.ScoreChart"/>
            </f>
            <haxe_doc>* @return the instance</haxe_doc>
        </get_instance>
        <toString public="1" set="method" line="53">
            <f a="">
                <c path="String"/>
            </f>
            <haxe_doc>* @return a string-based representation of the object</haxe_doc>
        </toString>
        <subscribe public="1" set="method" line="36">
            <f a="perkName:activity">
                <c path="String"/>
                <c path="com.knowledgeplayers.grar.structure.activity.Activity"/>
                <x path="Void"/>
            </f>
            <haxe_doc>* Link an activity to a perk
                * @param perkName : Name of the perk
                * @param activity : Activity to link
            </haxe_doc>
        </subscribe>
        <perks public="1" set="null">
            <x path="Map">
                <c path="String"/>
                <c path="com.knowledgeplayers.grar.structure.score.Perk"/>
            </x>
            <haxe_doc>* Hash of all the perks in the game</haxe_doc>
        </perks>
        <new set="method" line="60">
            <f a="">
                <x path="Void"/>
            </f>
        </new>
        <haxe_doc>* Concatenates all the score from the activities and organizes it per skills</haxe_doc>
    </class>
    <class path="com.knowledgeplayers.grar.tracking.ITracking" params=""
           file="/Users/jbrichardet/IdeaProjects/grar/com/knowledgeplayers/grar/tracking/ITracking.hx" interface="1">
        <extends path="flash.events.IEventDispatcher"/>
        <clearDatas public="1" set="method">
            <f a="">
                <x path="Void"/>
            </f>
        </clearDatas>
        <setSuspend public="1" set="method">
            <f a="suspention">
                <c path="String"/>
                <x path="Void"/>
            </f>
        </setSuspend>
        <getSuspend public="1" set="method">
            <f a="">
                <c path="String"/>
            </f>
        </getSuspend>
        <getMasteryScore public="1" set="method">
            <f a="">
                <x path="Int"/>
            </f>
        </getMasteryScore>
        <exitAU public="1" set="method">
            <f a="">
                <x path="Void"/>
            </f>
        </exitAU>
        <putparam public="1" set="method">
            <f a="">
                <x path="Void"/>
            </f>
        </putparam>
        <setScore public="1" set="method">
            <f a="score">
                <x path="Int"/>
                <x path="Void"/>
            </f>
        </setScore>
        <getScore public="1" set="method">
            <f a="">
                <x path="Int"/>
            </f>
        </getScore>
        <setStatus public="1" set="method">
            <f a="status">
                <x path="Bool"/>
                <x path="Void"/>
            </f>
        </setStatus>
        <getStatus public="1" set="method">
            <f a="">
                <c path="String"/>
            </f>
        </getStatus>
        <setLocation public="1" set="method">
            <f a="location">
                <c path="String"/>
                <x path="Void"/>
            </f>
        </setLocation>
        <getLocation public="1" set="method">
            <f a="">
                <c path="String"/>
            </f>
        </getLocation>
        <init public="1" set="method">
            <f a="?isNote:?activation">
                <x path="Bool"/>
                <c path="String"/>
                <x path="Void"/>
            </f>
        </init>
        <activation public="1" set="method">
            <f a="activation">
                <c path="String"/>
                <x path="Void"/>
            </f>
        </activation>
    </class>
    <class path="com.knowledgeplayers.grar.tracking.Tracking" params=""
           file="/Users/jbrichardet/IdeaProjects/grar/com/knowledgeplayers/grar/tracking/Tracking.hx">
        <implements path="com.knowledgeplayers.grar.tracking.ITracking"/>
        <clearDatas public="1" set="method" line="97">
            <f a="">
                <x path="Void"/>
            </f>
        </clearDatas>
        <setSuspend public="1" set="method" line="94">
            <f a="suspention">
                <c path="String"/>
                <x path="Void"/>
            </f>
        </setSuspend>
        <getSuspend public="1" set="method" line="91">
            <f a="">
                <c path="String"/>
            </f>
        </getSuspend>
        <getMasteryScore public="1" set="method" line="88">
            <f a="">
                <x path="Int"/>
            </f>
        </getMasteryScore>
        <exitAU public="1" set="method" line="85">
            <f a="">
                <x path="Void"/>
            </f>
        </exitAU>
        <putparam public="1" set="method" line="82">
            <f a="">
                <x path="Void"/>
            </f>
        </putparam>
        <setScore public="1" set="method" line="79">
            <f a="score">
                <x path="Int"/>
                <x path="Void"/>
            </f>
        </setScore>
        <setStatus public="1" set="method" line="76">
            <f a="status">
                <x path="Bool"/>
                <x path="Void"/>
            </f>
        </setStatus>
        <getStatus public="1" set="method" line="73">
            <f a="">
                <c path="String"/>
            </f>
        </getStatus>
        <setLocation public="1" set="method" line="70">
            <f a="location">
                <c path="String"/>
                <x path="Void"/>
            </f>
        </setLocation>
        <getLocation public="1" set="method" line="67">
            <f a="">
                <c path="String"/>
            </f>
        </getLocation>
        <init public="1" set="method" line="64">
            <f a="?isNote:?activation">
                <x path="Bool"/>
                <c path="String"/>
                <x path="Void"/>
            </f>
        </init>
        <activation public="1" set="method" line="61">
            <f a="activation">
                <c path="String"/>
                <x path="Void"/>
            </f>
        </activation>
        <getScore public="1" set="method" line="53">
            <f a="">
                <x path="Int"/>
            </f>
        </getScore>
        <removeEventListener public="1" set="method" line="48">
            <f a="type:listener:?useCapture">
                <c path="String"/>
                <f a="">
                    <d/>
                    <x path="Void"/>
                </f>
                <x path="Bool"/>
                <x path="Void"/>
            </f>
        </removeEventListener>
        <hasEventListener public="1" set="method" line="43">
            <f a="type">
                <c path="String"/>
                <x path="Bool"/>
            </f>
        </hasEventListener>
        <dispatchEvent public="1" set="method" line="38">
            <f a="event">
                <t path="nme.events.Event"/>
                <x path="Bool"/>
            </f>
        </dispatchEvent>
        <addEventListener public="1" set="method" line="33">
            <f a="type:listener:?useCapture:?priority:?useWeakReference">
                <c path="String"/>
                <f a="">
                    <d/>
                    <x path="Void"/>
                </f>
                <x path="Bool"/>
                <x path="Int"/>
                <x path="Bool"/>
                <x path="Void"/>
            </f>
        </addEventListener>
        <willTrigger public="1" set="method" line="28">
            <f a="type">
                <c path="String"/>
                <x path="Bool"/>
            </f>
        </willTrigger>
        <toString public="1" set="method" line="23">
            <f a="">
                <c path="String"/>
            </f>
        </toString>
        <event>
            <t path="nme.events.EventDispatcher"/>
        </event>
        <suivi public="1">
            <c path="String"/>
        </suivi>
        <masteryScore public="1">
            <x path="Int"/>
        </masteryScore>
        <score public="1">
            <c path="String"/>
        </score>
        <lessonStatus public="1">
            <c path="String"/>
        </lessonStatus>
        <studentName public="1">
            <c path="String"/>
        </studentName>
        <studentId public="1">
            <c path="String"/>
        </studentId>
        <new set="method" line="18">
            <f a="">
                <x path="Void"/>
            </f>
        </new>
    </class>
    <class path="com.knowledgeplayers.grar.tracking.AiccTracking" params=""
           file="/Users/jbrichardet/IdeaProjects/grar/com/knowledgeplayers/grar/tracking/AiccTracking.hx">
        <extends path="com.knowledgeplayers.grar.tracking.Tracking"/>
        <exitAU public="1" set="method" line="313" override="1">
            <f a="">
                <x path="Void"/>
            </f>
        </exitAU>
        <putParamError public="1" set="method" line="308">
            <f a="e">
                <t path="nme.events.IOErrorEvent"/>
                <x path="Void"/>
            </f>
        </putParamError>
        <putParamSuccessful public="1" set="method" line="302">
            <f a="e">
                <t path="nme.events.Event"/>
                <x path="Void"/>
            </f>
        </putParamSuccessful>
        <putparam public="1" set="method" line="268" override="1">
            <f a="">
                <x path="Void"/>
            </f>
        </putparam>
        <returnFormatedTime public="1" set="method" line="246">
            <f a="">
                <c path="String"/>
            </f>
        </returnFormatedTime>
        <getMasteryScore public="1" set="method" line="241" override="1">
            <f a="">
                <x path="Int"/>
            </f>
        </getMasteryScore>
        <setScore public="1" set="method" line="228" override="1">
            <f a="score">
                <x path="Int"/>
                <x path="Void"/>
            </f>
        </setScore>
        <getSuspend public="1" set="method" line="222" override="1">
            <f a="">
                <c path="String"/>
            </f>
        </getSuspend>
        <setSuspend public="1" set="method" line="217" override="1">
            <f a="suspention">
                <c path="String"/>
                <x path="Void"/>
            </f>
        </setSuspend>
        <setStatus public="1" set="method" line="188" override="1">
            <f a="status">
                <x path="Bool"/>
                <x path="Void"/>
            </f>
        </setStatus>
        <getStatus public="1" set="method" line="183" override="1">
            <f a="">
                <c path="String"/>
            </f>
        </getStatus>
        <setLocation public="1" set="method" line="177" override="1">
            <f a="location">
                <c path="String"/>
                <x path="Void"/>
            </f>
        </setLocation>
        <getLocation public="1" set="method" line="172" override="1">
            <f a="">
                <c path="String"/>
            </f>
        </getLocation>
        <loadDatas public="1" set="method" line="128">
            <f a="datas:isNote">
                <c path="String"/>
                <x path="Bool"/>
                <x path="Void"/>
            </f>
        </loadDatas>
        <getParamError public="1" set="method" line="123">
            <f a="e">
                <t path="nme.events.IOErrorEvent"/>
                <x path="Void"/>
            </f>
        </getParamError>
        <getParamSuccessful public="1" set="method" line="116">
            <f a="e">
                <t path="nme.events.Event"/>
                <x path="Void"/>
            </f>
        </getParamSuccessful>
        <init public="1" set="method" line="59" override="1">
            <f a="?isNote:?activation">
                <x path="Bool"/>
                <c path="String"/>
                <x path="Void"/>
            </f>
        </init>
        <activation public="1" set="method" line="44" override="1">
            <f a="activation">
                <c path="String"/>
                <x path="Void"/>
            </f>
        </activation>
        <note public="1">
            <x path="Bool"/>
        </note>
        <scriptVars public="1">
            <t path="nme.net.URLVariables"/>
        </scriptVars>
        <scriptLoader public="1">
            <t path="nme.net.URLLoader"/>
        </scriptLoader>
        <scriptRequest public="1">
            <t path="nme.net.URLRequest"/>
        </scriptRequest>
        <timer public="1">
            <t path="nme.utils.Timer"/>
        </timer>
        <startTime public="1">
            <x path="Int"/>
        </startTime>
        <isActive public="1">
            <x path="Bool"/>
        </isActive>
        <isNote public="1">
            <x path="Bool"/>
        </isNote>
        <lesson_location public="1">
            <c path="String"/>
        </lesson_location>
        <_aicc_url public="1">
            <c path="String"/>
        </_aicc_url>
        <_aicc_sid public="1">
            <c path="String"/>
        </_aicc_sid>
        <new public="1" set="method" line="31">
            <f a="">
                <x path="Void"/>
            </f>
        </new>
    </class>
    <class path="com.knowledgeplayers.grar.tracking.AutoTracking" params=""
           file="/Users/jbrichardet/IdeaProjects/grar/com/knowledgeplayers/grar/tracking/AutoTracking.hx">
        <extends path="com.knowledgeplayers.grar.tracking.Tracking"/>
        <onFlushStatus set="method" line="189">
            <f a="event">
                <t path="nme.events.Event"/>
                <x path="Void"/>
            </f>
        </onFlushStatus>
        <clearDatas public="1" set="method" line="184" override="1">
            <f a="">
                <x path="Void"/>
            </f>
        </clearDatas>
        <getSuspend public="1" set="method" line="178" override="1">
            <f a="">
                <c path="String"/>
            </f>
        </getSuspend>
        <setSuspend public="1" set="method" line="173" override="1">
            <f a="suspention">
                <c path="String"/>
                <x path="Void"/>
            </f>
        </setSuspend>
        <getMasteryScore public="1" set="method" line="168" override="1">
            <f a="">
                <x path="Int"/>
            </f>
        </getMasteryScore>
        <load public="1" set="method" line="159">
            <f a="">
                <x path="Void"/>
            </f>
        </load>
        <save public="1" set="method" line="133">
            <f a="">
                <x path="Void"/>
            </f>
        </save>
        <exitAU public="1" set="method" line="128" override="1">
            <f a="">
                <x path="Void"/>
            </f>
        </exitAU>
        <putparam public="1" set="method" line="121" override="1">
            <f a="">
                <x path="Void"/>
            </f>
        </putparam>
        <setScore public="1" set="method" line="104" override="1">
            <f a="score">
                <x path="Int"/>
                <x path="Void"/>
            </f>
        </setScore>
        <setStatus public="1" set="method" line="75" override="1">
            <f a="status">
                <x path="Bool"/>
                <x path="Void"/>
            </f>
        </setStatus>
        <getStatus public="1" set="method" line="70" override="1">
            <f a="">
                <c path="String"/>
            </f>
        </getStatus>
        <setLocation public="1" set="method" line="61" override="1">
            <f a="location">
                <c path="String"/>
                <x path="Void"/>
            </f>
        </setLocation>
        <getLocation public="1" set="method" line="56" override="1">
            <f a="">
                <c path="String"/>
            </f>
        </getLocation>
        <init public="1" set="method" line="42" override="1">
            <f a="?isNote:?activation">
                <x path="Bool"/>
                <c path="String"/>
                <x path="Void"/>
            </f>
        </init>
        <activation public="1" set="method" line="26" override="1">
            <f a="activation">
                <c path="String"/>
                <x path="Void"/>
            </f>
        </activation>
        <mySo>
            <t path="nme.net.SharedObject"/>
        </mySo>
        <isActive public="1">
            <x path="Bool"/>
        </isActive>
        <isNote public="1">
            <x path="Bool"/>
        </isNote>
        <lesson_location public="1">
            <c path="String"/>
        </lesson_location>
        <new public="1" set="method" line="16">
            <f a="">
                <x path="Void"/>
            </f>
        </new>
    </class>
    <class path="com.knowledgeplayers.grar.tracking.Connection" params=""
           file="/Users/jbrichardet/IdeaProjects/grar/com/knowledgeplayers/grar/tracking/Connection.hx">
        <extends path="flash.events.EventDispatcher"/>
        <revertTracking public="1" set="method" line="40">
            <f a="">
                <c path="com.knowledgeplayers.grar.tracking.StateInfos"/>
            </f>
        </revertTracking>
        <computeTracking public="1" set="method" line="30">
            <f a="stateInfos">
                <c path="com.knowledgeplayers.grar.tracking.StateInfos"/>
                <x path="Void"/>
            </f>
        </computeTracking>
        <initConnection public="1" set="method" line="14">
            <f a="mode:?isNote">
                <e path="com.knowledgeplayers.grar.tracking.Mode"/>
                <x path="Bool"/>
                <x path="Void"/>
            </f>
        </initConnection>
        <tracking public="1" set="null">
            <c path="com.knowledgeplayers.grar.tracking.Tracking"/>
        </tracking>
        <new public="1" set="method" line="9">
            <f a="">
                <x path="Void"/>
            </f>
        </new>
    </class>
    <enum path="com.knowledgeplayers.grar.tracking.Mode" params=""
          file="/Users/jbrichardet/IdeaProjects/grar/com/knowledgeplayers/grar/tracking/Connection.hx"
          module="com.knowledgeplayers.grar.tracking.Connection">
        <SCORM2004/>
        <SCORM/>
        <AUTO/>
        <AICC/>
    </enum>
    <class path="com.knowledgeplayers.grar.tracking.Scorm" params=""
           file="/Users/jbrichardet/IdeaProjects/grar/com/knowledgeplayers/grar/tracking/Scorm.hx">
        <__stringToBool set="method" line="255">
            <f a="value">
                <c path="String"/>
                <x path="Bool"/>
            </f>
        </__stringToBool>
        <__displayDebugInfo set="method" line="245">
            <f a="msg">
                <c path="String"/>
                <x path="Void"/>
            </f>
        </__displayDebugInfo>
        <__getDiagnosticInfo set="method" line="237">
            <f a="errorCode">
                <x path="Int"/>
                <c path="String"/>
            </f>
        </__getDiagnosticInfo>
        <__getDebugInfo set="method" line="229">
            <f a="errorCode">
                <x path="Int"/>
                <c path="String"/>
            </f>
        </__getDebugInfo>
        <__getDebugCode set="method" line="221">
            <f a="">
                <x path="Int"/>
            </f>
        </__getDebugCode>
        <__save set="method" line="198">
            <f a="">
                <x path="Bool"/>
            </f>
        </__save>
        <__set set="method" line="176">
            <f a="parameter:value">
                <c path="String"/>
                <c path="String"/>
                <x path="Bool"/>
            </f>
        </__set>
        <__get set="method" line="150">
            <f a="parameter">
                <c path="String"/>
                <c path="String"/>
            </f>
        </__get>
        <__disconnect set="method" line="126">
            <f a="">
                <x path="Bool"/>
            </f>
        </__disconnect>
        <__connect set="method" line="89">
            <f a="">
                <x path="Bool"/>
            </f>
        </__connect>
        <save public="1" set="method" line="82">
            <f a="">
                <x path="Bool"/>
            </f>
        </save>
        <set public="1" set="method" line="76">
            <f a="parameter:value">
                <c path="String"/>
                <c path="String"/>
                <x path="Bool"/>
            </f>
        </set>
        <get public="1" set="method" line="69">
            <f a="param">
                <c path="String"/>
                <c path="String"/>
            </f>
        </get>
        <disconnect public="1" set="method" line="64">
            <f a="">
                <x path="Bool"/>
            </f>
        </disconnect>
        <connect public="1" set="method" line="58">
            <f a="">
                <x path="Bool"/>
            </f>
        </connect>
        <getDebugMode public="1" set="method" line="53">
            <f a="">
                <x path="Bool"/>
            </f>
        </getDebugMode>
        <setDebugMode public="1" set="method" line="48">
            <f a="status">
                <x path="Bool"/>
                <x path="Void"/>
            </f>
        </setDebugMode>
        <__debugActive>
            <x path="Bool"/>
        </__debugActive>
        <__connectionActive>
            <x path="Bool"/>
        </__connectionActive>
        <new public="1" set="method" line="10">
            <f a="">
                <x path="Void"/>
            </f>
        </new>
    </class>
    <class path="com.knowledgeplayers.grar.tracking.ScormTracking" params=""
           file="/Users/jbrichardet/IdeaProjects/grar/com/knowledgeplayers/grar/tracking/ScormTracking.hx">
        <extends path="com.knowledgeplayers.grar.tracking.Tracking"/>
        <clearDatas public="1" set="method" line="302" override="1">
            <f a="">
                <x path="Void"/>
            </f>
        </clearDatas>
        <exitAU public="1" set="method" line="297" override="1">
            <f a="">
                <x path="Void"/>
            </f>
        </exitAU>
        <isScoAvailable public="1" set="method" line="290">
            <f a="identifier">
                <c path="String"/>
                <x path="Bool"/>
            </f>
        </isScoAvailable>
        <navigateToSco public="1" set="method" line="281">
            <f a="identifier">
                <c path="String"/>
                <x path="Bool"/>
            </f>
        </navigateToSco>
        <putparam public="1" set="method" line="259" override="1">
            <f a="">
                <x path="Void"/>
            </f>
        </putparam>
        <returnFormatedTime public="1" set="method" line="237">
            <f a="">
                <c path="String"/>
            </f>
        </returnFormatedTime>
        <getMasteryScore public="1" set="method" line="232" override="1">
            <f a="">
                <x path="Int"/>
            </f>
        </getMasteryScore>
        <setScore public="1" set="method" line="210" override="1">
            <f a="score">
                <x path="Int"/>
                <x path="Void"/>
            </f>
        </setScore>
        <setStatus public="1" set="method" line="165" override="1">
            <f a="status">
                <x path="Bool"/>
                <x path="Void"/>
            </f>
        </setStatus>
        <setSuccessStatus public="1" set="method" line="144">
            <f a="isSucces">
                <x path="Bool"/>
                <x path="Void"/>
            </f>
        </setSuccessStatus>
        <getSuccessStatus public="1" set="method" line="132">
            <f a="">
                <c path="String"/>
            </f>
        </getSuccessStatus>
        <getStatus public="1" set="method" line="127" override="1">
            <f a="">
                <c path="String"/>
            </f>
        </getStatus>
        <setSuspend public="1" set="method" line="113" override="1">
            <f a="suspention">
                <c path="String"/>
                <x path="Void"/>
            </f>
        </setSuspend>
        <getSuspend public="1" set="method" line="108" override="1">
            <f a="">
                <c path="String"/>
            </f>
        </getSuspend>
        <setLocation public="1" set="method" line="94" override="1">
            <f a="location">
                <c path="String"/>
                <x path="Void"/>
            </f>
        </setLocation>
        <getLocation public="1" set="method" line="89" override="1">
            <f a="">
                <c path="String"/>
            </f>
        </getLocation>
        <init public="1" set="method" line="48" override="1">
            <f a="?isNote:?activation">
                <x path="Bool"/>
                <c path="String"/>
                <x path="Void"/>
            </f>
        </init>
        <activation public="1" set="method" line="30" override="1">
            <f a="activation">
                <c path="String"/>
                <x path="Void"/>
            </f>
        </activation>
        <scorm public="1">
            <c path="com.knowledgeplayers.grar.tracking.Scorm"/>
        </scorm>
        <is2004 public="1">
            <x path="Bool"/>
        </is2004>
        <timer public="1">
            <t path="nme.utils.Timer"/>
        </timer>
        <startTime public="1">
            <x path="Int"/>
        </startTime>
        <isActive public="1">
            <x path="Bool"/>
        </isActive>
        <isNote public="1">
            <x path="Bool"/>
        </isNote>
        <suspend_data public="1">
            <c path="String"/>
        </suspend_data>
        <lesson_location public="1">
            <c path="String"/>
        </lesson_location>
        <success_status public="1">
            <c path="String"/>
        </success_status>
        <new public="1" set="method" line="20">
            <f a="?is2004">
                <x path="Bool"/>
                <x path="Void"/>
            </f>
        </new>
    </class>
    <class path="com.knowledgeplayers.grar.tracking.StateInfos" params=""
           file="/Users/jbrichardet/IdeaProjects/grar/com/knowledgeplayers/grar/tracking/StateInfos.hx">
        <completionString set="method" line="74">
            <f a="">
                <c path="String"/>
            </f>
        </completionString>
        <toString public="1" set="method" line="67">
            <f a="">
                <c path="String"/>
            </f>
        </toString>
        <isEmpty public="1" set="method" line="62">
            <f a="">
                <x path="Bool"/>
            </f>
        </isEmpty>
        <isPartFinished public="1" set="method" line="57">
            <f a="partId">
                <c path="String"/>
                <x path="Bool"/>
            </f>
        </isPartFinished>
        <setPartFinished public="1" set="method" line="52">
            <f a="partId">
                <c path="String"/>
                <x path="Void"/>
            </f>
        </setPartFinished>
        <saveStateInfos public="1" set="method" line="38">
            <f a="">
                <c path="String"/>
            </f>
        </saveStateInfos>
        <loadStateInfos public="1" set="method" line="21">
            <f a="state">
                <c path="String"/>
                <x path="Void"/>
            </f>
        </loadStateInfos>
        <allItem>
            <c path="Array">
                <c path="com.knowledgeplayers.grar.tracking.Trackable"/>
            </c>
        </allItem>
        <completionOrdered>
            <c path="Array">
                <c path="String"/>
            </c>
        </completionOrdered>
        <completion>
            <x path="Map">
                <c path="String"/>
                <x path="Int"/>
            </x>
        </completion>
        <checksum public="1">
            <x path="Int"/>
        </checksum>
        <bookmark public="1">
            <x path="Int"/>
        </bookmark>
        <currentLanguage public="1">
            <c path="String"/>
        </currentLanguage>
        <new public="1" set="method" line="14">
            <f a="">
                <x path="Void"/>
            </f>
        </new>
    </class>
    <class path="com.knowledgeplayers.grar.util.DisplayUtils" params=""
           file="/Users/jbrichardet/IdeaProjects/grar/com/knowledgeplayers/grar/util/DisplayUtils.hx">
        <getPressedId public="1" set="method" line="25" static="1">
            <f a="buttonId">
                <c path="String"/>
                <c path="String"/>
            </f>
            <haxe_doc>* Get the pressed ID of a button
                * @param buttonId : ID of the button
                * @return the pressed ID for this button
            </haxe_doc>
        </getPressedId>
        <setBackground public="1" set="method" line="40" static="1">
            <f a="bkg:container:?width:?height:?alpha:?x:?y">
                <c path="String"/>
                <t path="nme.display.Sprite"/>
                <x path="Float"/>
                <x path="Float"/>
                <x path="Float"/>
                <x path="Float"/>
                <x path="Float"/>
                <t path="Null">
                    <t path="nme.display.Bitmap"/>
                </t>
            </f>
            <haxe_doc>* Set the background of a sprite
                * @param bkg : String with an Int representing the color of the background or an ID of the BitmapData
                * @param container : Sprite where the background will be set
                * @param width : Force width of the background. If 0, the width will be the width of the container
                * @param height : Force height of the background. If 0, the height will be the height of the container
                * @return the bitmap of the background if there was any
            </haxe_doc>
        </setBackground>
        <initSprite public="1" set="method" line="69" static="1">
            <f a="sprite:?width:?height:?color:?alpha:?x:?y">
                <t path="nme.display.Sprite"/>
                <x path="Float"/>
                <x path="Float"/>
                <x path="Int"/>
                <x path="Float"/>
                <x path="Float"/>
                <x path="Float"/>
                <x path="Void"/>
            </f>
            <haxe_doc>* Init a sprite with a rectangle
                * @param sprite : Sprite to init
                * @param width : Width of the rectangle
                * @param height : Height of the rectangle
                * @param color : Color of the rectangle
                * @param alpha : Alpha of the color
            </haxe_doc>
        </initSprite>
        <getBitmapDataFromLayer public="1" set="method" line="85" static="1">
            <f a="tilesheet:tileId">
                <c path="aze.display.TilesheetEx"/>
                <c path="String"/>
                <t path="nme.display.BitmapData"/>
            </f>
            <haxe_doc>* @param layer : Layer with all tiles
                * @param tileId : Id of the tile to get
                * @return the bitmapData in the given tile
            </haxe_doc>
        </getBitmapDataFromLayer>
        <new set="method" line="16">
            <f a="">
                <x path="Void"/>
            </f>
        </new>
        <haxe_doc>* Utility class for display</haxe_doc>
    </class>
    <class path="com.knowledgeplayers.grar.util.Grid" params=""
           file="/Users/jbrichardet/IdeaProjects/grar/com/knowledgeplayers/grar/util/Grid.hx">
        <empty public="1" set="method" line="104">
            <f a="">
                <x path="Void"/>
            </f>
        </empty>
        <add public="1" set="method" line="57">
            <f a="object:?withTween">
                <t path="nme.display.DisplayObject"/>
                <x path="Bool"/>
                <x path="Void"/>
            </f>
        </add>
        <nextCell>
            <t path="nme.geom.Point"/>
        </nextCell>
        <alignment public="1">
            <e path="com.knowledgeplayers.grar.util.GridAlignment"/>
            <haxe_doc>* Align the element in the cell, if the cell is too large</haxe_doc>
        </alignment>
        <gapRow public="1">
            <x path="Float"/>
        </gapRow>
        <gapCol public="1">
            <x path="Float"/>
        </gapCol>
        <y public="1">
            <x path="Float"/>
            <haxe_doc>* Y of the grid</haxe_doc>
        </y>
        <x public="1">
            <x path="Float"/>
            <haxe_doc>* X of the grid</haxe_doc>
        </x>
        <cellSize public="1">
            <a>
                <width>
                    <x path="Float"/>
                </width>
                <height>
                    <x path="Float"/>
                </height>
            </a>
            <haxe_doc>* Size of a cell</haxe_doc>
        </cellSize>
        <numCol public="1">
            <x path="Int"/>
            <haxe_doc>* Number of columns</haxe_doc>
        </numCol>
        <numRow public="1">
            <x path="Int"/>
            <haxe_doc>* Number of rows</haxe_doc>
        </numRow>
        <new public="1" set="method" line="42">
            <f a="numRow:numCol:?cellWidth:?cellHeight:?gapCol:?gapRow:?alignment">
                <x path="Int"/>
                <x path="Int"/>
                <x path="Float"/>
                <x path="Float"/>
                <x path="Float"/>
                <x path="Float"/>
                <e path="com.knowledgeplayers.grar.util.GridAlignment"/>
                <x path="Void"/>
            </f>
        </new>
        <haxe_doc>* Manage a grid to place object</haxe_doc>
    </class>
    <enum path="com.knowledgeplayers.grar.util.GridAlignment" params=""
          file="/Users/jbrichardet/IdeaProjects/grar/com/knowledgeplayers/grar/util/Grid.hx"
          module="com.knowledgeplayers.grar.util.Grid">
        <TOP_RIGHT/>
        <TOP_MIDDLE/>
        <TOP_LEFT/>
        <MIDDLE_RIGHT/>
        <MIDDLE_LEFT/>
        <CENTER/>
        <BOTTOM_RIGHT/>
        <BOTTOM_MIDDLE/>
        <BOTTOM_LEFT/>
    </enum>
    <class path="com.knowledgeplayers.grar.util.KeyboardManager" params=""
           file="/Users/jbrichardet/IdeaProjects/grar/com/knowledgeplayers/grar/util/KeyboardManager.hx">
        <init public="1" set="method" line="30" static="1">
            <f a="">
                <x path="Void"/>
            </f>
        </init>
        <keyDownHandler set="method" line="38" static="1">
            <f a="e">
                <t path="nme.events.KeyboardEvent"/>
                <x path="Void"/>
            </f>
        </keyDownHandler>
        <keyUpHandler set="method" line="61" static="1">
            <f a="ev">
                <t path="nme.events.KeyboardEvent"/>
                <x path="Void"/>
            </f>
        </keyUpHandler>
        <haxe_doc>* Utility class to manage Keyboard inputs</haxe_doc>
    </class>
    <class path="com.knowledgeplayers.utils.assets.AssetsStorage" params=""
           file="/Users/jbrichardet/Development/assets-management/src/com/knowledgeplayers/utils/assets/AssetsStorage.hx">
        <container line="20" static="1">
            <x path="Map">
                <c path="String"/>
                <c path="com.knowledgeplayers.utils.assets.interfaces.IAsset"/>
            </x>
        </container>
        <setAsset public="1" set="method" line="22" static="1">
            <f a="asset">
                <c path="com.knowledgeplayers.utils.assets.interfaces.IAsset"/>
                <x path="Void"/>
            </f>
        </setAsset>
        <removedAssetHandler set="method" line="28" static="1">
            <f a="event">
                <c path="flash.events.Event"/>
                <x path="Void"/>
            </f>
        </removedAssetHandler>
        <hasAsset public="1" set="method" line="36" static="1">
            <f a="id">
                <c path="String"/>
                <x path="Bool"/>
            </f>
        </hasAsset>
        <getAsset public="1" set="method" line="41" static="1">
            <f a="id">
                <c path="String"/>
                <c path="com.knowledgeplayers.utils.assets.interfaces.IAsset"/>
            </f>
        </getAsset>
        <getBitmapData public="1" set="method" line="46" static="1">
            <f a="id">
                <c path="String"/>
                <t path="Null">
                    <c path="flash.display.BitmapData"/>
                </t>
            </f>
        </getBitmapData>
        <getText public="1" set="method" line="61" static="1">
            <f a="id">
                <c path="String"/>
                <t path="Null">
                    <c path="String"/>
                </t>
            </f>
        </getText>
        <getXml public="1" set="method" line="76" static="1">
            <f a="id">
                <c path="String"/>
                <t path="Null">
                    <c path="Xml"/>
                </t>
            </f>
        </getXml>
        <getSound public="1" set="method" line="91" static="1">
            <f a="id">
                <c path="String"/>
                <t path="Null">
                    <c path="flash.media.Sound"/>
                </t>
            </f>
        </getSound>
        <getSpritesheet public="1" set="method" line="107" static="1">
            <f a="id">
                <c path="String"/>
                <t path="Null">
                    <c path="aze.display.TilesheetEx"/>
                </t>
            </f>
        </getSpritesheet>
        <removeAsset public="1" set="method" line="125" static="1">
            <f a="id">
                <c path="String"/>
                <x path="Void"/>
            </f>
        </removeAsset>
    </class>
    <class path="com.knowledgeplayers.utils.assets.interfaces.IAsset" params=""
           file="/Users/jbrichardet/Development/assets-management/src/com/knowledgeplayers/utils/assets/interfaces/IAsset.hx"
           interface="1">
        <extends path="flash.events.IEventDispatcher"/>
        <dispose public="1" set="method">
            <f a="">
                <x path="Void"/>
            </f>
        </dispose>
        <load public="1" set="method">
            <f a="">
                <x path="Void"/>
            </f>
        </load>
        <url public="1">
            <c path="String"/>
        </url>
        <id public="1">
            <c path="String"/>
        </id>
    </class>
    <class path="com.knowledgeplayers.utils.assets.loaders.Asset" params=""
           file="/Users/jbrichardet/Development/assets-management/src/com/knowledgeplayers/utils/assets/loaders/Asset.hx">
        <extends path="flash.events.EventDispatcher"/>
        <implements path="com.knowledgeplayers.utils.assets.interfaces.IAsset"/>
        <toString public="1" set="method" line="30" override="1">
            <f a="">
                <c path="String"/>
            </f>
        </toString>
        <load public="1" set="method" line="26">
            <f a="">
                <x path="Void"/>
            </f>
        </load>
        <dispose public="1" set="method" line="22">
            <f a="">
                <x path="Void"/>
            </f>
        </dispose>
        <url public="1">
            <c path="String"/>
        </url>
        <id public="1">
            <c path="String"/>
        </id>
        <new public="1" set="method" line="16">
            <f a="?id:?url">
                <c path="String"/>
                <c path="String"/>
                <x path="Void"/>
            </f>
        </new>
    </class>
    <class path="com.knowledgeplayers.utils.assets.loaders.concrete.ImageAsset" params=""
           file="/Users/jbrichardet/Development/assets-management/src/com/knowledgeplayers/utils/assets/loaders/concrete/ImageAsset.hx">
        <extends path="com.knowledgeplayers.utils.assets.loaders.Asset"/>
        <getSWF public="1" set="method" line="72">
            <f a="">
                <c path="flash.display.MovieClip"/>
            </f>
        </getSWF>
        <getBitmap public="1" set="method" line="68">
            <f a="">
                <c path="flash.display.Bitmap"/>
            </f>
        </getBitmap>
        <dispose public="1" set="method" line="48" override="1">
            <f a="">
                <x path="Void"/>
            </f>
        </dispose>
        <load public="1" set="method" line="30" override="1">
            <f a="">
                <x path="Void"/>
            </f>
        </load>
        <loadEventHandler set="method" line="26">
            <f a="event">
                <c path="flash.events.Event"/>
                <x path="Void"/>
            </f>
        </loadEventHandler>
        <loader>
            <c path="flash.display.Loader"/>
        </loader>
        <new public="1" set="method" line="20">
            <f a="?id:?url">
                <c path="String"/>
                <c path="String"/>
                <x path="Void"/>
            </f>
        </new>
    </class>
    <class path="com.knowledgeplayers.utils.assets.loaders.concrete.SoundAsset" params=""
           file="/Users/jbrichardet/Development/assets-management/src/com/knowledgeplayers/utils/assets/loaders/concrete/SoundAsset.hx">
        <extends path="com.knowledgeplayers.utils.assets.loaders.Asset"/>
        <getSound public="1" set="method" line="45">
            <f a="">
                <c path="flash.media.Sound"/>
            </f>
        </getSound>
        <dispose public="1" set="method" line="33" override="1">
            <f a="">
                <x path="Void"/>
            </f>
        </dispose>
        <load public="1" set="method" line="24" override="1">
            <f a="">
                <x path="Void"/>
            </f>
        </load>
        <loadEventHandler set="method" line="20">
            <f a="event">
                <c path="flash.events.Event"/>
                <x path="Void"/>
            </f>
        </loadEventHandler>
        <loader>
            <c path="flash.media.Sound"/>
        </loader>
        <new public="1" set="method" line="15">
            <f a="?id:?url">
                <c path="String"/>
                <c path="String"/>
                <x path="Void"/>
            </f>
        </new>
    </class>
    <class path="com.knowledgeplayers.utils.assets.loaders.concrete.TextAsset" params=""
           file="/Users/jbrichardet/Development/assets-management/src/com/knowledgeplayers/utils/assets/loaders/concrete/TextAsset.hx">
        <extends path="com.knowledgeplayers.utils.assets.loaders.Asset"/>
        <getXml public="1" set="method" line="59">
            <f a="">
                <c path="Xml"/>
            </f>
        </getXml>
        <getText public="1" set="method" line="55">
            <f a="">
                <c path="String"/>
            </f>
        </getText>
        <dispose public="1" set="method" line="42" override="1">
            <f a="">
                <x path="Void"/>
            </f>
        </dispose>
        <onError set="method" line="37">
            <f a="e">
                <c path="flash.events.Event"/>
                <x path="Void"/>
            </f>
        </onError>
        <load public="1" set="method" line="28" override="1">
            <f a="">
                <x path="Void"/>
            </f>
        </load>
        <loadEventHandler set="method" line="23">
            <f a="event">
                <c path="flash.events.Event"/>
                <x path="Void"/>
            </f>
        </loadEventHandler>
        <loader>
            <c path="flash.net.URLLoader"/>
        </loader>
        <new public="1" set="method" line="15">
            <f a="?id:?url">
                <c path="String"/>
                <c path="String"/>
                <x path="Void"/>
            </f>
        </new>
    </class>
    <class path="com.knowledgeplayers.utils.assets.loaders.concrete.SpritesheetAsset" params=""
           file="/Users/jbrichardet/Development/assets-management/src/com/knowledgeplayers/utils/assets/loaders/concrete/SpritesheetAsset.hx">
        <extends path="com.knowledgeplayers.utils.assets.loaders.concrete.TextAsset"/>
        <onImageLoaded set="method" line="47">
            <f a="e">
                <c path="flash.events.Event"/>
                <x path="Void"/>
            </f>
        </onImageLoaded>
        <getTilesheet public="1" set="method" line="42">
            <f a="">
                <c path="aze.display.TilesheetEx"/>
            </f>
        </getTilesheet>
        <dispose public="1" set="method" line="36" override="1">
            <f a="">
                <x path="Void"/>
            </f>
        </dispose>
        <loadEventHandler set="method" line="25" override="1">
            <f a="event">
                <c path="flash.events.Event"/>
                <x path="Void"/>
            </f>
        </loadEventHandler>
        <tilesheet>
            <c path="aze.display.TilesheetEx"/>
        </tilesheet>
        <new public="1" set="method" line="20">
            <f a="?id:?url">
                <c path="String"/>
                <c path="String"/>
                <x path="Void"/>
            </f>
        </new>
    </class>
    <class path="flash.display.MovieClip" params="" file="/usr/lib/haxe/std/flash/display/MovieClip.hx" extern="1">
        <extends path="flash.display.Sprite"/>
        <stop public="1" set="method">
            <f a="">
                <x path="Void"/>
            </f>
        </stop>
        <prevScene public="1" set="method">
            <f a="">
                <x path="Void"/>
            </f>
        </prevScene>
        <prevFrame public="1" set="method">
            <f a="">
                <x path="Void"/>
            </f>
        </prevFrame>
        <play public="1" set="method">
            <f a="">
                <x path="Void"/>
            </f>
        </play>
        <nextScene public="1" set="method">
            <f a="">
                <x path="Void"/>
            </f>
        </nextScene>
        <nextFrame public="1" set="method">
            <f a="">
                <x path="Void"/>
            </f>
        </nextFrame>
        <gotoAndStop public="1" set="method">
            <f a="frame:?scene">
                <t path="flash.utils.Object"/>
                <c path="String"/>
                <x path="Void"/>
            </f>
        </gotoAndStop>
        <gotoAndPlay public="1" set="method">
            <f a="frame:?scene">
                <t path="flash.utils.Object"/>
                <c path="String"/>
                <x path="Void"/>
            </f>
        </gotoAndPlay>
        <addFrameScript public="1" set="method">
            <f a="?p1:?p2:?p3:?p4:?p5">
                <d/>
                <d/>
                <d/>
                <d/>
                <d/>
                <x path="Void"/>
            </f>
        </addFrameScript>
        <trackAsMenu public="1">
            <x path="Bool"/>
        </trackAsMenu>
        <totalFrames public="1" set="null">
            <x path="Int"/>
        </totalFrames>
        <scenes public="1" set="null">
            <c path="Array">
                <c path="flash.display.Scene"/>
            </c>
        </scenes>
        <isPlaying public="1" set="null">
            <x path="Bool"/>
            <meta>
                <m n=":require">
                    <e>flash11</e>
                </m>
            </meta>
        </isPlaying>
        <framesLoaded public="1" set="null">
            <x path="Int"/>
        </framesLoaded>
        <enabled public="1">
            <x path="Bool"/>
        </enabled>
        <currentScene public="1" set="null">
            <c path="flash.display.Scene"/>
        </currentScene>
        <currentLabels public="1" set="null">
            <c path="Array">
                <c path="flash.display.FrameLabel"/>
            </c>
        </currentLabels>
        <currentLabel public="1" set="null">
            <c path="String"/>
        </currentLabel>
        <currentFrameLabel public="1" set="null">
            <c path="String"/>
            <meta>
                <m n=":require">
                    <e>flash10</e>
                </m>
            </meta>
        </currentFrameLabel>
        <currentFrame public="1" set="null">
            <x path="Int"/>
        </currentFrame>
        <new public="1" set="method">
            <f a="">
                <x path="Void"/>
            </f>
        </new>
        <haxe_dynamic>
            <d/>
        </haxe_dynamic>
    </class>
    <class path="flash.Boot" params="" file="/usr/lib/haxe/std/flash/Boot.hx">
        <extends path="flash.display.MovieClip"/>
        <tf static="1">
            <c path="flash.text.TextField"/>
        </tf>
        <lines static="1">
            <c path="Array">
                <c path="String"/>
            </c>
        </lines>
        <lastError static="1">
            <c path="flash.errors.Error"/>
        </lastError>
        <skip_constructor public="1" line="51" static="1">
            <x path="Bool"/>
        </skip_constructor>
        <enum_to_string public="1" set="method" line="83" static="1">
            <f a="e">
                <a>
                    <tag>
                        <c path="String"/>
                    </tag>
                    <params>
                        <c path="Array">
                            <d/>
                        </c>
                    </params>
                </a>
                <c path="String"/>
            </f>
        </enum_to_string>
        <__instanceof public="1" set="method" line="92" static="1">
            <f a="v:t">
                <d/>
                <d/>
                <x path="Bool"/>
            </f>
        </__instanceof>
        <__clear_trace public="1" set="method" line="102" static="1">
            <f a="">
                <x path="Void"/>
            </f>
        </__clear_trace>
        <__set_trace_color public="1" set="method" line="110" static="1">
            <f a="rgb">
                <x path="UInt"/>
                <x path="Void"/>
            </f>
        </__set_trace_color>
        <getTrace public="1" set="method" line="116" static="1">
            <f a="">
                <c path="flash.text.TextField"/>
            </f>
        </getTrace>
        <__trace public="1" set="method" line="144" static="1">
            <f a="v:pos">
                <d/>
                <t path="haxe.PosInfos"/>
                <x path="Void"/>
            </f>
        </__trace>
        <__string_rec public="1" set="method" line="163" static="1">
            <f a="v:str">
                <d/>
                <c path="String"/>
                <c path="String"/>
            </f>
        </__string_rec>
        <__unprotect__ set="method" line="208" static="1">
            <f a="s">
                <c path="String"/>
                <c path="String"/>
            </f>
        </__unprotect__>
        <init set="method" line="79">
            <f a="">
                <x path="Void"/>
            </f>
        </init>
        <doInitDelay set="method" line="74">
            <f a="_">
                <unknown/>
                <x path="Void"/>
            </f>
        </doInitDelay>
        <start set="method" line="53">
            <f a="">
                <x path="Void"/>
            </f>
        </start>
        <new public="1" set="method" line="45">
            <f a="">
                <x path="Void"/>
            </f>
        </new>
        <meta>
            <m n=":keep"/>
        </meta>
    </class>
    <class path="flash._Boot.RealBoot" params="" file="/usr/lib/haxe/std/flash/Boot.hx" private="1" module="flash.Boot">
        <extends path="flash.Boot"/>
        <new set="method" line="35">
            <f a="">
                <x path="Void"/>
            </f>
        </new>
        <meta>
            <m n=":keep"/>
        </meta>
        <haxe_dynamic>
            <d/>
        </haxe_dynamic>
    </class>
    <class path="flash.Lib" params="" file="/usr/lib/haxe/std/flash/Lib.hx">
        <current public="1" static="1">
            <c path="flash.display.MovieClip"/>
        </current>
        <getURL public="1" set="method" line="52" static="1">
            <f a="url:?target">
                <c path="flash.net.URLRequest"/>
                <c path="String"/>
                <x path="Void"/>
            </f>
        </getURL>
        <trace public="1" set="method" line="64" static="1">
            <f a="arg">
                <d/>
                <x path="Void"/>
            </f>
        </trace>
        <meta>
            <m n=":keep"/>
        </meta>
    </class>
    <class path="flash.Vector" params="T" file="/usr/lib/haxe/std/flash/Vector.hx" extern="1">
        <ofArray public="1" params="T" get="inline" set="null" line="47" static="1">
            <f a="v">
                <c path="Array">
                    <c path="ofArray.T"/>
                </c>
                <c path="flash.Vector">
                    <c path="ofArray.T"/>
                </c>
            </f>
        </ofArray>
        <convert public="1" params="T:U" get="inline" set="null" line="51" static="1">
            <f a="v">
                <c path="flash.Vector">
                    <c path="convert.T"/>
                </c>
                <c path="flash.Vector">
                    <c path="convert.U"/>
                </c>
            </f>
        </convert>
        <lastIndexOf public="1" set="method">
            <f a="x:?from">
                <c path="flash.Vector.T"/>
                <x path="Int"/>
                <x path="Int"/>
            </f>
        </lastIndexOf>
        <indexOf public="1" set="method">
            <f a="x:?from">
                <c path="flash.Vector.T"/>
                <x path="Int"/>
                <x path="Int"/>
            </f>
        </indexOf>
        <toString public="1" set="method">
            <f a="">
                <c path="String"/>
            </f>
        </toString>
        <splice public="1" set="method">
            <f a="pos:len">
                <x path="Int"/>
                <x path="Int"/>
                <c path="flash.Vector">
                    <c path="flash.Vector.T"/>
                </c>
            </f>
        </splice>
        <sort public="1" set="method">
            <f a="f">
                <f a=":">
                    <c path="flash.Vector.T"/>
                    <c path="flash.Vector.T"/>
                    <x path="Int"/>
                </f>
                <x path="Void"/>
            </f>
        </sort>
        <slice public="1" set="method">
            <f a="?pos:?end">
                <x path="Int"/>
                <x path="Int"/>
                <c path="flash.Vector">
                    <c path="flash.Vector.T"/>
                </c>
            </f>
        </slice>
        <unshift public="1" set="method">
            <f a="x">
                <c path="flash.Vector.T"/>
                <x path="Void"/>
            </f>
        </unshift>
        <shift public="1" set="method">
            <f a="">
                <t path="Null">
                    <c path="flash.Vector.T"/>
                </t>
            </f>
        </shift>
        <reverse public="1" set="method">
            <f a="">
                <x path="Void"/>
            </f>
        </reverse>
        <push public="1" set="method">
            <f a="x">
                <c path="flash.Vector.T"/>
                <x path="Int"/>
            </f>
        </push>
        <pop public="1" set="method">
            <f a="">
                <t path="Null">
                    <c path="flash.Vector.T"/>
                </t>
            </f>
        </pop>
        <join public="1" set="method">
            <f a="sep">
                <c path="String"/>
                <c path="String"/>
            </f>
        </join>
        <concat public="1" set="method">
            <f a="?a">
                <c path="flash.Vector">
                    <c path="flash.Vector.T"/>
                </c>
                <c path="flash.Vector">
                    <c path="flash.Vector.T"/>
                </c>
            </f>
        </concat>
        <fixed public="1">
            <x path="Bool"/>
        </fixed>
        <length public="1">
            <x path="Int"/>
        </length>
        <new public="1" set="method">
            <f a="?length:?fixed">
                <x path="UInt"/>
                <x path="Bool"/>
                <x path="Void"/>
            </f>
        </new>
        <haxe_doc>The Vector class is very similar to Array but is only supported by the Flash Player 10+</haxe_doc>
        <meta>
            <m n=":require">
                <e>flash10</e>
            </m>
        </meta>
    </class>
    <class path="flash.accessibility.AccessibilityImplementation" params=""
           file="/usr/lib/haxe/std/flash/accessibility/AccessibilityImplementation.hx" extern="1">
        <isLabeledBy public="1" set="method">
            <f a="labelBounds">
                <c path="flash.geom.Rectangle"/>
                <x path="Bool"/>
            </f>
        </isLabeledBy>
        <get_selectionAnchorIndex public="1" set="method">
            <f a="">
                <d/>
            </f>
        </get_selectionAnchorIndex>
        <get_selectionActiveIndex public="1" set="method">
            <f a="">
                <d/>
            </f>
        </get_selectionActiveIndex>
        <get_accValue public="1" set="method">
            <f a="childID">
                <x path="UInt"/>
                <c path="String"/>
            </f>
        </get_accValue>
        <get_accState public="1" set="method">
            <f a="childID">
                <x path="UInt"/>
                <x path="UInt"/>
            </f>
        </get_accState>
        <get_accSelection public="1" set="method">
            <f a="">
                <c path="Array">
                    <d/>
                </c>
            </f>
        </get_accSelection>
        <get_accRole public="1" set="method">
            <f a="childID">
                <x path="UInt"/>
                <x path="UInt"/>
            </f>
        </get_accRole>
        <get_accName public="1" set="method">
            <f a="childID">
                <x path="UInt"/>
                <c path="String"/>
            </f>
        </get_accName>
        <get_accFocus public="1" set="method">
            <f a="">
                <x path="UInt"/>
            </f>
        </get_accFocus>
        <get_accDefaultAction public="1" set="method">
            <f a="childID">
                <x path="UInt"/>
                <c path="String"/>
            </f>
        </get_accDefaultAction>
        <getChildIDArray public="1" set="method">
            <f a="">
                <c path="Array">
                    <d/>
                </c>
            </f>
        </getChildIDArray>
        <accSelect public="1" set="method">
            <f a="operation:childID">
                <x path="UInt"/>
                <x path="UInt"/>
                <x path="Void"/>
            </f>
        </accSelect>
        <accLocation public="1" set="method">
            <f a="childID">
                <x path="UInt"/>
                <d/>
            </f>
        </accLocation>
        <accDoDefaultAction public="1" set="method">
            <f a="childID">
                <x path="UInt"/>
                <x path="Void"/>
            </f>
        </accDoDefaultAction>
        <stub public="1">
            <x path="Bool"/>
        </stub>
        <errno public="1">
            <x path="UInt"/>
        </errno>
        <new public="1" set="method">
            <f a="">
                <x path="Void"/>
            </f>
        </new>
    </class>
    <class path="flash.accessibility.AccessibilityProperties" params=""
           file="/usr/lib/haxe/std/flash/accessibility/AccessibilityProperties.hx" extern="1">
        <silent public="1">
            <x path="Bool"/>
        </silent>
        <shortcut public="1">
            <c path="String"/>
        </shortcut>
        <noAutoLabeling public="1">
            <x path="Bool"/>
        </noAutoLabeling>
        <name public="1">
            <c path="String"/>
        </name>
        <forceSimple public="1">
            <x path="Bool"/>
        </forceSimple>
        <description public="1">
            <c path="String"/>
        </description>
        <new public="1" set="method">
            <f a="">
                <x path="Void"/>
            </f>
        </new>
    </class>
    <enum path="flash.display.ActionScriptVersion" params=""
          file="/usr/lib/haxe/std/flash/display/ActionScriptVersion.hx">
        <ACTIONSCRIPT3/>
        <ACTIONSCRIPT2/>
        <meta>
            <m n=":fakeEnum">
                <e>UInt</e>
            </m>
        </meta>
    </enum>
    <class path="flash.display.Bitmap" params="" file="/usr/lib/haxe/std/flash/display/Bitmap.hx" extern="1">
        <extends path="flash.display.DisplayObject"/>
        <smoothing public="1">
            <x path="Bool"/>
        </smoothing>
        <pixelSnapping public="1">
            <e path="flash.display.PixelSnapping"/>
        </pixelSnapping>
        <bitmapData public="1">
            <c path="flash.display.BitmapData"/>
        </bitmapData>
        <new public="1" set="method">
            <f a="?bitmapData:?pixelSnapping:?smoothing">
                <c path="flash.display.BitmapData"/>
                <e path="flash.display.PixelSnapping"/>
                <x path="Bool"/>
                <x path="Void"/>
            </f>
        </new>
    </class>
    <class path="flash.display.BitmapData" params="" file="/usr/lib/haxe/std/flash/display/BitmapData.hx" extern="1">
        <implements path="flash.display.IBitmapDrawable"/>
        <unlock public="1" set="method">
            <f a="?changeRect">
                <c path="flash.geom.Rectangle"/>
                <x path="Void"/>
            </f>
        </unlock>
        <threshold public="1" set="method">
            <f a="sourceBitmapData:sourceRect:destPoint:operation:threshold:?color:?mask:?copySource">
                <c path="flash.display.BitmapData"/>
                <c path="flash.geom.Rectangle"/>
                <c path="flash.geom.Point"/>
                <c path="String"/>
                <x path="UInt"/>
                <x path="UInt"/>
                <x path="UInt"/>
                <x path="Bool"/>
                <x path="UInt"/>
            </f>
        </threshold>
        <setVector public="1" set="method">
            <f a="rect:inputVector">
                <c path="flash.geom.Rectangle"/>
                <c path="flash.Vector">
                    <x path="UInt"/>
                </c>
                <x path="Void"/>
            </f>
            <meta>
                <m n=":require">
                    <e>flash10</e>
                </m>
            </meta>
        </setVector>
        <setPixels public="1" set="method">
            <f a="rect:inputByteArray">
                <c path="flash.geom.Rectangle"/>
                <c path="flash.utils.ByteArray"/>
                <x path="Void"/>
            </f>
        </setPixels>
        <setPixel32 public="1" set="method">
            <f a="x:y:color">
                <x path="Int"/>
                <x path="Int"/>
                <x path="UInt"/>
                <x path="Void"/>
            </f>
        </setPixel32>
        <setPixel public="1" set="method">
            <f a="x:y:color">
                <x path="Int"/>
                <x path="Int"/>
                <x path="UInt"/>
                <x path="Void"/>
            </f>
        </setPixel>
        <scroll public="1" set="method">
            <f a="x:y">
                <x path="Int"/>
                <x path="Int"/>
                <x path="Void"/>
            </f>
        </scroll>
        <pixelDissolve public="1" set="method">
            <f a="sourceBitmapData:sourceRect:destPoint:?randomSeed:?numPixels:?fillColor">
                <c path="flash.display.BitmapData"/>
                <c path="flash.geom.Rectangle"/>
                <c path="flash.geom.Point"/>
                <x path="Int"/>
                <x path="Int"/>
                <x path="UInt"/>
                <x path="Int"/>
            </f>
        </pixelDissolve>
        <perlinNoise public="1" set="method">
            <f a="baseX:baseY:numOctaves:randomSeed:stitch:fractalNoise:?channelOptions:?grayScale:?offsets">
                <x path="Float"/>
                <x path="Float"/>
                <x path="UInt"/>
                <x path="Int"/>
                <x path="Bool"/>
                <x path="Bool"/>
                <x path="UInt"/>
                <x path="Bool"/>
                <c path="Array">
                    <c path="flash.geom.Point"/>
                </c>
                <x path="Void"/>
            </f>
        </perlinNoise>
        <paletteMap public="1" set="method">
            <f a="sourceBitmapData:sourceRect:destPoint:?redArray:?greenArray:?blueArray:?alphaArray">
                <c path="flash.display.BitmapData"/>
                <c path="flash.geom.Rectangle"/>
                <c path="flash.geom.Point"/>
                <c path="Array">
                    <x path="Int"/>
                </c>
                <c path="Array">
                    <x path="Int"/>
                </c>
                <c path="Array">
                    <x path="Int"/>
                </c>
                <c path="Array">
                    <x path="Int"/>
                </c>
                <x path="Void"/>
            </f>
        </paletteMap>
        <noise public="1" set="method">
            <f a="randomSeed:?low:?high:?channelOptions:?grayScale">
                <x path="Int"/>
                <x path="UInt"/>
                <x path="UInt"/>
                <x path="UInt"/>
                <x path="Bool"/>
                <x path="Void"/>
            </f>
        </noise>
        <merge public="1" set="method">
            <f a="sourceBitmapData:sourceRect:destPoint:redMultiplier:greenMultiplier:blueMultiplier:alphaMultiplier">
                <c path="flash.display.BitmapData"/>
                <c path="flash.geom.Rectangle"/>
                <c path="flash.geom.Point"/>
                <x path="UInt"/>
                <x path="UInt"/>
                <x path="UInt"/>
                <x path="UInt"/>
                <x path="Void"/>
            </f>
        </merge>
        <lock public="1" set="method">
            <f a="">
                <x path="Void"/>
            </f>
        </lock>
        <hitTest public="1" set="method">
            <f a="firstPoint:firstAlphaThreshold:secondObject:?secondBitmapDataPoint:?secondAlphaThreshold">
                <c path="flash.geom.Point"/>
                <x path="UInt"/>
                <t path="flash.utils.Object"/>
                <c path="flash.geom.Point"/>
                <x path="UInt"/>
                <x path="Bool"/>
            </f>
        </hitTest>
        <histogram public="1" set="method">
            <f a="?hRect">
                <c path="flash.geom.Rectangle"/>
                <c path="flash.Vector">
                    <c path="flash.Vector">
                        <x path="Float"/>
                    </c>
                </c>
            </f>
            <meta>
                <m n=":require">
                    <e>flash10</e>
                </m>
            </meta>
        </histogram>
        <getVector public="1" set="method">
            <f a="rect">
                <c path="flash.geom.Rectangle"/>
                <c path="flash.Vector">
                    <x path="UInt"/>
                </c>
            </f>
            <meta>
                <m n=":require">
                    <e>flash10</e>
                </m>
            </meta>
        </getVector>
        <getPixels public="1" set="method">
            <f a="rect">
                <c path="flash.geom.Rectangle"/>
                <c path="flash.utils.ByteArray"/>
            </f>
        </getPixels>
        <getPixel32 public="1" set="method">
            <f a="x:y">
                <x path="Int"/>
                <x path="Int"/>
                <x path="UInt"/>
            </f>
        </getPixel32>
        <getPixel public="1" set="method">
            <f a="x:y">
                <x path="Int"/>
                <x path="Int"/>
                <x path="UInt"/>
            </f>
        </getPixel>
        <getColorBoundsRect public="1" set="method">
            <f a="mask:color:?findColor">
                <x path="UInt"/>
                <x path="UInt"/>
                <x path="Bool"/>
                <c path="flash.geom.Rectangle"/>
            </f>
        </getColorBoundsRect>
        <generateFilterRect public="1" set="method">
            <f a="sourceRect:filter">
                <c path="flash.geom.Rectangle"/>
                <c path="flash.filters.BitmapFilter"/>
                <c path="flash.geom.Rectangle"/>
            </f>
        </generateFilterRect>
        <floodFill public="1" set="method">
            <f a="x:y:color">
                <x path="Int"/>
                <x path="Int"/>
                <x path="UInt"/>
                <x path="Void"/>
            </f>
        </floodFill>
        <fillRect public="1" set="method">
            <f a="rect:color">
                <c path="flash.geom.Rectangle"/>
                <x path="UInt"/>
                <x path="Void"/>
            </f>
        </fillRect>
        <draw public="1" set="method">
            <f a="source:?matrix:?colorTransform:?blendMode:?clipRect:?smoothing">
                <c path="flash.display.IBitmapDrawable"/>
                <c path="flash.geom.Matrix"/>
                <c path="flash.geom.ColorTransform"/>
                <e path="flash.display.BlendMode"/>
                <c path="flash.geom.Rectangle"/>
                <x path="Bool"/>
                <x path="Void"/>
            </f>
        </draw>
        <dispose public="1" set="method">
            <f a="">
                <x path="Void"/>
            </f>
        </dispose>
        <copyPixels public="1" set="method">
            <f a="sourceBitmapData:sourceRect:destPoint:?alphaBitmapData:?alphaPoint:?mergeAlpha">
                <c path="flash.display.BitmapData"/>
                <c path="flash.geom.Rectangle"/>
                <c path="flash.geom.Point"/>
                <c path="flash.display.BitmapData"/>
                <c path="flash.geom.Point"/>
                <x path="Bool"/>
                <x path="Void"/>
            </f>
        </copyPixels>
        <copyChannel public="1" set="method">
            <f a="sourceBitmapData:sourceRect:destPoint:sourceChannel:destChannel">
                <c path="flash.display.BitmapData"/>
                <c path="flash.geom.Rectangle"/>
                <c path="flash.geom.Point"/>
                <x path="UInt"/>
                <x path="UInt"/>
                <x path="Void"/>
            </f>
        </copyChannel>
        <compare public="1" set="method">
            <f a="otherBitmapData">
                <c path="flash.display.BitmapData"/>
                <t path="flash.utils.Object"/>
            </f>
        </compare>
        <colorTransform public="1" set="method">
            <f a="rect:colorTransform">
                <c path="flash.geom.Rectangle"/>
                <c path="flash.geom.ColorTransform"/>
                <x path="Void"/>
            </f>
        </colorTransform>
        <clone public="1" set="method">
            <f a="">
                <c path="flash.display.BitmapData"/>
            </f>
        </clone>
        <applyFilter public="1" set="method">
            <f a="sourceBitmapData:sourceRect:destPoint:filter">
                <c path="flash.display.BitmapData"/>
                <c path="flash.geom.Rectangle"/>
                <c path="flash.geom.Point"/>
                <c path="flash.filters.BitmapFilter"/>
                <x path="Void"/>
            </f>
        </applyFilter>
        <width public="1" set="null">
            <x path="Int"/>
        </width>
        <transparent public="1" set="null">
            <x path="Bool"/>
        </transparent>
        <rect public="1" set="null">
            <c path="flash.geom.Rectangle"/>
        </rect>
        <height public="1" set="null">
            <x path="Int"/>
        </height>
        <new public="1" set="method">
            <f a="width:height:?transparent:?fillColor">
                <x path="Int"/>
                <x path="Int"/>
                <x path="Bool"/>
                <x path="UInt"/>
                <x path="Void"/>
            </f>
        </new>
    </class>
    <enum path="flash.display.BlendMode" params="" file="/usr/lib/haxe/std/flash/display/BlendMode.hx">
        <SUBTRACT/>
        <SHADER/>
        <SCREEN/>
        <OVERLAY/>
        <NORMAL/>
        <MULTIPLY/>
        <LIGHTEN/>
        <LAYER/>
        <INVERT/>
        <HARDLIGHT/>
        <ERASE/>
        <DIFFERENCE/>
        <DARKEN/>
        <ALPHA/>
        <ADD/>
        <meta>
            <m n=":fakeEnum">
                <e>String</e>
            </m>
        </meta>
    </enum>
    <enum path="flash.display.CapsStyle" params="" file="/usr/lib/haxe/std/flash/display/CapsStyle.hx">
        <SQUARE/>
        <ROUND/>
        <NONE/>
        <meta>
            <m n=":fakeEnum">
                <e>String</e>
            </m>
        </meta>
    </enum>
    <enum path="flash.display.ColorCorrection" params="" file="/usr/lib/haxe/std/flash/display/ColorCorrection.hx">
        <ON/>
        <OFF/>
        <DEFAULT/>
        <meta>
            <m n=":fakeEnum">
                <e>String</e>
            </m>
            <m n=":require">
                <e>flash10_1</e>
            </m>
        </meta>
    </enum>
    <enum path="flash.display.ColorCorrectionSupport" params=""
          file="/usr/lib/haxe/std/flash/display/ColorCorrectionSupport.hx">
        <UNSUPPORTED/>
        <DEFAULT_ON/>
        <DEFAULT_OFF/>
        <meta>
            <m n=":fakeEnum">
                <e>String</e>
            </m>
            <m n=":require">
                <e>flash10_1</e>
            </m>
        </meta>
    </enum>
    <class path="flash.display.FrameLabel" params="" file="/usr/lib/haxe/std/flash/display/FrameLabel.hx" extern="1">
        <extends path="flash.events.EventDispatcher"/>
        <name public="1" set="null">
            <c path="String"/>
        </name>
        <frame public="1" set="null">
            <x path="Int"/>
        </frame>
        <new public="1" set="method">
            <f a="name:frame">
                <c path="String"/>
                <x path="Int"/>
                <x path="Void"/>
            </f>
        </new>
        <meta>
            <m n=":final"/>
        </meta>
    </class>
    <enum path="flash.display.GradientType" params="" file="/usr/lib/haxe/std/flash/display/GradientType.hx">
        <RADIAL/>
        <LINEAR/>
        <meta>
            <m n=":fakeEnum">
                <e>String</e>
            </m>
        </meta>
    </enum>
    <class path="flash.display.Graphics" params="" file="/Users/jbrichardet/Development/NME/flash/display/Graphics.hx"
           extern="1">
        <drawTiles public="1" get="inline" set="null" line="30">
            <f a="sheet:tileData:?smooth:?flags">
                <c path="nme.display.Tilesheet"/>
                <c path="Array">
                    <x path="Float"/>
                </c>
                <x path="Bool"/>
                <x path="Int"/>
                <x path="Void"/>
            </f>
        </drawTiles>
        <moveTo public="1" set="method">
            <f a="x:y">
                <x path="Float"/>
                <x path="Float"/>
                <x path="Void"/>
            </f>
        </moveTo>
        <lineTo public="1" set="method">
            <f a="x:y">
                <x path="Float"/>
                <x path="Float"/>
                <x path="Void"/>
            </f>
        </lineTo>
        <lineStyle public="1" set="method">
            <f a="?thickness:?color:?alpha:?pixelHinting:?scaleMode:?caps:?joints:?miterLimit">
                <x path="Float"/>
                <x path="UInt"/>
                <x path="Float"/>
                <x path="Bool"/>
                <e path="flash.display.LineScaleMode"/>
                <e path="flash.display.CapsStyle"/>
                <e path="flash.display.JointStyle"/>
                <x path="Float"/>
                <x path="Void"/>
            </f>
        </lineStyle>
        <lineShaderStyle public="1" set="method">
            <f a="shader:?matrix">
                <c path="flash.display.Shader"/>
                <c path="flash.geom.Matrix"/>
                <x path="Void"/>
            </f>
            <meta>
                <m n=":require">
                    <e>flash10</e>
                </m>
            </meta>
        </lineShaderStyle>
        <lineGradientStyle public="1" set="method">
            <f a="type:colors:alphas:ratios:?matrix:?spreadMethod:?interpolationMethod:?focalPointRatio">
                <e path="flash.display.GradientType"/>
                <c path="Array">
                    <x path="UInt"/>
                </c>
                <c path="Array">
                    <d/>
                </c>
                <c path="Array">
                    <d/>
                </c>
                <c path="flash.geom.Matrix"/>
                <e path="flash.display.SpreadMethod"/>
                <e path="flash.display.InterpolationMethod"/>
                <x path="Float"/>
                <x path="Void"/>
            </f>
        </lineGradientStyle>
        <lineBitmapStyle public="1" set="method">
            <f a="bitmap:?matrix:?repeat:?smooth">
                <c path="flash.display.BitmapData"/>
                <c path="flash.geom.Matrix"/>
                <x path="Bool"/>
                <x path="Bool"/>
                <x path="Void"/>
            </f>
            <meta>
                <m n=":require">
                    <e>flash10</e>
                </m>
            </meta>
        </lineBitmapStyle>
        <endFill public="1" set="method">
            <f a="">
                <x path="Void"/>
            </f>
        </endFill>
        <drawTriangles public="1" set="method">
            <f a="vertices:?indices:?uvtData:?culling">
                <x path="nme.Vector">
                    <x path="Float"/>
                </x>
                <x path="nme.Vector">
                    <x path="Int"/>
                </x>
                <x path="nme.Vector">
                    <x path="Float"/>
                </x>
                <e path="flash.display.TriangleCulling"/>
                <x path="Void"/>
            </f>
            <meta>
                <m n=":require">
                    <e>flash10</e>
                </m>
            </meta>
        </drawTriangles>
        <drawRoundRectComplex public="1" set="method">
            <f a="x:y:width:height:topLeftRadius:topRightRadius:bottomLeftRadius:bottomRightRadius">
                <x path="Float"/>
                <x path="Float"/>
                <x path="Float"/>
                <x path="Float"/>
                <x path="Float"/>
                <x path="Float"/>
                <x path="Float"/>
                <x path="Float"/>
                <x path="Void"/>
            </f>
        </drawRoundRectComplex>
        <drawRoundRect public="1" set="method">
            <f a="x:y:width:height:ellipseWidth:?ellipseHeight">
                <x path="Float"/>
                <x path="Float"/>
                <x path="Float"/>
                <x path="Float"/>
                <x path="Float"/>
                <x path="Float"/>
                <x path="Void"/>
            </f>
        </drawRoundRect>
        <drawRect public="1" set="method">
            <f a="x:y:width:height">
                <x path="Float"/>
                <x path="Float"/>
                <x path="Float"/>
                <x path="Float"/>
                <x path="Void"/>
            </f>
        </drawRect>
        <drawPath public="1" set="method">
            <f a="commands:data:?winding">
                <x path="nme.Vector">
                    <x path="Int"/>
                </x>
                <x path="nme.Vector">
                    <x path="Float"/>
                </x>
                <e path="flash.display.GraphicsPathWinding"/>
                <x path="Void"/>
            </f>
            <meta>
                <m n=":require">
                    <e>flash10</e>
                </m>
            </meta>
        </drawPath>
        <drawGraphicsData public="1" set="method">
            <f a="graphicsData">
                <x path="nme.Vector">
                    <c path="flash.display.IGraphicsData"/>
                </x>
                <x path="Void"/>
            </f>
            <meta>
                <m n=":require">
                    <e>flash10</e>
                </m>
            </meta>
        </drawGraphicsData>
        <drawEllipse public="1" set="method">
            <f a="x:y:width:height">
                <x path="Float"/>
                <x path="Float"/>
                <x path="Float"/>
                <x path="Float"/>
                <x path="Void"/>
            </f>
        </drawEllipse>
        <drawCircle public="1" set="method">
            <f a="x:y:radius">
                <x path="Float"/>
                <x path="Float"/>
                <x path="Float"/>
                <x path="Void"/>
            </f>
        </drawCircle>
        <curveTo public="1" set="method">
            <f a="controlX:controlY:anchorX:anchorY">
                <x path="Float"/>
                <x path="Float"/>
                <x path="Float"/>
                <x path="Float"/>
                <x path="Void"/>
            </f>
        </curveTo>
        <cubicCurveTo public="1" set="method">
            <f a="controlX1:controlY1:controlX2:controlY2:anchorX:anchorY">
                <x path="Float"/>
                <x path="Float"/>
                <x path="Float"/>
                <x path="Float"/>
                <x path="Float"/>
                <x path="Float"/>
                <x path="Void"/>
            </f>
            <meta>
                <m n=":require">
                    <e>flash11</e>
                </m>
            </meta>
        </cubicCurveTo>
        <copyFrom public="1" set="method">
            <f a="sourceGraphics">
                <c path="flash.display.Graphics"/>
                <x path="Void"/>
            </f>
            <meta>
                <m n=":require">
                    <e>flash10</e>
                </m>
            </meta>
        </copyFrom>
        <clear public="1" set="method">
            <f a="">
                <x path="Void"/>
            </f>
        </clear>
        <beginShaderFill public="1" set="method">
            <f a="shader:?matrix">
                <c path="flash.display.Shader"/>
                <c path="flash.geom.Matrix"/>
                <x path="Void"/>
            </f>
            <meta>
                <m n=":require">
                    <e>flash10</e>
                </m>
            </meta>
        </beginShaderFill>
        <beginGradientFill public="1" set="method">
            <f a="type:colors:alphas:ratios:?matrix:?spreadMethod:?interpolationMethod:?focalPointRatio">
                <e path="flash.display.GradientType"/>
                <c path="Array">
                    <x path="UInt"/>
                </c>
                <c path="Array">
                    <d/>
                </c>
                <c path="Array">
                    <d/>
                </c>
                <c path="flash.geom.Matrix"/>
                <e path="flash.display.SpreadMethod"/>
                <e path="flash.display.InterpolationMethod"/>
                <x path="Float"/>
                <x path="Void"/>
            </f>
        </beginGradientFill>
        <beginFill public="1" set="method">
            <f a="color:?alpha">
                <x path="UInt"/>
                <x path="Float"/>
                <x path="Void"/>
            </f>
        </beginFill>
        <beginBitmapFill public="1" set="method">
            <f a="bitmap:?matrix:?repeat:?smooth">
                <c path="flash.display.BitmapData"/>
                <c path="flash.geom.Matrix"/>
                <x path="Bool"/>
                <x path="Bool"/>
                <x path="Void"/>
            </f>
        </beginBitmapFill>
        <new public="1" set="method">
            <f a="">
                <x path="Void"/>
            </f>
        </new>
        <meta>
            <m n=":final"/>
        </meta>
    </class>
    <enum path="flash.display.GraphicsPathWinding" params=""
          file="/usr/lib/haxe/std/flash/display/GraphicsPathWinding.hx">
        <NON_ZERO/>
        <EVEN_ODD/>
        <meta>
            <m n=":fakeEnum">
                <e>String</e>
            </m>
        </meta>
    </enum>
    <class path="flash.display.IGraphicsData" params="" file="/usr/lib/haxe/std/flash/display/IGraphicsData.hx"
           extern="1" interface="1"/>
    <enum path="flash.display.InterpolationMethod" params=""
          file="/usr/lib/haxe/std/flash/display/InterpolationMethod.hx">
        <RGB/>
        <LINEAR_RGB/>
        <meta>
            <m n=":fakeEnum">
                <e>String</e>
            </m>
        </meta>
    </enum>
    <enum path="flash.display.JointStyle" params="" file="/usr/lib/haxe/std/flash/display/JointStyle.hx">
        <ROUND/>
        <MITER/>
        <BEVEL/>
        <meta>
            <m n=":fakeEnum">
                <e>String</e>
            </m>
        </meta>
    </enum>
    <enum path="flash.display.LineScaleMode" params="" file="/usr/lib/haxe/std/flash/display/LineScaleMode.hx">
        <VERTICAL/>
        <NORMAL/>
        <NONE/>
        <HORIZONTAL/>
        <meta>
            <m n=":fakeEnum">
                <e>String</e>
            </m>
        </meta>
    </enum>
    <class path="flash.display.Loader" params="" file="/usr/lib/haxe/std/flash/display/Loader.hx" extern="1">
        <extends path="flash.display.DisplayObjectContainer"/>
        <unloadAndStop public="1" set="method">
            <f a="?gc">
                <x path="Bool"/>
                <x path="Void"/>
            </f>
            <meta>
                <m n=":require">
                    <e>flash10</e>
                </m>
            </meta>
        </unloadAndStop>
        <unload public="1" set="method">
            <f a="">
                <x path="Void"/>
            </f>
        </unload>
        <loadBytes public="1" set="method">
            <f a="bytes:?context">
                <c path="flash.utils.ByteArray"/>
                <c path="flash.system.LoaderContext"/>
                <x path="Void"/>
            </f>
        </loadBytes>
        <load public="1" set="method">
            <f a="request:?context">
                <c path="flash.net.URLRequest"/>
                <c path="flash.system.LoaderContext"/>
                <x path="Void"/>
            </f>
        </load>
        <close public="1" set="method">
            <f a="">
                <x path="Void"/>
            </f>
        </close>
        <uncaughtErrorEvents public="1" set="null">
            <c path="flash.events.UncaughtErrorEvents"/>
            <meta>
                <m n=":require">
                    <e>flash10_1</e>
                </m>
            </meta>
        </uncaughtErrorEvents>
        <contentLoaderInfo public="1" set="null">
            <c path="flash.display.LoaderInfo"/>
        </contentLoaderInfo>
        <content public="1" set="null">
            <c path="flash.display.DisplayObject"/>
        </content>
        <new public="1" set="method">
            <f a="">
                <x path="Void"/>
            </f>
        </new>
    </class>
    <class path="flash.display.LoaderInfo" params="" file="/usr/lib/haxe/std/flash/display/LoaderInfo.hx" extern="1">
        <extends path="flash.events.EventDispatcher"/>
        <getLoaderInfoByDefinition public="1" set="method" static="1">
            <f a="object">
                <d/>
                <c path="flash.display.LoaderInfo"/>
            </f>
        </getLoaderInfoByDefinition>
        <width public="1" set="null">
            <x path="Int"/>
        </width>
        <url public="1" set="null">
            <c path="String"/>
        </url>
        <uncaughtErrorEvents public="1" set="null">
            <c path="flash.events.UncaughtErrorEvents"/>
            <meta>
                <m n=":require">
                    <e>flash10_1</e>
                </m>
            </meta>
        </uncaughtErrorEvents>
        <swfVersion public="1" set="null">
            <x path="UInt"/>
        </swfVersion>
        <sharedEvents public="1" set="null">
            <c path="flash.events.EventDispatcher"/>
        </sharedEvents>
        <sameDomain public="1" set="null">
            <x path="Bool"/>
        </sameDomain>
        <parentAllowsChild public="1" set="null">
            <x path="Bool"/>
        </parentAllowsChild>
        <parameters public="1" set="null">
            <d>
                <c path="String"/>
            </d>
        </parameters>
        <loaderURL public="1" set="null">
            <c path="String"/>
        </loaderURL>
        <loader public="1" set="null">
            <c path="flash.display.Loader"/>
        </loader>
        <isURLInaccessible public="1" set="null">
            <x path="Bool"/>
            <meta>
                <m n=":require">
                    <e>flash10_1</e>
                </m>
            </meta>
        </isURLInaccessible>
        <height public="1" set="null">
            <x path="Int"/>
        </height>
        <frameRate public="1" set="null">
            <x path="Float"/>
        </frameRate>
        <contentType public="1" set="null">
            <c path="String"/>
        </contentType>
        <content public="1" set="null">
            <c path="flash.display.DisplayObject"/>
        </content>
        <childAllowsParent public="1" set="null">
            <x path="Bool"/>
        </childAllowsParent>
        <bytesTotal public="1" set="null">
            <x path="UInt"/>
        </bytesTotal>
        <bytesLoaded public="1" set="null">
            <x path="UInt"/>
        </bytesLoaded>
        <bytes public="1" set="null">
            <c path="flash.utils.ByteArray"/>
        </bytes>
        <applicationDomain public="1" set="null">
            <c path="flash.system.ApplicationDomain"/>
        </applicationDomain>
        <actionScriptVersion public="1" set="null">
            <e path="flash.display.ActionScriptVersion"/>
        </actionScriptVersion>
    </class>
    <class path="flash.display.NativeMenu" params="" file="/usr/lib/haxe/std/flash/display/NativeMenu.hx" extern="1">
        <extends path="flash.events.EventDispatcher"/>
        <new public="1" set="method">
            <f a="">
                <x path="Void"/>
            </f>
        </new>
        <meta>
            <m n=":require">
                <e>flash10_1</e>
            </m>
        </meta>
    </class>
    <enum path="flash.display.PixelSnapping" params="" file="/usr/lib/haxe/std/flash/display/PixelSnapping.hx">
        <NEVER/>
        <AUTO/>
        <ALWAYS/>
        <meta>
            <m n=":fakeEnum">
                <e>String</e>
            </m>
        </meta>
    </enum>
    <class path="flash.display.Scene" params="" file="/usr/lib/haxe/std/flash/display/Scene.hx" extern="1">
        <numFrames public="1" set="null">
            <x path="Int"/>
        </numFrames>
        <name public="1" set="null">
            <c path="String"/>
        </name>
        <labels public="1" set="null">
            <c path="Array">
                <c path="flash.display.FrameLabel"/>
            </c>
        </labels>
        <new public="1" set="method">
            <f a="name:labels:numFrames">
                <c path="String"/>
                <c path="Array">
                    <c path="flash.display.FrameLabel"/>
                </c>
                <x path="Int"/>
                <x path="Void"/>
            </f>
        </new>
        <meta>
            <m n=":final"/>
        </meta>
    </class>
    <class path="flash.display.Shader" params="" file="/usr/lib/haxe/std/flash/display/Shader.hx" extern="1">
        <precisionHint public="1">
            <e path="flash.display.ShaderPrecision"/>
        </precisionHint>
        <data public="1">
            <c path="flash.display.ShaderData"/>
        </data>
        <byteCode public="1" get="null">
            <c path="flash.utils.ByteArray"/>
        </byteCode>
        <new public="1" set="method">
            <f a="?code">
                <c path="flash.utils.ByteArray"/>
                <x path="Void"/>
            </f>
        </new>
        <meta>
            <m n=":require">
                <e>flash10</e>
            </m>
        </meta>
    </class>
    <class path="flash.display.ShaderData" params="" file="/usr/lib/haxe/std/flash/display/ShaderData.hx" extern="1">
        <new public="1" set="method">
            <f a="byteCode">
                <c path="flash.utils.ByteArray"/>
                <x path="Void"/>
            </f>
        </new>
        <haxe_dynamic>
            <d/>
        </haxe_dynamic>
    </class>
    <enum path="flash.display.ShaderPrecision" params="" file="/usr/lib/haxe/std/flash/display/ShaderPrecision.hx">
        <FULL/>
        <FAST/>
        <meta>
            <m n=":fakeEnum">
                <e>String</e>
            </m>
        </meta>
    </enum>
    <class path="flash.display.Shape" params="" file="/usr/lib/haxe/std/flash/display/Shape.hx" extern="1">
        <extends path="flash.display.DisplayObject"/>
        <graphics public="1" set="null">
            <c path="flash.display.Graphics"/>
        </graphics>
        <new public="1" set="method">
            <f a="">
                <x path="Void"/>
            </f>
        </new>
    </class>
    <class path="flash.display.SimpleButton" params="" file="/usr/lib/haxe/std/flash/display/SimpleButton.hx"
           extern="1">
        <extends path="flash.display.InteractiveObject"/>
        <useHandCursor public="1">
            <x path="Bool"/>
        </useHandCursor>
        <upState public="1">
            <c path="flash.display.DisplayObject"/>
        </upState>
        <trackAsMenu public="1">
            <x path="Bool"/>
        </trackAsMenu>
        <soundTransform public="1">
            <c path="flash.media.SoundTransform"/>
        </soundTransform>
        <overState public="1">
            <c path="flash.display.DisplayObject"/>
        </overState>
        <hitTestState public="1">
            <c path="flash.display.DisplayObject"/>
        </hitTestState>
        <enabled public="1">
            <x path="Bool"/>
        </enabled>
        <downState public="1">
            <c path="flash.display.DisplayObject"/>
        </downState>
        <new public="1" set="method">
            <f a="?upState:?overState:?downState:?hitTestState">
                <c path="flash.display.DisplayObject"/>
                <c path="flash.display.DisplayObject"/>
                <c path="flash.display.DisplayObject"/>
                <c path="flash.display.DisplayObject"/>
                <x path="Void"/>
            </f>
        </new>
    </class>
    <enum path="flash.display.SpreadMethod" params="" file="/usr/lib/haxe/std/flash/display/SpreadMethod.hx">
        <REPEAT/>
        <REFLECT/>
        <PAD/>
        <meta>
            <m n=":fakeEnum">
                <e>String</e>
            </m>
        </meta>
    </enum>
    <class path="flash.display.Stage" params="" file="/usr/lib/haxe/std/flash/display/Stage.hx" extern="1">
        <extends path="flash.display.DisplayObjectContainer"/>
        <isFocusInaccessible public="1" set="method">
            <f a="">
                <x path="Bool"/>
            </f>
        </isFocusInaccessible>
        <invalidate public="1" set="method">
            <f a="">
                <x path="Void"/>
            </f>
        </invalidate>
        <wmodeGPU public="1" set="null">
            <x path="Bool"/>
            <meta>
                <m n=":require">
                    <e>flash10_1</e>
                </m>
            </meta>
        </wmodeGPU>
        <stageWidth public="1">
            <x path="Int"/>
        </stageWidth>
        <stageVideos public="1" set="null">
            <c path="flash.Vector">
                <c path="flash.media.StageVideo"/>
            </c>
            <meta>
                <m n=":require">
                    <e>flash10_2</e>
                </m>
            </meta>
        </stageVideos>
        <stageHeight public="1">
            <x path="Int"/>
        </stageHeight>
        <stageFocusRect public="1">
            <x path="Bool"/>
        </stageFocusRect>
        <stage3Ds public="1" set="null">
            <c path="flash.Vector">
                <c path="flash.display.Stage3D"/>
            </c>
            <meta>
                <m n=":require">
                    <e>flash11</e>
                </m>
            </meta>
        </stage3Ds>
        <softKeyboardRect public="1" set="null">
            <c path="flash.geom.Rectangle"/>
            <meta>
                <m n=":require">
                    <e>flash11</e>
                </m>
            </meta>
        </softKeyboardRect>
        <showDefaultContextMenu public="1">
            <x path="Bool"/>
        </showDefaultContextMenu>
        <scaleMode public="1">
            <e path="flash.display.StageScaleMode"/>
        </scaleMode>
        <quality public="1">
            <e path="flash.display.StageQuality"/>
        </quality>
        <fullScreenWidth public="1" set="null">
            <x path="UInt"/>
        </fullScreenWidth>
        <fullScreenSourceRect public="1">
            <c path="flash.geom.Rectangle"/>
        </fullScreenSourceRect>
        <fullScreenHeight public="1" set="null">
            <x path="UInt"/>
        </fullScreenHeight>
        <frameRate public="1">
            <x path="Float"/>
        </frameRate>
        <focus public="1">
            <c path="flash.display.InteractiveObject"/>
        </focus>
        <displayState public="1">
            <e path="flash.display.StageDisplayState"/>
        </displayState>
        <displayContextInfo public="1" set="null">
            <c path="String"/>
            <meta>
                <m n=":require">
                    <e>flash11</e>
                </m>
            </meta>
        </displayContextInfo>
        <colorCorrectionSupport public="1" set="null">
            <e path="flash.display.ColorCorrectionSupport"/>
            <meta>
                <m n=":require">
                    <e>flash10</e>
                </m>
            </meta>
        </colorCorrectionSupport>
        <colorCorrection public="1">
            <e path="flash.display.ColorCorrection"/>
            <meta>
                <m n=":require">
                    <e>flash10</e>
                </m>
            </meta>
        </colorCorrection>
        <color public="1">
            <x path="UInt"/>
            <meta>
                <m n=":require">
                    <e>flash10_2</e>
                </m>
            </meta>
        </color>
        <allowsFullScreen public="1" set="null">
            <x path="Bool"/>
            <meta>
                <m n=":require">
                    <e>flash11</e>
                </m>
            </meta>
        </allowsFullScreen>
        <align public="1">
            <e path="flash.display.StageAlign"/>
        </align>
    </class>
    <class path="flash.display.Stage3D" params="" file="/usr/lib/haxe/std/flash/display/Stage3D.hx" extern="1">
        <extends path="flash.events.EventDispatcher"/>
        <requestContext3D public="1" set="method">
            <f a="?context3DRenderMode:?profile">
                <c path="String"/>
                <e path="flash.display3D.Context3DProfile"/>
                <x path="Void"/>
            </f>
        </requestContext3D>
        <y public="1">
            <x path="Float"/>
        </y>
        <x public="1">
            <x path="Float"/>
        </x>
        <visible public="1">
            <x path="Bool"/>
        </visible>
        <context3D public="1" set="null">
            <c path="flash.display3D.Context3D"/>
        </context3D>
        <meta>
            <m n=":require">
                <e>flash11</e>
            </m>
        </meta>
    </class>
    <enum path="flash.display.StageAlign" params="" file="/usr/lib/haxe/std/flash/display/StageAlign.hx">
        <TOP_RIGHT/>
        <TOP_LEFT/>
        <TOP/>
        <RIGHT/>
        <LEFT/>
        <BOTTOM_RIGHT/>
        <BOTTOM_LEFT/>
        <BOTTOM/>
        <meta>
            <m n=":fakeEnum">
                <e>String</e>
            </m>
        </meta>
    </enum>
    <enum path="flash.display.StageDisplayState" params="" file="/usr/lib/haxe/std/flash/display/StageDisplayState.hx">
        <NORMAL/>
        <FULL_SCREEN_INTERACTIVE/>
        <FULL_SCREEN/>
        <meta>
            <m n=":fakeEnum">
                <e>String</e>
            </m>
        </meta>
    </enum>
    <enum path="flash.display.StageQuality" params="" file="/usr/lib/haxe/std/flash/display/StageQuality.hx">
        <MEDIUM/>
        <LOW/>
        <HIGH_8X8_LINEAR/>
        <HIGH_8X8/>
        <HIGH_16X16_LINEAR/>
        <HIGH_16X16/>
        <HIGH/>
        <BEST/>
        <meta>
            <m n=":fakeEnum">
                <e>String</e>
            </m>
        </meta>
    </enum>
    <enum path="flash.display.StageScaleMode" params="" file="/usr/lib/haxe/std/flash/display/StageScaleMode.hx">
        <SHOW_ALL/>
        <NO_SCALE/>
        <NO_BORDER/>
        <EXACT_FIT/>
        <meta>
            <m n=":fakeEnum">
                <e>String</e>
            </m>
        </meta>
    </enum>
    <enum path="flash.display.TriangleCulling" params="" file="/usr/lib/haxe/std/flash/display/TriangleCulling.hx">
        <POSITIVE/>
        <NONE/>
        <NEGATIVE/>
        <meta>
            <m n=":fakeEnum">
                <e>String</e>
            </m>
        </meta>
    </enum>
    <class path="flash.display3D.Context3D" params="" file="/usr/lib/haxe/std/flash/display3D/Context3D.hx" extern="1">
        <extends path="flash.events.EventDispatcher"/>
        <setVertexBufferAt public="1" set="method">
            <f a="index:buffer:?bufferOffset:?format">
                <x path="Int"/>
                <c path="flash.display3D.VertexBuffer3D"/>
                <x path="Int"/>
                <e path="flash.display3D.Context3DVertexBufferFormat"/>
                <x path="Void"/>
            </f>
        </setVertexBufferAt>
        <setTextureAt public="1" set="method">
            <f a="sampler:texture">
                <x path="Int"/>
                <c path="flash.display3D.textures.TextureBase"/>
                <x path="Void"/>
            </f>
        </setTextureAt>
        <setStencilReferenceValue public="1" set="method">
            <f a="referenceValue:?readMask:?writeMask">
                <x path="UInt"/>
                <x path="UInt"/>
                <x path="UInt"/>
                <x path="Void"/>
            </f>
        </setStencilReferenceValue>
        <setStencilActions public="1" set="method">
            <f a="?triangleFace:?compareMode:?actionOnBothPass:?actionOnDepthFail:?actionOnDepthPassStencilFail">
                <e path="flash.display3D.Context3DTriangleFace"/>
                <e path="flash.display3D.Context3DCompareMode"/>
                <e path="flash.display3D.Context3DStencilAction"/>
                <e path="flash.display3D.Context3DStencilAction"/>
                <e path="flash.display3D.Context3DStencilAction"/>
                <x path="Void"/>
            </f>
        </setStencilActions>
        <setScissorRectangle public="1" set="method">
            <f a="rectangle">
                <c path="flash.geom.Rectangle"/>
                <x path="Void"/>
            </f>
        </setScissorRectangle>
        <setRenderToTexture public="1" set="method">
            <f a="texture:?enableDepthAndStencil:?antiAlias:?surfaceSelector">
                <c path="flash.display3D.textures.TextureBase"/>
                <x path="Bool"/>
                <x path="Int"/>
                <x path="Int"/>
                <x path="Void"/>
            </f>
        </setRenderToTexture>
        <setRenderToBackBuffer public="1" set="method">
            <f a="">
                <x path="Void"/>
            </f>
        </setRenderToBackBuffer>
        <setProgramConstantsFromVector public="1" set="method">
            <f a="programType:firstRegister:data:?numRegisters">
                <e path="flash.display3D.Context3DProgramType"/>
                <x path="Int"/>
                <c path="flash.Vector">
                    <x path="Float"/>
                </c>
                <x path="Int"/>
                <x path="Void"/>
            </f>
        </setProgramConstantsFromVector>
        <setProgramConstantsFromMatrix public="1" set="method">
            <f a="programType:firstRegister:matrix:?transposedMatrix">
                <e path="flash.display3D.Context3DProgramType"/>
                <x path="Int"/>
                <c path="flash.geom.Matrix3D"/>
                <x path="Bool"/>
                <x path="Void"/>
            </f>
        </setProgramConstantsFromMatrix>
        <setProgram public="1" set="method">
            <f a="program">
                <c path="flash.display3D.Program3D"/>
                <x path="Void"/>
            </f>
        </setProgram>
        <setDepthTest public="1" set="method">
            <f a="depthMask:passCompareMode">
                <x path="Bool"/>
                <e path="flash.display3D.Context3DCompareMode"/>
                <x path="Void"/>
            </f>
        </setDepthTest>
        <setCulling public="1" set="method">
            <f a="triangleFaceToCull">
                <e path="flash.display3D.Context3DTriangleFace"/>
                <x path="Void"/>
            </f>
        </setCulling>
        <setColorMask public="1" set="method">
            <f a="red:green:blue:alpha">
                <x path="Bool"/>
                <x path="Bool"/>
                <x path="Bool"/>
                <x path="Bool"/>
                <x path="Void"/>
            </f>
        </setColorMask>
        <setBlendFactors public="1" set="method">
            <f a="sourceFactor:destinationFactor">
                <e path="flash.display3D.Context3DBlendFactor"/>
                <e path="flash.display3D.Context3DBlendFactor"/>
                <x path="Void"/>
            </f>
        </setBlendFactors>
        <present public="1" set="method">
            <f a="">
                <x path="Void"/>
            </f>
        </present>
        <drawTriangles public="1" set="method">
            <f a="indexBuffer:?firstIndex:?numTriangles">
                <c path="flash.display3D.IndexBuffer3D"/>
                <x path="Int"/>
                <x path="Int"/>
                <x path="Void"/>
            </f>
        </drawTriangles>
        <drawToBitmapData public="1" set="method">
            <f a="destination">
                <c path="flash.display.BitmapData"/>
                <x path="Void"/>
            </f>
        </drawToBitmapData>
        <dispose public="1" set="method">
            <f a="?recreate">
                <x path="Bool"/>
                <x path="Void"/>
            </f>
        </dispose>
        <createVertexBuffer public="1" set="method">
            <f a="numVertices:data32PerVertex">
                <x path="Int"/>
                <x path="Int"/>
                <c path="flash.display3D.VertexBuffer3D"/>
            </f>
        </createVertexBuffer>
        <createTexture public="1" set="method">
            <f a="width:height:format:optimizeForRenderToTexture:?streamingLevels">
                <x path="Int"/>
                <x path="Int"/>
                <e path="flash.display3D.Context3DTextureFormat"/>
                <x path="Bool"/>
                <x path="Int"/>
                <c path="flash.display3D.textures.Texture"/>
            </f>
        </createTexture>
        <createProgram public="1" set="method">
            <f a="">
                <c path="flash.display3D.Program3D"/>
            </f>
        </createProgram>
        <createIndexBuffer public="1" set="method">
            <f a="numIndices">
                <x path="Int"/>
                <c path="flash.display3D.IndexBuffer3D"/>
            </f>
        </createIndexBuffer>
        <createCubeTexture public="1" set="method">
            <f a="size:format:optimizeForRenderToTexture:?streamingLevels">
                <x path="Int"/>
                <e path="flash.display3D.Context3DTextureFormat"/>
                <x path="Bool"/>
                <x path="Int"/>
                <c path="flash.display3D.textures.CubeTexture"/>
            </f>
        </createCubeTexture>
        <configureBackBuffer public="1" set="method">
            <f a="width:height:antiAlias:?enableDepthAndStencil:?wantsBestResolution">
                <x path="Int"/>
                <x path="Int"/>
                <x path="Int"/>
                <x path="Bool"/>
                <x path="Bool"/>
                <x path="Void"/>
            </f>
        </configureBackBuffer>
        <clear public="1" set="method">
            <f a="?red:?green:?blue:?alpha:?depth:?stencil:?mask">
                <x path="Float"/>
                <x path="Float"/>
                <x path="Float"/>
                <x path="Float"/>
                <x path="Float"/>
                <x path="UInt"/>
                <x path="UInt"/>
                <x path="Void"/>
            </f>
        </clear>
        <enableErrorChecking public="1">
            <x path="Bool"/>
        </enableErrorChecking>
        <driverInfo public="1" set="null">
            <c path="String"/>
        </driverInfo>
        <meta>
            <m n=":final"/>
        </meta>
    </class>
    <enum path="flash.display3D.Context3DBlendFactor" params=""
          file="/usr/lib/haxe/std/flash/display3D/Context3DBlendFactor.hx">
        <ZERO/>
        <SOURCE_COLOR/>
        <SOURCE_ALPHA/>
        <ONE_MINUS_SOURCE_COLOR/>
        <ONE_MINUS_SOURCE_ALPHA/>
        <ONE_MINUS_DESTINATION_COLOR/>
        <ONE_MINUS_DESTINATION_ALPHA/>
        <ONE/>
        <DESTINATION_COLOR/>
        <DESTINATION_ALPHA/>
        <meta>
            <m n=":fakeEnum">
                <e>String</e>
            </m>
        </meta>
    </enum>
    <enum path="flash.display3D.Context3DCompareMode" params=""
          file="/usr/lib/haxe/std/flash/display3D/Context3DCompareMode.hx">
        <NOT_EQUAL/>
        <NEVER/>
        <LESS_EQUAL/>
        <LESS/>
        <GREATER_EQUAL/>
        <GREATER/>
        <EQUAL/>
        <ALWAYS/>
        <meta>
            <m n=":fakeEnum">
                <e>String</e>
            </m>
        </meta>
    </enum>
    <enum path="flash.display3D.Context3DMipFilter" params=""
          file="/usr/lib/haxe/std/flash/display3D/Context3DMipFilter.hx">
        <MIPNONE/>
        <MIPNEAREST/>
        <MIPLINEAR/>
        <meta>
            <m n=":fakeEnum">
                <e>String</e>
            </m>
        </meta>
    </enum>
    <enum path="flash.display3D.Context3DProfile" params=""
          file="/usr/lib/haxe/std/flash/display3D/Context3DProfile.hx">
        <BASELINE_CONSTRAINED/>
        <BASELINE/>
        <meta>
            <m n=":fakeEnum">
                <e>String</e>
            </m>
        </meta>
    </enum>
    <enum path="flash.display3D.Context3DProgramType" params=""
          file="/usr/lib/haxe/std/flash/display3D/Context3DProgramType.hx">
        <VERTEX/>
        <FRAGMENT/>
        <meta>
            <m n=":fakeEnum">
                <e>String</e>
            </m>
        </meta>
    </enum>
    <enum path="flash.display3D.Context3DStencilAction" params=""
          file="/usr/lib/haxe/std/flash/display3D/Context3DStencilAction.hx">
        <ZERO/>
        <SET/>
        <KEEP/>
        <INVERT/>
        <INCREMENT_WRAP/>
        <INCREMENT_SATURATE/>
        <DECREMENT_WRAP/>
        <DECREMENT_SATURATE/>
        <meta>
            <m n=":fakeEnum">
                <e>String</e>
            </m>
        </meta>
    </enum>
    <enum path="flash.display3D.Context3DTextureFilter" params=""
          file="/usr/lib/haxe/std/flash/display3D/Context3DTextureFilter.hx">
        <NEAREST/>
        <LINEAR/>
        <meta>
            <m n=":fakeEnum">
                <e>String</e>
            </m>
        </meta>
    </enum>
    <enum path="flash.display3D.Context3DTextureFormat" params=""
          file="/usr/lib/haxe/std/flash/display3D/Context3DTextureFormat.hx">
        <COMPRESSED_ALPHA/>
        <COMPRESSED/>
        <BGR_PACKED/>
        <BGRA_PACKED/>
        <BGRA/>
        <meta>
            <m n=":fakeEnum">
                <e>String</e>
            </m>
        </meta>
    </enum>
    <enum path="flash.display3D.Context3DTriangleFace" params=""
          file="/usr/lib/haxe/std/flash/display3D/Context3DTriangleFace.hx">
        <NONE/>
        <FRONT_AND_BACK/>
        <FRONT/>
        <BACK/>
        <meta>
            <m n=":fakeEnum">
                <e>String</e>
            </m>
        </meta>
    </enum>
    <enum path="flash.display3D.Context3DVertexBufferFormat" params=""
          file="/usr/lib/haxe/std/flash/display3D/Context3DVertexBufferFormat.hx">
        <FLOAT_4/>
        <FLOAT_3/>
        <FLOAT_2/>
        <FLOAT_1/>
        <BYTES_4/>
        <meta>
            <m n=":fakeEnum">
                <e>String</e>
            </m>
        </meta>
    </enum>
    <enum path="flash.display3D.Context3DWrapMode" params=""
          file="/usr/lib/haxe/std/flash/display3D/Context3DWrapMode.hx">
        <REPEAT/>
        <CLAMP/>
        <meta>
            <m n=":fakeEnum">
                <e>String</e>
            </m>
        </meta>
    </enum>
    <class path="flash.display3D.IndexBuffer3D" params="" file="/usr/lib/haxe/std/flash/display3D/IndexBuffer3D.hx"
           extern="1">
        <uploadFromVector public="1" set="method">
            <f a="data:startOffset:count">
                <c path="flash.Vector">
                    <x path="UInt"/>
                </c>
                <x path="Int"/>
                <x path="Int"/>
                <x path="Void"/>
            </f>
        </uploadFromVector>
        <uploadFromByteArray public="1" set="method">
            <f a="data:byteArrayOffset:startOffset:count">
                <c path="flash.utils.ByteArray"/>
                <x path="Int"/>
                <x path="Int"/>
                <x path="Int"/>
                <x path="Void"/>
            </f>
        </uploadFromByteArray>
        <dispose public="1" set="method">
            <f a="">
                <x path="Void"/>
            </f>
        </dispose>
        <meta>
            <m n=":final"/>
        </meta>
    </class>
    <class path="flash.display3D.Program3D" params="" file="/usr/lib/haxe/std/flash/display3D/Program3D.hx" extern="1">
        <upload public="1" set="method">
            <f a="vertexProgram:fragmentProgram">
                <c path="flash.utils.ByteArray"/>
                <c path="flash.utils.ByteArray"/>
                <x path="Void"/>
            </f>
        </upload>
        <dispose public="1" set="method">
            <f a="">
                <x path="Void"/>
            </f>
        </dispose>
        <meta>
            <m n=":final"/>
        </meta>
    </class>
    <class path="flash.display3D.VertexBuffer3D" params="" file="/usr/lib/haxe/std/flash/display3D/VertexBuffer3D.hx"
           extern="1">
        <uploadFromVector public="1" set="method">
            <f a="data:startVertex:numVertices">
                <c path="flash.Vector">
                    <x path="Float"/>
                </c>
                <x path="Int"/>
                <x path="Int"/>
                <x path="Void"/>
            </f>
        </uploadFromVector>
        <uploadFromByteArray public="1" set="method">
            <f a="data:byteArrayOffset:startVertex:numVertices">
                <c path="flash.utils.ByteArray"/>
                <x path="Int"/>
                <x path="Int"/>
                <x path="Int"/>
                <x path="Void"/>
            </f>
        </uploadFromByteArray>
        <dispose public="1" set="method">
            <f a="">
                <x path="Void"/>
            </f>
        </dispose>
    </class>
    <class path="flash.display3D.textures.TextureBase" params=""
           file="/usr/lib/haxe/std/flash/display3D/textures/TextureBase.hx" extern="1">
        <extends path="flash.events.EventDispatcher"/>
        <dispose public="1" set="method">
            <f a="">
                <x path="Void"/>
            </f>
        </dispose>
    </class>
    <class path="flash.display3D.textures.CubeTexture" params=""
           file="/usr/lib/haxe/std/flash/display3D/textures/CubeTexture.hx" extern="1">
        <extends path="flash.display3D.textures.TextureBase"/>
        <uploadFromByteArray public="1" set="method">
            <f a="data:byteArrayOffset:side:?miplevel">
                <c path="flash.utils.ByteArray"/>
                <x path="UInt"/>
                <x path="UInt"/>
                <x path="UInt"/>
                <x path="Void"/>
            </f>
        </uploadFromByteArray>
        <uploadFromBitmapData public="1" set="method">
            <f a="source:side:?miplevel">
                <c path="flash.display.BitmapData"/>
                <x path="UInt"/>
                <x path="UInt"/>
                <x path="Void"/>
            </f>
        </uploadFromBitmapData>
        <uploadCompressedTextureFromByteArray public="1" set="method">
            <f a="data:byteArrayOffset:?async">
                <c path="flash.utils.ByteArray"/>
                <x path="UInt"/>
                <x path="Bool"/>
                <x path="Void"/>
            </f>
        </uploadCompressedTextureFromByteArray>
        <meta>
            <m n=":final"/>
        </meta>
    </class>
    <class path="flash.display3D.textures.Texture" params=""
           file="/usr/lib/haxe/std/flash/display3D/textures/Texture.hx" extern="1">
        <extends path="flash.display3D.textures.TextureBase"/>
        <uploadFromByteArray public="1" set="method">
            <f a="data:byteArrayOffset:?miplevel">
                <c path="flash.utils.ByteArray"/>
                <x path="UInt"/>
                <x path="UInt"/>
                <x path="Void"/>
            </f>
        </uploadFromByteArray>
        <uploadFromBitmapData public="1" set="method">
            <f a="source:?miplevel">
                <c path="flash.display.BitmapData"/>
                <x path="UInt"/>
                <x path="Void"/>
            </f>
        </uploadFromBitmapData>
        <uploadCompressedTextureFromByteArray public="1" set="method">
            <f a="data:byteArrayOffset:?async">
                <c path="flash.utils.ByteArray"/>
                <x path="UInt"/>
                <x path="Bool"/>
                <x path="Void"/>
            </f>
        </uploadCompressedTextureFromByteArray>
        <meta>
            <m n=":final"/>
        </meta>
    </class>
    <class path="flash.errors.Error" params="" file="/usr/lib/haxe/std/flash/errors/Error.hx" extern="1">
        <length public="1" static="1">
            <x path="Int"/>
        </length>
        <getErrorMessage public="1" set="method" static="1">
            <f a="index">
                <x path="Int"/>
                <c path="String"/>
            </f>
        </getErrorMessage>
        <throwError public="1" set="method" static="1">
            <f a="type:index:?p1:?p2:?p3:?p4:?p5">
                <x path="Class">
                    <d/>
                </x>
                <x path="UInt"/>
                <d/>
                <d/>
                <d/>
                <d/>
                <d/>
                <d/>
            </f>
        </throwError>
        <getStackTrace public="1" set="method">
            <f a="">
                <c path="String"/>
            </f>
        </getStackTrace>
        <name public="1">
            <d/>
        </name>
        <message public="1">
            <d/>
        </message>
        <errorID public="1" set="null">
            <x path="Int"/>
        </errorID>
        <new public="1" set="method">
            <f a="?message:?id">
                <d/>
                <d/>
                <x path="Void"/>
            </f>
        </new>
        <haxe_dynamic>
            <d/>
        </haxe_dynamic>
    </class>
    <class path="flash.errors.IllegalOperationError" params=""
           file="/usr/lib/haxe/std/flash/errors/IllegalOperationError.hx" extern="1">
        <extends path="flash.errors.Error"/>
        <new public="1" set="method">
            <f a="?message:?id">
                <c path="String"/>
                <x path="Int"/>
                <x path="Void"/>
            </f>
        </new>
    </class>
    <class path="flash.errors.TypeError" params="" file="/usr/lib/haxe/std/flash/errors/TypeError.hx" extern="1">
        <extends path="flash.errors.Error"/>
        <meta>
            <m n=":native">
                <e>"TypeError"</e>
            </m>
        </meta>
    </class>
    <class path="flash.events.TextEvent" params="" file="/usr/lib/haxe/std/flash/events/TextEvent.hx" extern="1">
        <extends path="flash.events.Event"/>
        <LINK public="1" static="1">
            <c path="String"/>
        </LINK>
        <TEXT_INPUT public="1" static="1">
            <c path="String"/>
        </TEXT_INPUT>
        <text public="1">
            <c path="String"/>
        </text>
        <new public="1" set="method">
            <f a="type:?bubbles:?cancelable:?text">
                <c path="String"/>
                <x path="Bool"/>
                <x path="Bool"/>
                <c path="String"/>
                <x path="Void"/>
            </f>
        </new>
    </class>
    <class path="flash.events.ErrorEvent" params="" file="/usr/lib/haxe/std/flash/events/ErrorEvent.hx" extern="1">
        <extends path="flash.events.TextEvent"/>
        <ERROR public="1" static="1">
            <c path="String"/>
        </ERROR>
        <errorID public="1" set="null">
            <x path="Int"/>
            <meta>
                <m n=":require">
                    <e>flash10_1</e>
                </m>
            </meta>
        </errorID>
        <new public="1" set="method">
            <f a="type:?bubbles:?cancelable:?text:?id">
                <c path="String"/>
                <x path="Bool"/>
                <x path="Bool"/>
                <c path="String"/>
                <x path="Int"/>
                <x path="Void"/>
            </f>
        </new>
    </class>
    <enum path="flash.events.EventPhase" params="" file="/usr/lib/haxe/std/flash/events/EventPhase.hx">
        <CAPTURING_PHASE/>
        <BUBBLING_PHASE/>
        <AT_TARGET/>
        <meta>
            <m n=":fakeEnum">
                <e>UInt</e>
            </m>
        </meta>
    </enum>
    <class path="flash.events.IOErrorEvent" params="" file="/usr/lib/haxe/std/flash/events/IOErrorEvent.hx" extern="1">
        <extends path="flash.events.ErrorEvent"/>
        <DISK_ERROR public="1" static="1">
            <c path="String"/>
        </DISK_ERROR>
        <IO_ERROR public="1" static="1">
            <c path="String"/>
        </IO_ERROR>
        <NETWORK_ERROR public="1" static="1">
            <c path="String"/>
        </NETWORK_ERROR>
        <VERIFY_ERROR public="1" static="1">
            <c path="String"/>
        </VERIFY_ERROR>
        <new public="1" set="method">
            <f a="type:?bubbles:?cancelable:?text:?id">
                <c path="String"/>
                <x path="Bool"/>
                <x path="Bool"/>
                <c path="String"/>
                <x path="Int"/>
                <x path="Void"/>
            </f>
        </new>
    </class>
    <class path="flash.events.KeyboardEvent" params="" file="/usr/lib/haxe/std/flash/events/KeyboardEvent.hx"
           extern="1">
        <extends path="flash.events.Event"/>
        <KEY_DOWN public="1" static="1">
            <c path="String"/>
        </KEY_DOWN>
        <KEY_UP public="1" static="1">
            <c path="String"/>
        </KEY_UP>
        <updateAfterEvent public="1" set="method">
            <f a="">
                <x path="Void"/>
            </f>
        </updateAfterEvent>
        <shiftKey public="1">
            <x path="Bool"/>
        </shiftKey>
        <keyLocation public="1">
            <e path="flash.ui.KeyLocation"/>
        </keyLocation>
        <keyCode public="1">
            <x path="UInt"/>
        </keyCode>
        <ctrlKey public="1">
            <x path="Bool"/>
        </ctrlKey>
        <charCode public="1">
            <x path="UInt"/>
        </charCode>
        <altKey public="1">
            <x path="Bool"/>
        </altKey>
        <new public="1" set="method">
            <f a="type:?bubbles:?cancelable:?charCodeValue:?keyCodeValue:?keyLocationValue:?ctrlKeyValue:?altKeyValue:?shiftKeyValue">
                <c path="String"/>
                <x path="Bool"/>
                <x path="Bool"/>
                <x path="UInt"/>
                <x path="UInt"/>
                <e path="flash.ui.KeyLocation"/>
                <x path="Bool"/>
                <x path="Bool"/>
                <x path="Bool"/>
                <x path="Void"/>
            </f>
        </new>
    </class>
    <class path="flash.events.MouseEvent" params="" file="/usr/lib/haxe/std/flash/events/MouseEvent.hx" extern="1">
        <extends path="flash.events.Event"/>
        <CLICK public="1" static="1">
            <c path="String"/>
        </CLICK>
        <DOUBLE_CLICK public="1" static="1">
            <c path="String"/>
        </DOUBLE_CLICK>
        <MOUSE_DOWN public="1" static="1">
            <c path="String"/>
        </MOUSE_DOWN>
        <MOUSE_MOVE public="1" static="1">
            <c path="String"/>
        </MOUSE_MOVE>
        <MOUSE_OUT public="1" static="1">
            <c path="String"/>
        </MOUSE_OUT>
        <MOUSE_OVER public="1" static="1">
            <c path="String"/>
        </MOUSE_OVER>
        <MOUSE_UP public="1" static="1">
            <c path="String"/>
        </MOUSE_UP>
        <MOUSE_WHEEL public="1" static="1">
            <c path="String"/>
        </MOUSE_WHEEL>
        <ROLL_OUT public="1" static="1">
            <c path="String"/>
        </ROLL_OUT>
        <ROLL_OVER public="1" static="1">
            <c path="String"/>
        </ROLL_OVER>
        <updateAfterEvent public="1" set="method">
            <f a="">
                <x path="Void"/>
            </f>
        </updateAfterEvent>
        <stageY public="1" set="null">
            <x path="Float"/>
        </stageY>
        <stageX public="1" set="null">
            <x path="Float"/>
        </stageX>
        <shiftKey public="1">
            <x path="Bool"/>
        </shiftKey>
        <relatedObject public="1">
            <c path="flash.display.InteractiveObject"/>
        </relatedObject>
        <localY public="1">
            <x path="Float"/>
        </localY>
        <localX public="1">
            <x path="Float"/>
        </localX>
        <isRelatedObjectInaccessible public="1">
            <x path="Bool"/>
            <meta>
                <m n=":require">
                    <e>flash10</e>
                </m>
            </meta>
        </isRelatedObjectInaccessible>
        <delta public="1">
            <x path="Int"/>
        </delta>
        <ctrlKey public="1">
            <x path="Bool"/>
        </ctrlKey>
        <buttonDown public="1">
            <x path="Bool"/>
        </buttonDown>
        <altKey public="1">
            <x path="Bool"/>
        </altKey>
        <new public="1" set="method">
            <f a="type:?bubbles:?cancelable:?localX:?localY:?relatedObject:?ctrlKey:?altKey:?shiftKey:?buttonDown:?delta">
                <c path="String"/>
                <x path="Bool"/>
                <x path="Bool"/>
                <x path="Float"/>
                <x path="Float"/>
                <c path="flash.display.InteractiveObject"/>
                <x path="Bool"/>
                <x path="Bool"/>
                <x path="Bool"/>
                <x path="Bool"/>
                <x path="Int"/>
                <x path="Void"/>
            </f>
        </new>
    </class>
    <class path="flash.events.ProgressEvent" params="" file="/usr/lib/haxe/std/flash/events/ProgressEvent.hx"
           extern="1">
        <extends path="flash.events.Event"/>
        <PROGRESS public="1" static="1">
            <c path="String"/>
        </PROGRESS>
        <SOCKET_DATA public="1" static="1">
            <c path="String"/>
        </SOCKET_DATA>
        <bytesTotal public="1">
            <x path="Float"/>
        </bytesTotal>
        <bytesLoaded public="1">
            <x path="Float"/>
        </bytesLoaded>
        <new public="1" set="method">
            <f a="type:?bubbles:?cancelable:?bytesLoaded:?bytesTotal">
                <c path="String"/>
                <x path="Bool"/>
                <x path="Bool"/>
                <x path="Float"/>
                <x path="Float"/>
                <x path="Void"/>
            </f>
        </new>
    </class>
    <class path="flash.events.SecurityErrorEvent" params="" file="/usr/lib/haxe/std/flash/events/SecurityErrorEvent.hx"
           extern="1">
        <extends path="flash.events.ErrorEvent"/>
        <SECURITY_ERROR public="1" static="1">
            <c path="String"/>
        </SECURITY_ERROR>
        <new public="1" set="method">
            <f a="type:?bubbles:?cancelable:?text:?id">
                <c path="String"/>
                <x path="Bool"/>
                <x path="Bool"/>
                <c path="String"/>
                <x path="Int"/>
                <x path="Void"/>
            </f>
        </new>
    </class>
    <class path="flash.events.UncaughtErrorEvents" params=""
           file="/usr/lib/haxe/std/flash/events/UncaughtErrorEvents.hx" extern="1">
        <extends path="flash.events.EventDispatcher"/>
        <new public="1" set="method">
            <f a="">
                <x path="Void"/>
            </f>
        </new>
        <meta>
            <m n=":require">
                <e>flash10_1</e>
            </m>
        </meta>
    </class>
    <class path="flash.external.ExternalInterface" params=""
           file="/usr/lib/haxe/std/flash/external/ExternalInterface.hx" extern="1">
        <available public="1" set="null" static="1">
            <x path="Bool"/>
        </available>
        <marshallExceptions public="1" static="1">
            <x path="Bool"/>
        </marshallExceptions>
        <objectID public="1" set="null" static="1">
            <c path="String"/>
        </objectID>
        <addCallback public="1" set="method" static="1">
            <f a="functionName:closure">
                <c path="String"/>
                <d/>
                <x path="Void"/>
            </f>
        </addCallback>
        <call public="1" set="method" static="1">
            <f a="functionName:?p1:?p2:?p3:?p4:?p5">
                <c path="String"/>
                <d/>
                <d/>
                <d/>
                <d/>
                <d/>
                <d/>
            </f>
        </call>
    </class>
    <class path="flash.filters.BitmapFilter" params="" file="/usr/lib/haxe/std/flash/filters/BitmapFilter.hx"
           extern="1">
        <clone public="1" set="method">
            <f a="">
                <c path="flash.filters.BitmapFilter"/>
            </f>
        </clone>
        <new public="1" set="method">
            <f a="">
                <x path="Void"/>
            </f>
        </new>
    </class>
    <class path="flash.filters.BitmapFilterQuality" params=""
           file="/usr/lib/haxe/std/flash/filters/BitmapFilterQuality.hx" extern="1">
        <HIGH public="1" get="inline" set="null" line="4" static="1">
            <x path="Int"/>
        </HIGH>
        <LOW public="1" get="inline" set="null" line="5" static="1">
            <x path="Int"/>
        </LOW>
        <MEDIUM public="1" get="inline" set="null" line="6" static="1">
            <x path="Int"/>
        </MEDIUM>
    </class>
    <class path="flash.filters.DropShadowFilter" params="" file="/usr/lib/haxe/std/flash/filters/DropShadowFilter.hx"
           extern="1">
        <extends path="flash.filters.BitmapFilter"/>
        <strength public="1">
            <x path="Float"/>
        </strength>
        <quality public="1">
            <x path="Int"/>
        </quality>
        <knockout public="1">
            <x path="Bool"/>
        </knockout>
        <inner public="1">
            <x path="Bool"/>
        </inner>
        <hideObject public="1">
            <x path="Bool"/>
        </hideObject>
        <distance public="1">
            <x path="Float"/>
        </distance>
        <color public="1">
            <x path="UInt"/>
        </color>
        <blurY public="1">
            <x path="Float"/>
        </blurY>
        <blurX public="1">
            <x path="Float"/>
        </blurX>
        <angle public="1">
            <x path="Float"/>
        </angle>
        <alpha public="1">
            <x path="Float"/>
        </alpha>
        <new public="1" set="method">
            <f a="?distance:?angle:?color:?alpha:?blurX:?blurY:?strength:?quality:?inner:?knockout:?hideObject">
                <x path="Float"/>
                <x path="Float"/>
                <x path="UInt"/>
                <x path="Float"/>
                <x path="Float"/>
                <x path="Float"/>
                <x path="Float"/>
                <x path="Int"/>
                <x path="Bool"/>
                <x path="Bool"/>
                <x path="Bool"/>
                <x path="Void"/>
            </f>
        </new>
        <meta>
            <m n=":final"/>
        </meta>
    </class>
    <class path="flash.filters.GlowFilter" params="" file="/usr/lib/haxe/std/flash/filters/GlowFilter.hx" extern="1">
        <extends path="flash.filters.BitmapFilter"/>
        <strength public="1">
            <x path="Float"/>
        </strength>
        <quality public="1">
            <x path="Int"/>
        </quality>
        <knockout public="1">
            <x path="Bool"/>
        </knockout>
        <inner public="1">
            <x path="Bool"/>
        </inner>
        <color public="1">
            <x path="UInt"/>
        </color>
        <blurY public="1">
            <x path="Float"/>
        </blurY>
        <blurX public="1">
            <x path="Float"/>
        </blurX>
        <alpha public="1">
            <x path="Float"/>
        </alpha>
        <new public="1" set="method">
            <f a="?color:?alpha:?blurX:?blurY:?strength:?quality:?inner:?knockout">
                <x path="UInt"/>
                <x path="Float"/>
                <x path="Float"/>
                <x path="Float"/>
                <x path="Float"/>
                <x path="Int"/>
                <x path="Bool"/>
                <x path="Bool"/>
                <x path="Void"/>
            </f>
        </new>
        <meta>
            <m n=":final"/>
        </meta>
    </class>
    <class path="flash.geom.ColorTransform" params="" file="/usr/lib/haxe/std/flash/geom/ColorTransform.hx" extern="1">
        <toString public="1" set="method">
            <f a="">
                <c path="String"/>
            </f>
        </toString>
        <concat public="1" set="method">
            <f a="second">
                <c path="flash.geom.ColorTransform"/>
                <x path="Void"/>
            </f>
        </concat>
        <redOffset public="1">
            <x path="Float"/>
        </redOffset>
        <redMultiplier public="1">
            <x path="Float"/>
        </redMultiplier>
        <greenOffset public="1">
            <x path="Float"/>
        </greenOffset>
        <greenMultiplier public="1">
            <x path="Float"/>
        </greenMultiplier>
        <color public="1">
            <x path="UInt"/>
        </color>
        <blueOffset public="1">
            <x path="Float"/>
        </blueOffset>
        <blueMultiplier public="1">
            <x path="Float"/>
        </blueMultiplier>
        <alphaOffset public="1">
            <x path="Float"/>
        </alphaOffset>
        <alphaMultiplier public="1">
            <x path="Float"/>
        </alphaMultiplier>
        <new public="1" set="method">
            <f a="?redMultiplier:?greenMultiplier:?blueMultiplier:?alphaMultiplier:?redOffset:?greenOffset:?blueOffset:?alphaOffset">
                <x path="Float"/>
                <x path="Float"/>
                <x path="Float"/>
                <x path="Float"/>
                <x path="Float"/>
                <x path="Float"/>
                <x path="Float"/>
                <x path="Float"/>
                <x path="Void"/>
            </f>
        </new>
    </class>
    <class path="flash.geom.Matrix" params="" file="/usr/lib/haxe/std/flash/geom/Matrix.hx" extern="1">
        <translate public="1" set="method">
            <f a="dx:dy">
                <x path="Float"/>
                <x path="Float"/>
                <x path="Void"/>
            </f>
        </translate>
        <transformPoint public="1" set="method">
            <f a="point">
                <c path="flash.geom.Point"/>
                <c path="flash.geom.Point"/>
            </f>
        </transformPoint>
        <toString public="1" set="method">
            <f a="">
                <c path="String"/>
            </f>
        </toString>
        <setTo public="1" set="method">
            <f a="aa:ba:ca:da:txa:tya">
                <x path="Float"/>
                <x path="Float"/>
                <x path="Float"/>
                <x path="Float"/>
                <x path="Float"/>
                <x path="Float"/>
                <x path="Void"/>
            </f>
            <meta>
                <m n=":require">
                    <e>flash11</e>
                </m>
            </meta>
        </setTo>
        <scale public="1" set="method">
            <f a="sx:sy">
                <x path="Float"/>
                <x path="Float"/>
                <x path="Void"/>
            </f>
        </scale>
        <rotate public="1" set="method">
            <f a="angle">
                <x path="Float"/>
                <x path="Void"/>
            </f>
        </rotate>
        <invert public="1" set="method">
            <f a="">
                <x path="Void"/>
            </f>
        </invert>
        <identity public="1" set="method">
            <f a="">
                <x path="Void"/>
            </f>
        </identity>
        <deltaTransformPoint public="1" set="method">
            <f a="point">
                <c path="flash.geom.Point"/>
                <c path="flash.geom.Point"/>
            </f>
        </deltaTransformPoint>
        <createGradientBox public="1" set="method">
            <f a="width:height:?rotation:?tx:?ty">
                <x path="Float"/>
                <x path="Float"/>
                <x path="Float"/>
                <x path="Float"/>
                <x path="Float"/>
                <x path="Void"/>
            </f>
        </createGradientBox>
        <createBox public="1" set="method">
            <f a="scaleX:scaleY:?rotation:?tx:?ty">
                <x path="Float"/>
                <x path="Float"/>
                <x path="Float"/>
                <x path="Float"/>
                <x path="Float"/>
                <x path="Void"/>
            </f>
        </createBox>
        <copyRowTo public="1" set="method">
            <f a="row:vector3D">
                <x path="UInt"/>
                <c path="flash.geom.Vector3D"/>
                <x path="Void"/>
            </f>
            <meta>
                <m n=":require">
                    <e>flash11</e>
                </m>
            </meta>
        </copyRowTo>
        <copyRowFrom public="1" set="method">
            <f a="row:vector3D">
                <x path="UInt"/>
                <c path="flash.geom.Vector3D"/>
                <x path="Void"/>
            </f>
            <meta>
                <m n=":require">
                    <e>flash11</e>
                </m>
            </meta>
        </copyRowFrom>
        <copyFrom public="1" set="method">
            <f a="sourceMatrix">
                <c path="flash.geom.Matrix"/>
                <x path="Void"/>
            </f>
            <meta>
                <m n=":require">
                    <e>flash11</e>
                </m>
            </meta>
        </copyFrom>
        <copyColumnTo public="1" set="method">
            <f a="column:vector3D">
                <x path="UInt"/>
                <c path="flash.geom.Vector3D"/>
                <x path="Void"/>
            </f>
            <meta>
                <m n=":require">
                    <e>flash11</e>
                </m>
            </meta>
        </copyColumnTo>
        <copyColumnFrom public="1" set="method">
            <f a="column:vector3D">
                <x path="UInt"/>
                <c path="flash.geom.Vector3D"/>
                <x path="Void"/>
            </f>
            <meta>
                <m n=":require">
                    <e>flash11</e>
                </m>
            </meta>
        </copyColumnFrom>
        <concat public="1" set="method">
            <f a="m">
                <c path="flash.geom.Matrix"/>
                <x path="Void"/>
            </f>
        </concat>
        <clone public="1" set="method">
            <f a="">
                <c path="flash.geom.Matrix"/>
            </f>
        </clone>
        <ty public="1">
            <x path="Float"/>
        </ty>
        <tx public="1">
            <x path="Float"/>
        </tx>
        <d public="1">
            <x path="Float"/>
        </d>
        <c public="1">
            <x path="Float"/>
        </c>
        <b public="1">
            <x path="Float"/>
        </b>
        <a public="1">
            <x path="Float"/>
        </a>
        <new public="1" set="method">
            <f a="?a:?b:?c:?d:?tx:?ty">
                <x path="Float"/>
                <x path="Float"/>
                <x path="Float"/>
                <x path="Float"/>
                <x path="Float"/>
                <x path="Float"/>
                <x path="Void"/>
            </f>
        </new>
    </class>
    <class path="flash.geom.Matrix3D" params="" file="/usr/lib/haxe/std/flash/geom/Matrix3D.hx" extern="1">
        <interpolate public="1" set="method" static="1">
            <f a="thisMat:toMat:percent">
                <c path="flash.geom.Matrix3D"/>
                <c path="flash.geom.Matrix3D"/>
                <x path="Float"/>
                <c path="flash.geom.Matrix3D"/>
            </f>
        </interpolate>
        <transpose public="1" set="method">
            <f a="">
                <x path="Void"/>
            </f>
        </transpose>
        <transformVectors public="1" set="method">
            <f a="vin:vout">
                <c path="flash.Vector">
                    <x path="Float"/>
                </c>
                <c path="flash.Vector">
                    <x path="Float"/>
                </c>
                <x path="Void"/>
            </f>
        </transformVectors>
        <transformVector public="1" set="method">
            <f a="v">
                <c path="flash.geom.Vector3D"/>
                <c path="flash.geom.Vector3D"/>
            </f>
        </transformVector>
        <recompose public="1" set="method">
            <f a="components:?orientationStyle">
                <c path="flash.Vector">
                    <c path="flash.geom.Vector3D"/>
                </c>
                <e path="flash.geom.Orientation3D"/>
                <x path="Bool"/>
            </f>
        </recompose>
        <prependTranslation public="1" set="method">
            <f a="x:y:z">
                <x path="Float"/>
                <x path="Float"/>
                <x path="Float"/>
                <x path="Void"/>
            </f>
        </prependTranslation>
        <prependScale public="1" set="method">
            <f a="xScale:yScale:zScale">
                <x path="Float"/>
                <x path="Float"/>
                <x path="Float"/>
                <x path="Void"/>
            </f>
        </prependScale>
        <prependRotation public="1" set="method">
            <f a="degrees:axis:?pivotPoint">
                <x path="Float"/>
                <c path="flash.geom.Vector3D"/>
                <c path="flash.geom.Vector3D"/>
                <x path="Void"/>
            </f>
        </prependRotation>
        <prepend public="1" set="method">
            <f a="rhs">
                <c path="flash.geom.Matrix3D"/>
                <x path="Void"/>
            </f>
        </prepend>
        <pointAt public="1" set="method">
            <f a="pos:?at:?up">
                <c path="flash.geom.Vector3D"/>
                <c path="flash.geom.Vector3D"/>
                <c path="flash.geom.Vector3D"/>
                <x path="Void"/>
            </f>
        </pointAt>
        <invert public="1" set="method">
            <f a="">
                <x path="Bool"/>
            </f>
        </invert>
        <interpolateTo public="1" set="method">
            <f a="toMat:percent">
                <c path="flash.geom.Matrix3D"/>
                <x path="Float"/>
                <x path="Void"/>
            </f>
        </interpolateTo>
        <identity public="1" set="method">
            <f a="">
                <x path="Void"/>
            </f>
        </identity>
        <deltaTransformVector public="1" set="method">
            <f a="v">
                <c path="flash.geom.Vector3D"/>
                <c path="flash.geom.Vector3D"/>
            </f>
        </deltaTransformVector>
        <decompose public="1" set="method">
            <f a="?orientationStyle">
                <e path="flash.geom.Orientation3D"/>
                <c path="flash.Vector">
                    <c path="flash.geom.Vector3D"/>
                </c>
            </f>
        </decompose>
        <copyToMatrix3D public="1" set="method">
            <f a="dest">
                <c path="flash.geom.Matrix3D"/>
                <x path="Void"/>
            </f>
            <meta>
                <m n=":require">
                    <e>flash11</e>
                </m>
            </meta>
        </copyToMatrix3D>
        <copyRowTo public="1" set="method">
            <f a="row:vector3D">
                <x path="UInt"/>
                <c path="flash.geom.Vector3D"/>
                <x path="Void"/>
            </f>
            <meta>
                <m n=":require">
                    <e>flash11</e>
                </m>
            </meta>
        </copyRowTo>
        <copyRowFrom public="1" set="method">
            <f a="row:vector3D">
                <x path="UInt"/>
                <c path="flash.geom.Vector3D"/>
                <x path="Void"/>
            </f>
            <meta>
                <m n=":require">
                    <e>flash11</e>
                </m>
            </meta>
        </copyRowFrom>
        <copyRawDataTo public="1" set="method">
            <f a="vector:?index:?transpose">
                <c path="flash.Vector">
                    <x path="Float"/>
                </c>
                <x path="UInt"/>
                <x path="Bool"/>
                <x path="Void"/>
            </f>
            <meta>
                <m n=":require">
                    <e>flash11</e>
                </m>
            </meta>
        </copyRawDataTo>
        <copyRawDataFrom public="1" set="method">
            <f a="vector:?index:?transpose">
                <c path="flash.Vector">
                    <x path="Float"/>
                </c>
                <x path="UInt"/>
                <x path="Bool"/>
                <x path="Void"/>
            </f>
            <meta>
                <m n=":require">
                    <e>flash11</e>
                </m>
            </meta>
        </copyRawDataFrom>
        <copyFrom public="1" set="method">
            <f a="sourceMatrix3D">
                <c path="flash.geom.Matrix3D"/>
                <x path="Void"/>
            </f>
            <meta>
                <m n=":require">
                    <e>flash11</e>
                </m>
            </meta>
        </copyFrom>
        <copyColumnTo public="1" set="method">
            <f a="column:vector3D">
                <x path="UInt"/>
                <c path="flash.geom.Vector3D"/>
                <x path="Void"/>
            </f>
            <meta>
                <m n=":require">
                    <e>flash11</e>
                </m>
            </meta>
        </copyColumnTo>
        <copyColumnFrom public="1" set="method">
            <f a="column:vector3D">
                <x path="UInt"/>
                <c path="flash.geom.Vector3D"/>
                <x path="Void"/>
            </f>
            <meta>
                <m n=":require">
                    <e>flash11</e>
                </m>
            </meta>
        </copyColumnFrom>
        <clone public="1" set="method">
            <f a="">
                <c path="flash.geom.Matrix3D"/>
            </f>
        </clone>
        <appendTranslation public="1" set="method">
            <f a="x:y:z">
                <x path="Float"/>
                <x path="Float"/>
                <x path="Float"/>
                <x path="Void"/>
            </f>
        </appendTranslation>
        <appendScale public="1" set="method">
            <f a="xScale:yScale:zScale">
                <x path="Float"/>
                <x path="Float"/>
                <x path="Float"/>
                <x path="Void"/>
            </f>
        </appendScale>
        <appendRotation public="1" set="method">
            <f a="degrees:axis:?pivotPoint">
                <x path="Float"/>
                <c path="flash.geom.Vector3D"/>
                <c path="flash.geom.Vector3D"/>
                <x path="Void"/>
            </f>
        </appendRotation>
        <append public="1" set="method">
            <f a="lhs">
                <c path="flash.geom.Matrix3D"/>
                <x path="Void"/>
            </f>
        </append>
        <rawData public="1">
            <c path="flash.Vector">
                <x path="Float"/>
            </c>
        </rawData>
        <position public="1">
            <c path="flash.geom.Vector3D"/>
        </position>
        <determinant public="1" set="null">
            <x path="Float"/>
        </determinant>
        <new public="1" set="method">
            <f a="?v">
                <c path="flash.Vector">
                    <x path="Float"/>
                </c>
                <x path="Void"/>
            </f>
        </new>
        <meta>
            <m n=":require">
                <e>flash10</e>
            </m>
        </meta>
    </class>
    <enum path="flash.geom.Orientation3D" params="" file="/usr/lib/haxe/std/flash/geom/Orientation3D.hx">
        <QUATERNION/>
        <EULER_ANGLES/>
        <AXIS_ANGLE/>
        <meta>
            <m n=":fakeEnum">
                <e>String</e>
            </m>
        </meta>
    </enum>
    <class path="flash.geom.PerspectiveProjection" params=""
           file="/usr/lib/haxe/std/flash/geom/PerspectiveProjection.hx" extern="1">
        <toMatrix3D public="1" set="method">
            <f a="">
                <c path="flash.geom.Matrix3D"/>
            </f>
        </toMatrix3D>
        <projectionCenter public="1">
            <c path="flash.geom.Point"/>
        </projectionCenter>
        <focalLength public="1">
            <x path="Float"/>
        </focalLength>
        <fieldOfView public="1">
            <x path="Float"/>
        </fieldOfView>
        <new public="1" set="method">
            <f a="">
                <x path="Void"/>
            </f>
        </new>
        <meta>
            <m n=":require">
                <e>flash10</e>
            </m>
        </meta>
    </class>
    <class path="flash.geom.Rectangle" params="" file="/usr/lib/haxe/std/flash/geom/Rectangle.hx" extern="1">
        <union public="1" set="method">
            <f a="toUnion">
                <c path="flash.geom.Rectangle"/>
                <c path="flash.geom.Rectangle"/>
            </f>
        </union>
        <toString public="1" set="method">
            <f a="">
                <c path="String"/>
            </f>
        </toString>
        <setTo public="1" set="method">
            <f a="xa:ya:widtha:heighta">
                <x path="Float"/>
                <x path="Float"/>
                <x path="Float"/>
                <x path="Float"/>
                <x path="Void"/>
            </f>
            <meta>
                <m n=":require">
                    <e>flash11</e>
                </m>
            </meta>
        </setTo>
        <setEmpty public="1" set="method">
            <f a="">
                <x path="Void"/>
            </f>
        </setEmpty>
        <offsetPoint public="1" set="method">
            <f a="point">
                <c path="flash.geom.Point"/>
                <x path="Void"/>
            </f>
        </offsetPoint>
        <offset public="1" set="method">
            <f a="dx:dy">
                <x path="Float"/>
                <x path="Float"/>
                <x path="Void"/>
            </f>
        </offset>
        <isEmpty public="1" set="method">
            <f a="">
                <x path="Bool"/>
            </f>
        </isEmpty>
        <intersects public="1" set="method">
            <f a="toIntersect">
                <c path="flash.geom.Rectangle"/>
                <x path="Bool"/>
            </f>
        </intersects>
        <intersection public="1" set="method">
            <f a="toIntersect">
                <c path="flash.geom.Rectangle"/>
                <c path="flash.geom.Rectangle"/>
            </f>
        </intersection>
        <inflatePoint public="1" set="method">
            <f a="point">
                <c path="flash.geom.Point"/>
                <x path="Void"/>
            </f>
        </inflatePoint>
        <inflate public="1" set="method">
            <f a="dx:dy">
                <x path="Float"/>
                <x path="Float"/>
                <x path="Void"/>
            </f>
        </inflate>
        <equals public="1" set="method">
            <f a="toCompare">
                <c path="flash.geom.Rectangle"/>
                <x path="Bool"/>
            </f>
        </equals>
        <copyFrom public="1" set="method">
            <f a="sourceRect">
                <c path="flash.geom.Rectangle"/>
                <x path="Void"/>
            </f>
            <meta>
                <m n=":require">
                    <e>flash11</e>
                </m>
            </meta>
        </copyFrom>
        <containsRect public="1" set="method">
            <f a="rect">
                <c path="flash.geom.Rectangle"/>
                <x path="Bool"/>
            </f>
        </containsRect>
        <containsPoint public="1" set="method">
            <f a="point">
                <c path="flash.geom.Point"/>
                <x path="Bool"/>
            </f>
        </containsPoint>
        <contains public="1" set="method">
            <f a="x:y">
                <x path="Float"/>
                <x path="Float"/>
                <x path="Bool"/>
            </f>
        </contains>
        <clone public="1" set="method">
            <f a="">
                <c path="flash.geom.Rectangle"/>
            </f>
        </clone>
        <y public="1">
            <x path="Float"/>
        </y>
        <x public="1">
            <x path="Float"/>
        </x>
        <width public="1">
            <x path="Float"/>
        </width>
        <topLeft public="1">
            <c path="flash.geom.Point"/>
        </topLeft>
        <top public="1">
            <x path="Float"/>
        </top>
        <size public="1">
            <c path="flash.geom.Point"/>
        </size>
        <right public="1">
            <x path="Float"/>
        </right>
        <left public="1">
            <x path="Float"/>
        </left>
        <height public="1">
            <x path="Float"/>
        </height>
        <bottomRight public="1">
            <c path="flash.geom.Point"/>
        </bottomRight>
        <bottom public="1">
            <x path="Float"/>
        </bottom>
        <new public="1" set="method">
            <f a="?x:?y:?width:?height">
                <x path="Float"/>
                <x path="Float"/>
                <x path="Float"/>
                <x path="Float"/>
                <x path="Void"/>
            </f>
        </new>
    </class>
    <class path="flash.geom.Transform" params="" file="/usr/lib/haxe/std/flash/geom/Transform.hx" extern="1">
        <getRelativeMatrix3D public="1" set="method">
            <f a="relativeTo">
                <c path="flash.display.DisplayObject"/>
                <c path="flash.geom.Matrix3D"/>
            </f>
            <meta>
                <m n=":require">
                    <e>flash10</e>
                </m>
            </meta>
        </getRelativeMatrix3D>
        <pixelBounds public="1" set="null">
            <c path="flash.geom.Rectangle"/>
        </pixelBounds>
        <perspectiveProjection public="1">
            <c path="flash.geom.PerspectiveProjection"/>
            <meta>
                <m n=":require">
                    <e>flash10</e>
                </m>
            </meta>
        </perspectiveProjection>
        <matrix3D public="1">
            <c path="flash.geom.Matrix3D"/>
            <meta>
                <m n=":require">
                    <e>flash10</e>
                </m>
            </meta>
        </matrix3D>
        <matrix public="1">
            <c path="flash.geom.Matrix"/>
        </matrix>
        <concatenatedMatrix public="1" set="null">
            <c path="flash.geom.Matrix"/>
        </concatenatedMatrix>
        <concatenatedColorTransform public="1" set="null">
            <c path="flash.geom.ColorTransform"/>
        </concatenatedColorTransform>
        <colorTransform public="1">
            <c path="flash.geom.ColorTransform"/>
        </colorTransform>
        <new public="1" set="method">
            <f a="displayObject">
                <c path="flash.display.DisplayObject"/>
                <x path="Void"/>
            </f>
        </new>
    </class>
    <class path="flash.geom.Vector3D" params="" file="/usr/lib/haxe/std/flash/geom/Vector3D.hx" extern="1">
        <X_AXIS public="1" static="1">
            <c path="flash.geom.Vector3D"/>
        </X_AXIS>
        <Y_AXIS public="1" static="1">
            <c path="flash.geom.Vector3D"/>
        </Y_AXIS>
        <Z_AXIS public="1" static="1">
            <c path="flash.geom.Vector3D"/>
        </Z_AXIS>
        <angleBetween public="1" set="method" static="1">
            <f a="a:b">
                <c path="flash.geom.Vector3D"/>
                <c path="flash.geom.Vector3D"/>
                <x path="Float"/>
            </f>
        </angleBetween>
        <distance public="1" set="method" static="1">
            <f a="pt1:pt2">
                <c path="flash.geom.Vector3D"/>
                <c path="flash.geom.Vector3D"/>
                <x path="Float"/>
            </f>
        </distance>
        <toString public="1" set="method">
            <f a="">
                <c path="String"/>
            </f>
        </toString>
        <subtract public="1" set="method">
            <f a="a">
                <c path="flash.geom.Vector3D"/>
                <c path="flash.geom.Vector3D"/>
            </f>
        </subtract>
        <setTo public="1" set="method">
            <f a="xa:ya:za">
                <x path="Float"/>
                <x path="Float"/>
                <x path="Float"/>
                <x path="Void"/>
            </f>
            <meta>
                <m n=":require">
                    <e>flash11</e>
                </m>
            </meta>
        </setTo>
        <scaleBy public="1" set="method">
            <f a="s">
                <x path="Float"/>
                <x path="Void"/>
            </f>
        </scaleBy>
        <project public="1" set="method">
            <f a="">
                <x path="Void"/>
            </f>
        </project>
        <normalize public="1" set="method">
            <f a="">
                <x path="Float"/>
            </f>
        </normalize>
        <negate public="1" set="method">
            <f a="">
                <x path="Void"/>
            </f>
        </negate>
        <nearEquals public="1" set="method">
            <f a="toCompare:tolerance:?allFour">
                <c path="flash.geom.Vector3D"/>
                <x path="Float"/>
                <x path="Bool"/>
                <x path="Bool"/>
            </f>
        </nearEquals>
        <incrementBy public="1" set="method">
            <f a="a">
                <c path="flash.geom.Vector3D"/>
                <x path="Void"/>
            </f>
        </incrementBy>
        <equals public="1" set="method">
            <f a="toCompare:?allFour">
                <c path="flash.geom.Vector3D"/>
                <x path="Bool"/>
                <x path="Bool"/>
            </f>
        </equals>
        <dotProduct public="1" set="method">
            <f a="a">
                <c path="flash.geom.Vector3D"/>
                <x path="Float"/>
            </f>
        </dotProduct>
        <decrementBy public="1" set="method">
            <f a="a">
                <c path="flash.geom.Vector3D"/>
                <x path="Void"/>
            </f>
        </decrementBy>
        <crossProduct public="1" set="method">
            <f a="a">
                <c path="flash.geom.Vector3D"/>
                <c path="flash.geom.Vector3D"/>
            </f>
        </crossProduct>
        <copyFrom public="1" set="method">
            <f a="sourceVector3D">
                <c path="flash.geom.Vector3D"/>
                <x path="Void"/>
            </f>
            <meta>
                <m n=":require">
                    <e>flash11</e>
                </m>
            </meta>
        </copyFrom>
        <clone public="1" set="method">
            <f a="">
                <c path="flash.geom.Vector3D"/>
            </f>
        </clone>
        <add public="1" set="method">
            <f a="a">
                <c path="flash.geom.Vector3D"/>
                <c path="flash.geom.Vector3D"/>
            </f>
        </add>
        <z public="1">
            <x path="Float"/>
        </z>
        <y public="1">
            <x path="Float"/>
        </y>
        <x public="1">
            <x path="Float"/>
        </x>
        <w public="1">
            <x path="Float"/>
        </w>
        <lengthSquared public="1" set="null">
            <x path="Float"/>
        </lengthSquared>
        <length public="1" set="null">
            <x path="Float"/>
        </length>
        <new public="1" set="method">
            <f a="?x:?y:?z:?w">
                <x path="Float"/>
                <x path="Float"/>
                <x path="Float"/>
                <x path="Float"/>
                <x path="Void"/>
            </f>
        </new>
        <meta>
            <m n=":require">
                <e>flash10</e>
            </m>
        </meta>
    </class>
    <class path="flash.media.AVCaptionStyle" params="" file="/usr/lib/haxe/std/flash/media/AVCaptionStyle.hx"
           extern="1">
        <BLACK public="1" static="1">
            <c path="String"/>
        </BLACK>
        <BLUE public="1" static="1">
            <c path="String"/>
        </BLUE>
        <BRIGHT_BLUE public="1" static="1">
            <c path="String"/>
        </BRIGHT_BLUE>
        <BRIGHT_CYAN public="1" static="1">
            <c path="String"/>
        </BRIGHT_CYAN>
        <BRIGHT_GREEN public="1" static="1">
            <c path="String"/>
        </BRIGHT_GREEN>
        <BRIGHT_MAGENTA public="1" static="1">
            <c path="String"/>
        </BRIGHT_MAGENTA>
        <BRIGHT_RED public="1" static="1">
            <c path="String"/>
        </BRIGHT_RED>
        <BRIGHT_WHITE public="1" static="1">
            <c path="String"/>
        </BRIGHT_WHITE>
        <BRIGHT_YELLOW public="1" static="1">
            <c path="String"/>
        </BRIGHT_YELLOW>
        <CASUAL public="1" static="1">
            <c path="String"/>
        </CASUAL>
        <CURSIVE public="1" static="1">
            <c path="String"/>
        </CURSIVE>
        <CYAN public="1" static="1">
            <c path="String"/>
        </CYAN>
        <DARK_BLUE public="1" static="1">
            <c path="String"/>
        </DARK_BLUE>
        <DARK_CYAN public="1" static="1">
            <c path="String"/>
        </DARK_CYAN>
        <DARK_GREEN public="1" static="1">
            <c path="String"/>
        </DARK_GREEN>
        <DARK_MAGENTA public="1" static="1">
            <c path="String"/>
        </DARK_MAGENTA>
        <DARK_RED public="1" static="1">
            <c path="String"/>
        </DARK_RED>
        <DARK_YELLOW public="1" static="1">
            <c path="String"/>
        </DARK_YELLOW>
        <DEFAULT public="1" static="1">
            <c path="String"/>
        </DEFAULT>
        <DEPRESSED public="1" static="1">
            <c path="String"/>
        </DEPRESSED>
        <GRAY public="1" static="1">
            <c path="String"/>
        </GRAY>
        <GREEN public="1" static="1">
            <c path="String"/>
        </GREEN>
        <LARGE public="1" static="1">
            <c path="String"/>
        </LARGE>
        <LEFT_DROP_SHADOW public="1" static="1">
            <c path="String"/>
        </LEFT_DROP_SHADOW>
        <MAGENTA public="1" static="1">
            <c path="String"/>
        </MAGENTA>
        <MEDIUM public="1" static="1">
            <c path="String"/>
        </MEDIUM>
        <MONOSPACED_WITHOUT_SERIFS public="1" static="1">
            <c path="String"/>
        </MONOSPACED_WITHOUT_SERIFS>
        <MONOSPACE_WITH_SERIFS public="1" static="1">
            <c path="String"/>
        </MONOSPACE_WITH_SERIFS>
        <NONE public="1" static="1">
            <c path="String"/>
        </NONE>
        <PROPORTIONAL_WITHOUT_SERIFS public="1" static="1">
            <c path="String"/>
        </PROPORTIONAL_WITHOUT_SERIFS>
        <PROPORTIONAL_WITH_SERIFS public="1" static="1">
            <c path="String"/>
        </PROPORTIONAL_WITH_SERIFS>
        <RAISED public="1" static="1">
            <c path="String"/>
        </RAISED>
        <RED public="1" static="1">
            <c path="String"/>
        </RED>
        <RIGHT_DROP_SHADOW public="1" static="1">
            <c path="String"/>
        </RIGHT_DROP_SHADOW>
        <SMALL public="1" static="1">
            <c path="String"/>
        </SMALL>
        <SMALL_CAPITALS public="1" static="1">
            <c path="String"/>
        </SMALL_CAPITALS>
        <UNIFORM public="1" static="1">
            <c path="String"/>
        </UNIFORM>
        <WHITE public="1" static="1">
            <c path="String"/>
        </WHITE>
        <YELLOW public="1" static="1">
            <c path="String"/>
        </YELLOW>
        <size public="1">
            <c path="String"/>
        </size>
        <fontOpacity public="1">
            <c path="String"/>
        </fontOpacity>
        <fontEdge public="1">
            <c path="String"/>
        </fontEdge>
        <fontColor public="1">
            <c path="String"/>
        </fontColor>
        <font public="1">
            <c path="String"/>
        </font>
        <fillOpacity public="1">
            <c path="String"/>
        </fillOpacity>
        <fillColor public="1">
            <c path="String"/>
        </fillColor>
        <edgeColor public="1">
            <c path="String"/>
        </edgeColor>
        <backgroundOpacity public="1">
            <c path="String"/>
        </backgroundOpacity>
        <backgroundColor public="1">
            <c path="String"/>
        </backgroundColor>
        <new public="1" set="method">
            <f a="">
                <x path="Void"/>
            </f>
        </new>
    </class>
    <class path="flash.media.AVPlayState" params="" file="/usr/lib/haxe/std/flash/media/AVPlayState.hx" extern="1">
        <BUFFERING public="1" static="1">
            <x path="Int"/>
        </BUFFERING>
        <EOF public="1" static="1">
            <x path="Int"/>
        </EOF>
        <PAUSED public="1" static="1">
            <x path="Int"/>
        </PAUSED>
        <PLAYING public="1" static="1">
            <x path="Int"/>
        </PLAYING>
        <READY public="1" static="1">
            <x path="Int"/>
        </READY>
        <SUSPENDED public="1" static="1">
            <x path="Int"/>
        </SUSPENDED>
        <UNINITIALIZED public="1" static="1">
            <x path="Int"/>
        </UNINITIALIZED>
        <UNRECOVERABLE_ERROR public="1" static="1">
            <x path="Int"/>
        </UNRECOVERABLE_ERROR>
        <state public="1" set="null">
            <x path="Int"/>
        </state>
        <new public="1" set="method">
            <f a="state">
                <x path="UInt"/>
                <x path="Void"/>
            </f>
        </new>
    </class>
    <class path="flash.media.AVResult" params="" file="/usr/lib/haxe/std/flash/media/AVResult.hx" extern="1">
        <ASYNC_OPERATION_IN_PROGRESS public="1" static="1">
            <x path="Int"/>
        </ASYNC_OPERATION_IN_PROGRESS>
        <BAD_MANIFEST_SIGNATURE public="1" static="1">
            <x path="Int"/>
        </BAD_MANIFEST_SIGNATURE>
        <BAD_MEDIA_INTERLEAVING public="1" static="1">
            <x path="Int"/>
        </BAD_MEDIA_INTERLEAVING>
        <CALLED_FROM_WRONG_THREAD public="1" static="1">
            <x path="Int"/>
        </CALLED_FROM_WRONG_THREAD>
        <CANNOT_FAIL_OVER public="1" static="1">
            <x path="Int"/>
        </CANNOT_FAIL_OVER>
        <CANNOT_LOAD_PLAY_LIST public="1" static="1">
            <x path="Int"/>
        </CANNOT_LOAD_PLAY_LIST>
        <CODEC_NOT_SUPPORTED public="1" static="1">
            <x path="Int"/>
        </CODEC_NOT_SUPPORTED>
        <COMPONENT_CREATION_FAILURE public="1" static="1">
            <x path="Int"/>
        </COMPONENT_CREATION_FAILURE>
        <CONTAINER_NOT_SUPPORTED public="1" static="1">
            <x path="Int"/>
        </CONTAINER_NOT_SUPPORTED>
        <CONTENT_LENGTH_MISMATCH public="1" static="1">
            <x path="Int"/>
        </CONTENT_LENGTH_MISMATCH>
        <CURRENT_PERIOD_EXPIRED public="1" static="1">
            <x path="Int"/>
        </CURRENT_PERIOD_EXPIRED>
        <DECODER_FAILED public="1" static="1">
            <x path="Int"/>
        </DECODER_FAILED>
        <DEVICE_OPEN_ERROR public="1" static="1">
            <x path="Int"/>
        </DEVICE_OPEN_ERROR>
        <DRM_INIT_ERROR public="1" static="1">
            <x path="Int"/>
        </DRM_INIT_ERROR>
        <DRM_NOT_AVAILABLE public="1" static="1">
            <x path="Int"/>
        </DRM_NOT_AVAILABLE>
        <EOF public="1" static="1">
            <x path="Int"/>
        </EOF>
        <FILE_NOT_FOUND public="1" static="1">
            <x path="Int"/>
        </FILE_NOT_FOUND>
        <FILE_STRUCTURE_INVALID public="1" static="1">
            <x path="Int"/>
        </FILE_STRUCTURE_INVALID>
        <FRAGMENT_READ_ERROR public="1" static="1">
            <x path="Int"/>
        </FRAGMENT_READ_ERROR>
        <GENERIC_ERROR public="1" static="1">
            <x path="Int"/>
        </GENERIC_ERROR>
        <HTTP_TIME_OUT public="1" static="1">
            <x path="Int"/>
        </HTTP_TIME_OUT>
        <INVALID_OPERATION public="1" static="1">
            <x path="Int"/>
        </INVALID_OPERATION>
        <INVALID_PARAMETER public="1" static="1">
            <x path="Int"/>
        </INVALID_PARAMETER>
        <INVALID_REPLACE_DURATION public="1" static="1">
            <x path="Int"/>
        </INVALID_REPLACE_DURATION>
        <INVALID_SEEK_TIME public="1" static="1">
            <x path="Int"/>
        </INVALID_SEEK_TIME>
        <INVALID_WITH_AUDIO_ONLY_FILE public="1" static="1">
            <x path="Int"/>
        </INVALID_WITH_AUDIO_ONLY_FILE>
        <IRRECOVERABLE_ERROR public="1" static="1">
            <x path="Int"/>
        </IRRECOVERABLE_ERROR>
        <LIVE_HOLD public="1" static="1">
            <x path="Int"/>
        </LIVE_HOLD>
        <LIVE_WINDOW_MOVED_BACKWARD public="1" static="1">
            <x path="Int"/>
        </LIVE_WINDOW_MOVED_BACKWARD>
        <LOST_CONNECTION_RECOVERABLE public="1" static="1">
            <x path="Int"/>
        </LOST_CONNECTION_RECOVERABLE>
        <NETWORK_DOWN public="1" static="1">
            <x path="Int"/>
        </NETWORK_DOWN>
        <NETWORK_ERROR public="1" static="1">
            <x path="Int"/>
        </NETWORK_ERROR>
        <NETWORK_UNAVAILABLE public="1" static="1">
            <x path="Int"/>
        </NETWORK_UNAVAILABLE>
        <NOT_IMPLEMENTED public="1" static="1">
            <x path="Int"/>
        </NOT_IMPLEMENTED>
        <NO_FIXED_SIZE public="1" static="1">
            <x path="Int"/>
        </NO_FIXED_SIZE>
        <NO_USEABLE_BITRATE_PROFILE public="1" static="1">
            <x path="Int"/>
        </NO_USEABLE_BITRATE_PROFILE>
        <ONLY_ALLOWED_IN_PAUSED_STATE public="1" static="1">
            <x path="Int"/>
        </ONLY_ALLOWED_IN_PAUSED_STATE>
        <OPERATION_ABORTED public="1" static="1">
            <x path="Int"/>
        </OPERATION_ABORTED>
        <OUT_OF_MEMORY public="1" static="1">
            <x path="Int"/>
        </OUT_OF_MEMORY>
        <OVERFLOW public="1" static="1">
            <x path="Int"/>
        </OVERFLOW>
        <PARSE_ERROR public="1" static="1">
            <x path="Int"/>
        </PARSE_ERROR>
        <PERIOD_HOLD public="1" static="1">
            <x path="Int"/>
        </PERIOD_HOLD>
        <PERIOD_NOT_LOADED public="1" static="1">
            <x path="Int"/>
        </PERIOD_NOT_LOADED>
        <PLAYBACK_NOT_ENABLED public="1" static="1">
            <x path="Int"/>
        </PLAYBACK_NOT_ENABLED>
        <PREVIOUS_STEP_SEEK_IN_PROGRESS public="1" static="1">
            <x path="Int"/>
        </PREVIOUS_STEP_SEEK_IN_PROGRESS>
        <RANGE_ERROR public="1" static="1">
            <x path="Int"/>
        </RANGE_ERROR>
        <REPLACEMENT_FAILED public="1" static="1">
            <x path="Int"/>
        </REPLACEMENT_FAILED>
        <RESOURCE_NOT_SPECIFIED public="1" static="1">
            <x path="Int"/>
        </RESOURCE_NOT_SPECIFIED>
        <SEEK_FAILED public="1" static="1">
            <x path="Int"/>
        </SEEK_FAILED>
        <SIZE_UNKNOWN public="1" static="1">
            <x path="Int"/>
        </SIZE_UNKNOWN>
        <SUCCESS public="1" static="1">
            <x path="Int"/>
        </SUCCESS>
        <SWITCH_TO_ASYMMETRIC_PROFILE public="1" static="1">
            <x path="Int"/>
        </SWITCH_TO_ASYMMETRIC_PROFILE>
        <UNDERFLOW public="1" static="1">
            <x path="Int"/>
        </UNDERFLOW>
        <UNSUPPORTED_CONFIGURATION public="1" static="1">
            <x path="Int"/>
        </UNSUPPORTED_CONFIGURATION>
        <UNSUPPORTED_HLS_VERSION public="1" static="1">
            <x path="Int"/>
        </UNSUPPORTED_HLS_VERSION>
        <UNSUPPORTED_OPERATION public="1" static="1">
            <x path="Int"/>
        </UNSUPPORTED_OPERATION>
        <VIDEO_PROFILE_NOT_SUPPORTED public="1" static="1">
            <x path="Int"/>
        </VIDEO_PROFILE_NOT_SUPPORTED>
        <WAITING_FOR_INIT public="1" static="1">
            <x path="Int"/>
        </WAITING_FOR_INIT>
        <result public="1" set="null">
            <x path="Int"/>
        </result>
        <new public="1" set="method">
            <f a="inResult">
                <x path="Int"/>
                <x path="Void"/>
            </f>
        </new>
    </class>
    <class path="flash.media.AVSource" params="" file="/usr/lib/haxe/std/flash/media/AVSource.hx" extern="1">
        <extends path="flash.events.EventDispatcher"/>
        <dispose public="1" set="method">
            <f a="">
                <x path="Void"/>
            </f>
        </dispose>
        <new public="1" set="method">
            <f a="">
                <x path="Void"/>
            </f>
        </new>
    </class>
    <class path="flash.media.AVStream" params="" file="/usr/lib/haxe/std/flash/media/AVStream.hx" extern="1">
        <extends path="flash.events.EventDispatcher"/>
        <HARDWARE public="1" static="1">
            <c path="String"/>
        </HARDWARE>
        <SOFTWARE public="1" static="1">
            <c path="String"/>
        </SOFTWARE>
        <UNDEFINED public="1" static="1">
            <c path="String"/>
        </UNDEFINED>
        <step public="1" set="method">
            <f a="frames">
                <x path="Int"/>
                <c path="flash.media.AVResult"/>
            </f>
        </step>
        <seekToLocalTime public="1" set="method">
            <f a="periodIndex:time">
                <x path="Int"/>
                <x path="Float"/>
                <c path="flash.media.AVResult"/>
            </f>
        </seekToLocalTime>
        <seekToLivePoint public="1" set="method">
            <f a="">
                <c path="flash.media.AVResult"/>
            </f>
        </seekToLivePoint>
        <seek public="1" set="method">
            <f a="offset:?inBufferSeek">
                <x path="Float"/>
                <x path="Bool"/>
                <c path="flash.media.AVResult"/>
            </f>
        </seek>
        <resume public="1" set="method">
            <f a="">
                <x path="Bool"/>
            </f>
        </resume>
        <play public="1" set="method">
            <f a="">
                <c path="flash.media.AVResult"/>
            </f>
        </play>
        <pause public="1" set="method">
            <f a="">
                <c path="flash.media.AVResult"/>
            </f>
        </pause>
        <dispose public="1" set="method">
            <f a="">
                <x path="Void"/>
            </f>
        </dispose>
        <volume public="1">
            <x path="Float"/>
        </volume>
        <useHardwareDecoder public="1">
            <x path="Bool"/>
        </useHardwareDecoder>
        <time public="1" set="null">
            <x path="Float"/>
        </time>
        <renderType public="1" set="null">
            <c path="String"/>
        </renderType>
        <playState public="1" set="null">
            <c path="flash.media.AVPlayState"/>
        </playState>
        <initialBufferTime public="1" get="null">
            <x path="Float"/>
        </initialBufferTime>
        <frameTime public="1" set="null">
            <x path="Float"/>
        </frameTime>
        <droppedFrames public="1" set="null">
            <x path="Int"/>
        </droppedFrames>
        <decoderType public="1" set="null">
            <c path="String"/>
        </decoderType>
        <currentFPS public="1" set="null">
            <x path="Float"/>
        </currentFPS>
        <captionsEnabled public="1">
            <x path="Bool"/>
        </captionsEnabled>
        <captionStyle public="1" get="null">
            <c path="flash.media.AVCaptionStyle"/>
        </captionStyle>
        <bufferTime public="1" get="null">
            <x path="Float"/>
        </bufferTime>
        <bufferLength public="1" set="null">
            <x path="Float"/>
        </bufferLength>
        <backBufferTime public="1" get="null">
            <x path="Float"/>
        </backBufferTime>
        <backBufferLength public="1" set="null">
            <x path="Float"/>
        </backBufferLength>
        <new public="1" set="method">
            <f a="source">
                <c path="flash.media.AVSource"/>
                <x path="Void"/>
            </f>
        </new>
    </class>
    <class path="flash.media.Camera" params="" file="/usr/lib/haxe/std/flash/media/Camera.hx" extern="1">
        <extends path="flash.events.EventDispatcher"/>
        <isSupported public="1" set="null" static="1">
            <x path="Bool"/>
            <meta>
                <m n=":require">
                    <e>flash10_1</e>
                </m>
            </meta>
        </isSupported>
        <names public="1" set="null" static="1">
            <c path="Array">
                <d/>
            </c>
        </names>
        <_scanHardware public="1" set="method" static="1">
            <f a="">
                <x path="Void"/>
            </f>
            <meta>
                <m n=":require">
                    <e>flash10_1</e>
                </m>
            </meta>
        </_scanHardware>
        <getCamera public="1" set="method" static="1">
            <f a="?name">
                <c path="String"/>
                <c path="flash.media.Camera"/>
            </f>
        </getCamera>
        <setQuality public="1" set="method">
            <f a="bandwidth:quality">
                <x path="Int"/>
                <x path="Int"/>
                <x path="Void"/>
            </f>
        </setQuality>
        <setMotionLevel public="1" set="method">
            <f a="motionLevel:?timeout">
                <x path="Int"/>
                <x path="Int"/>
                <x path="Void"/>
            </f>
        </setMotionLevel>
        <setMode public="1" set="method">
            <f a="width:height:fps:?favorArea">
                <x path="Int"/>
                <x path="Int"/>
                <x path="Float"/>
                <x path="Bool"/>
                <x path="Void"/>
            </f>
        </setMode>
        <setLoopback public="1" set="method">
            <f a="?compress">
                <x path="Bool"/>
                <x path="Void"/>
            </f>
        </setLoopback>
        <setKeyFrameInterval public="1" set="method">
            <f a="keyFrameInterval">
                <x path="Int"/>
                <x path="Void"/>
            </f>
        </setKeyFrameInterval>
        <setCursor public="1" set="method">
            <f a="value">
                <x path="Bool"/>
                <x path="Void"/>
            </f>
        </setCursor>
        <width public="1" set="null">
            <x path="Int"/>
        </width>
        <quality public="1" set="null">
            <x path="Int"/>
        </quality>
        <name public="1" set="null">
            <c path="String"/>
        </name>
        <muted public="1" set="null">
            <x path="Bool"/>
        </muted>
        <motionTimeout public="1" set="null">
            <x path="Int"/>
        </motionTimeout>
        <motionLevel public="1" set="null">
            <x path="Int"/>
        </motionLevel>
        <loopback public="1" set="null">
            <x path="Bool"/>
        </loopback>
        <keyFrameInterval public="1" set="null">
            <x path="Int"/>
        </keyFrameInterval>
        <index public="1" set="null">
            <x path="Int"/>
        </index>
        <height public="1" set="null">
            <x path="Int"/>
        </height>
        <fps public="1" set="null">
            <x path="Float"/>
        </fps>
        <currentFPS public="1" set="null">
            <x path="Float"/>
        </currentFPS>
        <bandwidth public="1" set="null">
            <x path="Int"/>
        </bandwidth>
        <activityLevel public="1" set="null">
            <x path="Float"/>
        </activityLevel>
        <new public="1" set="method">
            <f a="">
                <x path="Void"/>
            </f>
        </new>
        <meta>
            <m n=":final"/>
        </meta>
    </class>
    <class path="flash.media.ID3Info" params="" file="/usr/lib/haxe/std/flash/media/ID3Info.hx" extern="1">
        <year public="1">
            <c path="String"/>
        </year>
        <track public="1">
            <c path="String"/>
        </track>
        <songName public="1">
            <c path="String"/>
        </songName>
        <genre public="1">
            <c path="String"/>
        </genre>
        <comment public="1">
            <c path="String"/>
        </comment>
        <artist public="1">
            <c path="String"/>
        </artist>
        <album public="1">
            <c path="String"/>
        </album>
        <new public="1" set="method">
            <f a="">
                <x path="Void"/>
            </f>
        </new>
        <meta>
            <m n=":final"/>
        </meta>
        <haxe_dynamic>
            <d/>
        </haxe_dynamic>
    </class>
    <class path="flash.media.Microphone" params="" file="/usr/lib/haxe/std/flash/media/Microphone.hx" extern="1">
        <extends path="flash.events.EventDispatcher"/>
        <isSupported public="1" set="null" static="1">
            <x path="Bool"/>
            <meta>
                <m n=":require">
                    <e>flash10_1</e>
                </m>
            </meta>
        </isSupported>
        <names public="1" set="null" static="1">
            <c path="Array">
                <d/>
            </c>
        </names>
        <getEnhancedMicrophone public="1" set="method" static="1">
            <f a="?index">
                <x path="Int"/>
                <c path="flash.media.Microphone"/>
            </f>
            <meta>
                <m n=":require">
                    <e>flash10_2</e>
                </m>
            </meta>
        </getEnhancedMicrophone>
        <getMicrophone public="1" set="method" static="1">
            <f a="?index">
                <x path="Int"/>
                <c path="flash.media.Microphone"/>
            </f>
        </getMicrophone>
        <setUseEchoSuppression public="1" set="method">
            <f a="useEchoSuppression">
                <x path="Bool"/>
                <x path="Void"/>
            </f>
        </setUseEchoSuppression>
        <setSilenceLevel public="1" set="method">
            <f a="silenceLevel:?timeout">
                <x path="Float"/>
                <x path="Int"/>
                <x path="Void"/>
            </f>
        </setSilenceLevel>
        <setLoopBack public="1" set="method">
            <f a="?state">
                <x path="Bool"/>
                <x path="Void"/>
            </f>
        </setLoopBack>
        <useEchoSuppression public="1" set="null">
            <x path="Bool"/>
        </useEchoSuppression>
        <soundTransform public="1">
            <c path="flash.media.SoundTransform"/>
        </soundTransform>
        <silenceTimeout public="1" set="null">
            <x path="Int"/>
        </silenceTimeout>
        <silenceLevel public="1" set="null">
            <x path="Float"/>
        </silenceLevel>
        <rate public="1">
            <x path="Int"/>
        </rate>
        <noiseSuppressionLevel public="1">
            <x path="Int"/>
            <meta>
                <m n=":require">
                    <e>flash10_1</e>
                </m>
            </meta>
        </noiseSuppressionLevel>
        <name public="1" set="null">
            <c path="String"/>
        </name>
        <muted public="1" set="null">
            <x path="Bool"/>
        </muted>
        <index public="1" set="null">
            <x path="Int"/>
        </index>
        <gain public="1">
            <x path="Float"/>
        </gain>
        <framesPerPacket public="1">
            <x path="Int"/>
            <meta>
                <m n=":require">
                    <e>flash10</e>
                </m>
            </meta>
        </framesPerPacket>
        <enhancedOptions public="1">
            <c path="flash.media.MicrophoneEnhancedOptions"/>
            <meta>
                <m n=":require">
                    <e>flash10_2</e>
                </m>
            </meta>
        </enhancedOptions>
        <encodeQuality public="1">
            <x path="Int"/>
            <meta>
                <m n=":require">
                    <e>flash10</e>
                </m>
            </meta>
        </encodeQuality>
        <enableVAD public="1">
            <x path="Bool"/>
            <meta>
                <m n=":require">
                    <e>flash10_1</e>
                </m>
            </meta>
        </enableVAD>
        <codec public="1">
            <e path="flash.media.SoundCodec"/>
            <meta>
                <m n=":require">
                    <e>flash10</e>
                </m>
            </meta>
        </codec>
        <activityLevel public="1" set="null">
            <x path="Float"/>
        </activityLevel>
        <new public="1" set="method">
            <f a="">
                <x path="Void"/>
            </f>
        </new>
        <meta>
            <m n=":final"/>
        </meta>
    </class>
    <enum path="flash.media.MicrophoneEnhancedMode" params=""
          file="/usr/lib/haxe/std/flash/media/MicrophoneEnhancedMode.hx">
        <SPEAKER_MUTE/>
        <OFF/>
        <HEADSET/>
        <HALF_DUPLEX/>
        <FULL_DUPLEX/>
        <meta>
            <m n=":fakeEnum">
                <e>String</e>
            </m>
            <m n=":require">
                <e>flash10_2</e>
            </m>
        </meta>
    </enum>
    <class path="flash.media.MicrophoneEnhancedOptions" params=""
           file="/usr/lib/haxe/std/flash/media/MicrophoneEnhancedOptions.hx" extern="1">
        <nonLinearProcessing public="1">
            <x path="Bool"/>
        </nonLinearProcessing>
        <mode public="1">
            <e path="flash.media.MicrophoneEnhancedMode"/>
        </mode>
        <isVoiceDetected public="1">
            <x path="Int"/>
        </isVoiceDetected>
        <echoPath public="1">
            <x path="Int"/>
        </echoPath>
        <autoGain public="1">
            <x path="Bool"/>
        </autoGain>
        <new public="1" set="method">
            <f a="">
                <x path="Void"/>
            </f>
        </new>
        <meta>
            <m n=":final"/>
            <m n=":require">
                <e>flash10_2</e>
            </m>
        </meta>
    </class>
    <class path="flash.media.Sound" params="" file="/usr/lib/haxe/std/flash/media/Sound.hx" extern="1">
        <extends path="flash.events.EventDispatcher"/>
        <play public="1" set="method">
            <f a="?startTime:?loops:?sndTransform">
                <x path="Float"/>
                <x path="Int"/>
                <c path="flash.media.SoundTransform"/>
                <c path="flash.media.SoundChannel"/>
            </f>
        </play>
        <loadPCMFromByteArray public="1" set="method">
            <f a="bytes:samples:?format:?stereo:?sampleRate">
                <c path="flash.utils.ByteArray"/>
                <x path="UInt"/>
                <c path="String"/>
                <x path="Bool"/>
                <x path="Float"/>
                <x path="Void"/>
            </f>
            <meta>
                <m n=":require">
                    <e>flash11</e>
                </m>
            </meta>
        </loadPCMFromByteArray>
        <loadCompressedDataFromByteArray public="1" set="method">
            <f a="bytes:bytesLength">
                <c path="flash.utils.ByteArray"/>
                <x path="UInt"/>
                <x path="Void"/>
            </f>
            <meta>
                <m n=":require">
                    <e>flash11</e>
                </m>
            </meta>
        </loadCompressedDataFromByteArray>
        <load public="1" set="method">
            <f a="stream:?context">
                <c path="flash.net.URLRequest"/>
                <c path="flash.media.SoundLoaderContext"/>
                <x path="Void"/>
            </f>
        </load>
        <extract public="1" set="method">
            <f a="target:length:?startPosition">
                <c path="flash.utils.ByteArray"/>
                <x path="Float"/>
                <x path="Float"/>
                <x path="Float"/>
            </f>
            <meta>
                <m n=":require">
                    <e>flash10</e>
                </m>
            </meta>
        </extract>
        <close public="1" set="method">
            <f a="">
                <x path="Void"/>
            </f>
        </close>
        <url public="1" set="null">
            <c path="String"/>
        </url>
        <length public="1" set="null">
            <x path="Float"/>
        </length>
        <isURLInaccessible public="1" set="null">
            <x path="Bool"/>
            <meta>
                <m n=":require">
                    <e>flash10_1</e>
                </m>
            </meta>
        </isURLInaccessible>
        <isBuffering public="1" set="null">
            <x path="Bool"/>
        </isBuffering>
        <id3 public="1" set="null">
            <c path="flash.media.ID3Info"/>
        </id3>
        <bytesTotal public="1" set="null">
            <x path="Int"/>
        </bytesTotal>
        <bytesLoaded public="1" set="null">
            <x path="UInt"/>
        </bytesLoaded>
        <new public="1" set="method">
            <f a="?stream:?context">
                <c path="flash.net.URLRequest"/>
                <c path="flash.media.SoundLoaderContext"/>
                <x path="Void"/>
            </f>
        </new>
    </class>
    <class path="flash.media.SoundChannel" params="" file="/usr/lib/haxe/std/flash/media/SoundChannel.hx" extern="1">
        <extends path="flash.events.EventDispatcher"/>
        <stop public="1" set="method">
            <f a="">
                <x path="Void"/>
            </f>
        </stop>
        <soundTransform public="1">
            <c path="flash.media.SoundTransform"/>
        </soundTransform>
        <rightPeak public="1" set="null">
            <x path="Float"/>
        </rightPeak>
        <position public="1" set="null">
            <x path="Float"/>
        </position>
        <leftPeak public="1" set="null">
            <x path="Float"/>
        </leftPeak>
        <new public="1" set="method">
            <f a="">
                <x path="Void"/>
            </f>
        </new>
        <meta>
            <m n=":final"/>
        </meta>
    </class>
    <enum path="flash.media.SoundCodec" params="" file="/usr/lib/haxe/std/flash/media/SoundCodec.hx">
        <SPEEX/>
        <PCMU/>
        <PCMA/>
        <NELLYMOSER/>
        <meta>
            <m n=":fakeEnum">
                <e>String</e>
            </m>
        </meta>
    </enum>
    <class path="flash.media.SoundLoaderContext" params="" file="/usr/lib/haxe/std/flash/media/SoundLoaderContext.hx"
           extern="1">
        <checkPolicyFile public="1">
            <x path="Bool"/>
        </checkPolicyFile>
        <bufferTime public="1">
            <x path="Float"/>
        </bufferTime>
        <new public="1" set="method">
            <f a="?bufferTime:?checkPolicyFile">
                <x path="Float"/>
                <x path="Bool"/>
                <x path="Void"/>
            </f>
        </new>
    </class>
    <class path="flash.media.SoundTransform" params="" file="/usr/lib/haxe/std/flash/media/SoundTransform.hx"
           extern="1">
        <volume public="1">
            <x path="Float"/>
        </volume>
        <rightToRight public="1">
            <x path="Float"/>
        </rightToRight>
        <rightToLeft public="1">
            <x path="Float"/>
        </rightToLeft>
        <pan public="1">
            <x path="Float"/>
        </pan>
        <leftToRight public="1">
            <x path="Float"/>
        </leftToRight>
        <leftToLeft public="1">
            <x path="Float"/>
        </leftToLeft>
        <new public="1" set="method">
            <f a="?vol:?panning">
                <x path="Float"/>
                <x path="Float"/>
                <x path="Void"/>
            </f>
        </new>
        <meta>
            <m n=":final"/>
        </meta>
    </class>
    <class path="flash.media.StageVideo" params="" file="/usr/lib/haxe/std/flash/media/StageVideo.hx" extern="1">
        <extends path="flash.events.EventDispatcher"/>
        <attachNetStream public="1" set="method">
            <f a="netStream">
                <c path="flash.net.NetStream"/>
                <x path="Void"/>
            </f>
        </attachNetStream>
        <zoom public="1">
            <c path="flash.geom.Point"/>
        </zoom>
        <viewPort public="1">
            <c path="flash.geom.Rectangle"/>
        </viewPort>
        <videoWidth public="1" set="null">
            <x path="Int"/>
        </videoWidth>
        <videoHeight public="1" set="null">
            <x path="Int"/>
        </videoHeight>
        <pan public="1">
            <c path="flash.geom.Point"/>
        </pan>
        <depth public="1">
            <x path="Int"/>
        </depth>
        <colorSpaces public="1" set="null">
            <c path="flash.Vector">
                <c path="String"/>
            </c>
        </colorSpaces>
        <new public="1" set="method">
            <f a="">
                <x path="Void"/>
            </f>
        </new>
        <meta>
            <m n=":require">
                <e>flash10_2</e>
            </m>
        </meta>
    </class>
    <class path="flash.media.VideoStreamSettings" params="" file="/usr/lib/haxe/std/flash/media/VideoStreamSettings.hx"
           extern="1">
        <setQuality public="1" set="method">
            <f a="bandwidth:quality">
                <x path="Int"/>
                <x path="Int"/>
                <x path="Void"/>
            </f>
        </setQuality>
        <setMode public="1" set="method">
            <f a="width:height:fps">
                <x path="Int"/>
                <x path="Int"/>
                <x path="Float"/>
                <x path="Void"/>
            </f>
        </setMode>
        <setKeyFrameInterval public="1" set="method">
            <f a="keyFrameInterval">
                <x path="Int"/>
                <x path="Void"/>
            </f>
        </setKeyFrameInterval>
        <width public="1" set="null">
            <x path="Int"/>
        </width>
        <quality public="1" set="null">
            <x path="Int"/>
        </quality>
        <keyFrameInterval public="1" set="null">
            <x path="Int"/>
        </keyFrameInterval>
        <height public="1" set="null">
            <x path="Int"/>
        </height>
        <fps public="1" set="null">
            <x path="Float"/>
        </fps>
        <codec public="1" set="null">
            <c path="String"/>
        </codec>
        <bandwidth public="1" set="null">
            <x path="Int"/>
        </bandwidth>
        <new public="1" set="method">
            <f a="">
                <x path="Void"/>
            </f>
        </new>
    </class>
    <class path="flash.net.NetConnection" params="" file="/usr/lib/haxe/std/flash/net/NetConnection.hx" extern="1">
        <extends path="flash.events.EventDispatcher"/>
        <defaultObjectEncoding public="1" static="1">
            <x path="UInt"/>
        </defaultObjectEncoding>
        <connect public="1" set="method">
            <f a="command:?p1:?p2:?p3:?p4:?p5">
                <c path="String"/>
                <d/>
                <d/>
                <d/>
                <d/>
                <d/>
                <x path="Void"/>
            </f>
        </connect>
        <close public="1" set="method">
            <f a="">
                <x path="Void"/>
            </f>
        </close>
        <call public="1" set="method">
            <f a="command:responder:?p1:?p2:?p3:?p4:?p5">
                <c path="String"/>
                <c path="flash.net.Responder"/>
                <d/>
                <d/>
                <d/>
                <d/>
                <d/>
                <x path="Void"/>
            </f>
        </call>
        <addHeader public="1" set="method">
            <f a="operation:?mustUnderstand:?param">
                <c path="String"/>
                <x path="Bool"/>
                <t path="flash.utils.Object"/>
                <x path="Void"/>
            </f>
        </addHeader>
        <usingTLS public="1" set="null">
            <x path="Bool"/>
        </usingTLS>
        <uri public="1" set="null">
            <c path="String"/>
        </uri>
        <unconnectedPeerStreams public="1" set="null">
            <c path="Array">
                <d/>
            </c>
            <meta>
                <m n=":require">
                    <e>flash10</e>
                </m>
            </meta>
        </unconnectedPeerStreams>
        <proxyType public="1">
            <c path="String"/>
        </proxyType>
        <protocol public="1" set="null">
            <c path="String"/>
            <meta>
                <m n=":require">
                    <e>flash10</e>
                </m>
            </meta>
        </protocol>
        <objectEncoding public="1">
            <x path="UInt"/>
        </objectEncoding>
        <nearNonce public="1" set="null">
            <c path="String"/>
            <meta>
                <m n=":require">
                    <e>flash10</e>
                </m>
            </meta>
        </nearNonce>
        <nearID public="1" set="null">
            <c path="String"/>
            <meta>
                <m n=":require">
                    <e>flash10</e>
                </m>
            </meta>
        </nearID>
        <maxPeerConnections public="1">
            <x path="UInt"/>
            <meta>
                <m n=":require">
                    <e>flash10</e>
                </m>
            </meta>
        </maxPeerConnections>
        <farNonce public="1" set="null">
            <c path="String"/>
            <meta>
                <m n=":require">
                    <e>flash10</e>
                </m>
            </meta>
        </farNonce>
        <farID public="1" set="null">
            <c path="String"/>
            <meta>
                <m n=":require">
                    <e>flash10</e>
                </m>
            </meta>
        </farID>
        <connectedProxyType public="1" set="null">
            <c path="String"/>
        </connectedProxyType>
        <connected public="1" set="null">
            <x path="Bool"/>
        </connected>
        <client public="1">
            <d/>
        </client>
        <new public="1" set="method">
            <f a="">
                <x path="Void"/>
            </f>
        </new>
    </class>
    <class path="flash.net.NetStream" params="" file="/usr/lib/haxe/std/flash/net/NetStream.hx" extern="1">
        <extends path="flash.events.EventDispatcher"/>
        <CONNECT_TO_FMS public="1" static="1">
            <c path="String"/>
            <meta>
                <m n=":require">
                    <e>flash10</e>
                </m>
            </meta>
        </CONNECT_TO_FMS>
        <DIRECT_CONNECTIONS public="1" static="1">
            <c path="String"/>
            <meta>
                <m n=":require">
                    <e>flash10</e>
                </m>
            </meta>
        </DIRECT_CONNECTIONS>
        <togglePause public="1" set="method">
            <f a="">
                <x path="Void"/>
            </f>
        </togglePause>
        <step public="1" set="method">
            <f a="frames">
                <x path="Int"/>
                <x path="Void"/>
            </f>
            <meta>
                <m n=":require">
                    <e>flash10_1</e>
                </m>
            </meta>
        </step>
        <send public="1" set="method">
            <f a="handlerName:?p1:?p2:?p3:?p4:?p5">
                <c path="String"/>
                <d/>
                <d/>
                <d/>
                <d/>
                <d/>
                <x path="Void"/>
            </f>
        </send>
        <seek public="1" set="method">
            <f a="offset">
                <x path="Float"/>
                <x path="Void"/>
            </f>
        </seek>
        <resume public="1" set="method">
            <f a="">
                <x path="Void"/>
            </f>
        </resume>
        <receiveVideoFPS public="1" set="method">
            <f a="FPS">
                <x path="Float"/>
                <x path="Void"/>
            </f>
        </receiveVideoFPS>
        <receiveVideo public="1" set="method">
            <f a="flag">
                <x path="Bool"/>
                <x path="Void"/>
            </f>
        </receiveVideo>
        <receiveAudio public="1" set="method">
            <f a="flag">
                <x path="Bool"/>
                <x path="Void"/>
            </f>
        </receiveAudio>
        <publish public="1" set="method">
            <f a="?name:?type">
                <c path="String"/>
                <c path="String"/>
                <x path="Void"/>
            </f>
        </publish>
        <play2 public="1" set="method">
            <f a="param">
                <c path="flash.net.NetStreamPlayOptions"/>
                <x path="Void"/>
            </f>
            <meta>
                <m n=":require">
                    <e>flash10</e>
                </m>
            </meta>
        </play2>
        <play public="1" set="method">
            <f a="?p1:?p2:?p3:?p4:?p5">
                <d/>
                <d/>
                <d/>
                <d/>
                <d/>
                <x path="Void"/>
            </f>
        </play>
        <pause public="1" set="method">
            <f a="">
                <x path="Void"/>
            </f>
        </pause>
        <onPeerConnect public="1" set="method">
            <f a="subscriber">
                <c path="flash.net.NetStream"/>
                <x path="Bool"/>
            </f>
            <meta>
                <m n=":require">
                    <e>flash10</e>
                </m>
            </meta>
        </onPeerConnect>
        <close public="1" set="method">
            <f a="">
                <x path="Void"/>
            </f>
        </close>
        <attachCamera public="1" set="method">
            <f a="theCamera:?snapshotMilliseconds">
                <c path="flash.media.Camera"/>
                <x path="Int"/>
                <x path="Void"/>
            </f>
        </attachCamera>
        <attachAudio public="1" set="method">
            <f a="microphone">
                <c path="flash.media.Microphone"/>
                <x path="Void"/>
            </f>
        </attachAudio>
        <attach public="1" set="method">
            <f a="connection">
                <c path="flash.net.NetConnection"/>
                <x path="Void"/>
            </f>
            <meta>
                <m n=":require">
                    <e>flash10_1</e>
                </m>
            </meta>
        </attach>
        <appendBytesAction public="1" set="method">
            <f a="netStreamAppendBytesAction">
                <c path="String"/>
                <x path="Void"/>
            </f>
            <meta>
                <m n=":require">
                    <e>flash10_1</e>
                </m>
            </meta>
        </appendBytesAction>
        <appendBytes public="1" set="method">
            <f a="bytes">
                <c path="flash.utils.ByteArray"/>
                <x path="Void"/>
            </f>
            <meta>
                <m n=":require">
                    <e>flash10_1</e>
                </m>
            </meta>
        </appendBytes>
        <videoStreamSettings public="1">
            <c path="flash.media.VideoStreamSettings"/>
            <meta>
                <m n=":require">
                    <e>flash11</e>
                </m>
            </meta>
        </videoStreamSettings>
        <videoSampleAccess public="1">
            <x path="Bool"/>
            <meta>
                <m n=":require">
                    <e>flash10_1</e>
                </m>
            </meta>
        </videoSampleAccess>
        <videoReliable public="1">
            <x path="Bool"/>
            <meta>
                <m n=":require">
                    <e>flash10_1</e>
                </m>
            </meta>
        </videoReliable>
        <videoCodec public="1" set="null">
            <x path="UInt"/>
        </videoCodec>
        <useHardwareDecoder public="1">
            <x path="Bool"/>
            <meta>
                <m n=":require">
                    <e>flash11</e>
                </m>
            </meta>
        </useHardwareDecoder>
        <time public="1" set="null">
            <x path="Float"/>
        </time>
        <soundTransform public="1">
            <c path="flash.media.SoundTransform"/>
        </soundTransform>
        <peerStreams public="1" set="null">
            <c path="Array">
                <d/>
            </c>
            <meta>
                <m n=":require">
                    <e>flash10</e>
                </m>
            </meta>
        </peerStreams>
        <objectEncoding public="1" set="null">
            <x path="UInt"/>
        </objectEncoding>
        <nearNonce public="1" set="null">
            <c path="String"/>
            <meta>
                <m n=":require">
                    <e>flash10</e>
                </m>
            </meta>
        </nearNonce>
        <multicastWindowDuration public="1">
            <x path="Float"/>
            <meta>
                <m n=":require">
                    <e>flash10_1</e>
                </m>
            </meta>
        </multicastWindowDuration>
        <multicastRelayMarginDuration public="1">
            <x path="Float"/>
            <meta>
                <m n=":require">
                    <e>flash10_1</e>
                </m>
            </meta>
        </multicastRelayMarginDuration>
        <multicastPushNeighborLimit public="1">
            <x path="Float"/>
            <meta>
                <m n=":require">
                    <e>flash10_1</e>
                </m>
            </meta>
        </multicastPushNeighborLimit>
        <multicastInfo public="1" set="null">
            <c path="flash.net.NetStreamMulticastInfo"/>
            <meta>
                <m n=":require">
                    <e>flash10_1</e>
                </m>
            </meta>
        </multicastInfo>
        <multicastFetchPeriod public="1">
            <x path="Float"/>
            <meta>
                <m n=":require">
                    <e>flash10_1</e>
                </m>
            </meta>
        </multicastFetchPeriod>
        <multicastAvailabilityUpdatePeriod public="1">
            <x path="Float"/>
            <meta>
                <m n=":require">
                    <e>flash10_1</e>
                </m>
            </meta>
        </multicastAvailabilityUpdatePeriod>
        <multicastAvailabilitySendToAll public="1">
            <x path="Bool"/>
            <meta>
                <m n=":require">
                    <e>flash10_1</e>
                </m>
            </meta>
        </multicastAvailabilitySendToAll>
        <maxPauseBufferTime public="1">
            <x path="Float"/>
            <meta>
                <m n=":require">
                    <e>flash10</e>
                </m>
            </meta>
        </maxPauseBufferTime>
        <liveDelay public="1" set="null">
            <x path="Float"/>
        </liveDelay>
        <info public="1" set="null">
            <c path="flash.net.NetStreamInfo"/>
            <meta>
                <m n=":require">
                    <e>flash10</e>
                </m>
            </meta>
        </info>
        <inBufferSeek public="1">
            <x path="Bool"/>
            <meta>
                <m n=":require">
                    <e>flash10_1</e>
                </m>
            </meta>
        </inBufferSeek>
        <farNonce public="1" set="null">
            <c path="String"/>
            <meta>
                <m n=":require">
                    <e>flash10</e>
                </m>
            </meta>
        </farNonce>
        <farID public="1" set="null">
            <c path="String"/>
            <meta>
                <m n=":require">
                    <e>flash10</e>
                </m>
            </meta>
        </farID>
        <decodedFrames public="1" set="null">
            <x path="UInt"/>
        </decodedFrames>
        <dataReliable public="1">
            <x path="Bool"/>
            <meta>
                <m n=":require">
                    <e>flash10_1</e>
                </m>
            </meta>
        </dataReliable>
        <currentFPS public="1" set="null">
            <x path="Float"/>
        </currentFPS>
        <client public="1">
            <d/>
        </client>
        <checkPolicyFile public="1">
            <x path="Bool"/>
        </checkPolicyFile>
        <bytesTotal public="1" set="null">
            <x path="UInt"/>
        </bytesTotal>
        <bytesLoaded public="1" set="null">
            <x path="UInt"/>
        </bytesLoaded>
        <bufferTimeMax public="1">
            <x path="Float"/>
            <meta>
                <m n=":require">
                    <e>flash10_1</e>
                </m>
            </meta>
        </bufferTimeMax>
        <bufferTime public="1">
            <x path="Float"/>
        </bufferTime>
        <bufferLength public="1" set="null">
            <x path="Float"/>
        </bufferLength>
        <backBufferTime public="1">
            <x path="Float"/>
            <meta>
                <m n=":require">
                    <e>flash10_1</e>
                </m>
            </meta>
        </backBufferTime>
        <backBufferLength public="1" set="null">
            <x path="Float"/>
            <meta>
                <m n=":require">
                    <e>flash10_1</e>
                </m>
            </meta>
        </backBufferLength>
        <audioSampleAccess public="1">
            <x path="Bool"/>
            <meta>
                <m n=":require">
                    <e>flash10_1</e>
                </m>
            </meta>
        </audioSampleAccess>
        <audioReliable public="1">
            <x path="Bool"/>
            <meta>
                <m n=":require">
                    <e>flash10_1</e>
                </m>
            </meta>
        </audioReliable>
        <audioCodec public="1" set="null">
            <x path="UInt"/>
        </audioCodec>
        <new public="1" set="method">
            <f a="connection:?peerID">
                <c path="flash.net.NetConnection"/>
                <c path="String"/>
                <x path="Void"/>
            </f>
        </new>
    </class>
    <class path="flash.net.NetStreamInfo" params="" file="/usr/lib/haxe/std/flash/net/NetStreamInfo.hx" extern="1">
        <toString public="1" set="method">
            <f a="">
                <c path="String"/>
            </f>
        </toString>
        <xmpData public="1" set="null">
            <d/>
        </xmpData>
        <videoLossRate public="1" set="null">
            <x path="Float"/>
            <meta>
                <m n=":require">
                    <e>flash10_1</e>
                </m>
            </meta>
        </videoLossRate>
        <videoBytesPerSecond public="1" set="null">
            <x path="Float"/>
        </videoBytesPerSecond>
        <videoByteCount public="1" set="null">
            <x path="Float"/>
        </videoByteCount>
        <videoBufferLength public="1" set="null">
            <x path="Float"/>
        </videoBufferLength>
        <videoBufferByteLength public="1" set="null">
            <x path="Float"/>
        </videoBufferByteLength>
        <uri public="1" set="null">
            <c path="String"/>
        </uri>
        <resourceName public="1" set="null">
            <c path="String"/>
        </resourceName>
        <playbackBytesPerSecond public="1" set="null">
            <x path="Float"/>
        </playbackBytesPerSecond>
        <metaData public="1" set="null">
            <d/>
        </metaData>
        <maxBytesPerSecond public="1" set="null">
            <x path="Float"/>
        </maxBytesPerSecond>
        <isLive public="1" set="null">
            <x path="Bool"/>
        </isLive>
        <droppedFrames public="1" set="null">
            <x path="Float"/>
        </droppedFrames>
        <dataBytesPerSecond public="1" set="null">
            <x path="Float"/>
        </dataBytesPerSecond>
        <dataByteCount public="1" set="null">
            <x path="Float"/>
        </dataByteCount>
        <dataBufferLength public="1" set="null">
            <x path="Float"/>
        </dataBufferLength>
        <dataBufferByteLength public="1" set="null">
            <x path="Float"/>
        </dataBufferByteLength>
        <currentBytesPerSecond public="1" set="null">
            <x path="Float"/>
        </currentBytesPerSecond>
        <byteCount public="1" set="null">
            <x path="Float"/>
        </byteCount>
        <audioLossRate public="1" set="null">
            <x path="Float"/>
        </audioLossRate>
        <audioBytesPerSecond public="1" set="null">
            <x path="Float"/>
        </audioBytesPerSecond>
        <audioByteCount public="1" set="null">
            <x path="Float"/>
        </audioByteCount>
        <audioBufferLength public="1" set="null">
            <x path="Float"/>
        </audioBufferLength>
        <audioBufferByteLength public="1" set="null">
            <x path="Float"/>
        </audioBufferByteLength>
        <SRTT public="1" set="null">
            <x path="Float"/>
        </SRTT>
        <new public="1" set="method">
            <f a="curBPS:byteCount:maxBPS:audioBPS:audioByteCount:videoBPS:videoByteCount:dataBPS:dataByteCount:playbackBPS:droppedFrames:audioBufferByteLength:videoBufferByteLength:dataBufferByteLength:audioBufferLength:videoBufferLength:dataBufferLength:srtt:audioLossRate:videoLossRate:?metaData:?xmpData:?uri:?resourceName:?isLive">
                <x path="Float"/>
                <x path="Float"/>
                <x path="Float"/>
                <x path="Float"/>
                <x path="Float"/>
                <x path="Float"/>
                <x path="Float"/>
                <x path="Float"/>
                <x path="Float"/>
                <x path="Float"/>
                <x path="Float"/>
                <x path="Float"/>
                <x path="Float"/>
                <x path="Float"/>
                <x path="Float"/>
                <x path="Float"/>
                <x path="Float"/>
                <x path="Float"/>
                <x path="Float"/>
                <x path="Float"/>
                <d/>
                <d/>
                <c path="String"/>
                <c path="String"/>
                <x path="Bool"/>
                <x path="Void"/>
            </f>
        </new>
        <meta>
            <m n=":final"/>
        </meta>
    </class>
    <class path="flash.net.NetStreamMulticastInfo" params=""
           file="/usr/lib/haxe/std/flash/net/NetStreamMulticastInfo.hx" extern="1">
        <toString public="1" set="method">
            <f a="">
                <c path="String"/>
            </f>
        </toString>
        <sendDataBytesPerSecond public="1" set="null">
            <x path="Float"/>
        </sendDataBytesPerSecond>
        <sendControlBytesPerSecondToServer public="1" set="null">
            <x path="Float"/>
        </sendControlBytesPerSecondToServer>
        <sendControlBytesPerSecond public="1" set="null">
            <x path="Float"/>
        </sendControlBytesPerSecond>
        <receiveDataBytesPerSecondFromServer public="1" set="null">
            <x path="Float"/>
        </receiveDataBytesPerSecondFromServer>
        <receiveDataBytesPerSecondFromIPMulticast public="1" set="null">
            <x path="Float"/>
        </receiveDataBytesPerSecondFromIPMulticast>
        <receiveDataBytesPerSecond public="1" set="null">
            <x path="Float"/>
        </receiveDataBytesPerSecond>
        <receiveControlBytesPerSecond public="1" set="null">
            <x path="Float"/>
        </receiveControlBytesPerSecond>
        <fragmentsRequestedFromPeers public="1" set="null">
            <x path="Float"/>
        </fragmentsRequestedFromPeers>
        <fragmentsRequestedByPeers public="1" set="null">
            <x path="Float"/>
        </fragmentsRequestedByPeers>
        <fragmentsReceivedFromServer public="1" set="null">
            <x path="Float"/>
        </fragmentsReceivedFromServer>
        <fragmentsReceivedFromIPMulticast public="1" set="null">
            <x path="Float"/>
        </fragmentsReceivedFromIPMulticast>
        <fragmentsPushedToPeers public="1" set="null">
            <x path="Float"/>
        </fragmentsPushedToPeers>
        <fragmentsPushedFromPeers public="1" set="null">
            <x path="Float"/>
        </fragmentsPushedFromPeers>
        <bytesRequestedFromPeers public="1" set="null">
            <x path="Float"/>
        </bytesRequestedFromPeers>
        <bytesRequestedByPeers public="1" set="null">
            <x path="Float"/>
        </bytesRequestedByPeers>
        <bytesReceivedFromServer public="1" set="null">
            <x path="Float"/>
        </bytesReceivedFromServer>
        <bytesReceivedFromIPMulticast public="1" set="null">
            <x path="Float"/>
        </bytesReceivedFromIPMulticast>
        <bytesPushedToPeers public="1" set="null">
            <x path="Float"/>
        </bytesPushedToPeers>
        <bytesPushedFromPeers public="1" set="null">
            <x path="Float"/>
        </bytesPushedFromPeers>
        <new public="1" set="method">
            <f a="sendDataBytesPerSecond:sendControlBytesPerSecond:receiveDataBytesPerSecond:receiveControlBytesPerSecond:bytesPushedToPeers:fragmentsPushedToPeers:bytesRequestedByPeers:fragmentsRequestedByPeers:bytesPushedFromPeers:fragmentsPushedFromPeers:bytesRequestedFromPeers:fragmentsRequestedFromPeers:sendControlBytesPerSecondToServer:receiveDataBytesPerSecondFromServer:bytesReceivedFromServer:fragmentsReceivedFromServer:receiveDataBytesPerSecondFromIPMulticast:bytesReceivedFromIPMulticast:fragmentsReceivedFromIPMulticast">
                <x path="Float"/>
                <x path="Float"/>
                <x path="Float"/>
                <x path="Float"/>
                <x path="Float"/>
                <x path="Float"/>
                <x path="Float"/>
                <x path="Float"/>
                <x path="Float"/>
                <x path="Float"/>
                <x path="Float"/>
                <x path="Float"/>
                <x path="Float"/>
                <x path="Float"/>
                <x path="Float"/>
                <x path="Float"/>
                <x path="Float"/>
                <x path="Float"/>
                <x path="Float"/>
                <x path="Void"/>
            </f>
        </new>
        <meta>
            <m n=":final"/>
            <m n=":require">
                <e>flash10_1</e>
            </m>
        </meta>
    </class>
    <class path="flash.net.NetStreamPlayOptions" params="" file="/usr/lib/haxe/std/flash/net/NetStreamPlayOptions.hx"
           extern="1">
        <extends path="flash.events.EventDispatcher"/>
        <transition public="1">
            <c path="String"/>
        </transition>
        <streamName public="1">
            <c path="String"/>
        </streamName>
        <start public="1">
            <x path="Float"/>
        </start>
        <oldStreamName public="1">
            <c path="String"/>
        </oldStreamName>
        <offset public="1">
            <x path="Float"/>
            <meta>
                <m n=":require">
                    <e>flash10_1</e>
                </m>
            </meta>
        </offset>
        <len public="1">
            <x path="Float"/>
        </len>
        <new public="1" set="method">
            <f a="">
                <x path="Void"/>
            </f>
        </new>
        <haxe_dynamic>
            <d/>
        </haxe_dynamic>
    </class>
    <class path="flash.net.Responder" params="" file="/usr/lib/haxe/std/flash/net/Responder.hx" extern="1">
        <new public="1" set="method">
            <f a="result:?status">
                <d/>
                <d/>
                <x path="Void"/>
            </f>
        </new>
    </class>
    <class path="flash.net.SharedObject" params="" file="/usr/lib/haxe/std/flash/net/SharedObject.hx" extern="1">
        <extends path="flash.events.EventDispatcher"/>
        <defaultObjectEncoding public="1" static="1">
            <x path="UInt"/>
        </defaultObjectEncoding>
        <deleteAll public="1" set="method" static="1">
            <f a="url">
                <c path="String"/>
                <x path="Int"/>
            </f>
        </deleteAll>
        <getDiskUsage public="1" set="method" static="1">
            <f a="url">
                <c path="String"/>
                <x path="Int"/>
            </f>
        </getDiskUsage>
        <getLocal public="1" set="method" static="1">
            <f a="name:?localPath:?secure">
                <c path="String"/>
                <c path="String"/>
                <x path="Bool"/>
                <c path="flash.net.SharedObject"/>
            </f>
        </getLocal>
        <getRemote public="1" set="method" static="1">
            <f a="name:?remotePath:?persistence:?secure">
                <c path="String"/>
                <c path="String"/>
                <d/>
                <x path="Bool"/>
                <c path="flash.net.SharedObject"/>
            </f>
        </getRemote>
        <setProperty public="1" set="method">
            <f a="propertyName:?value">
                <c path="String"/>
                <t path="flash.utils.Object"/>
                <x path="Void"/>
            </f>
        </setProperty>
        <setDirty public="1" set="method">
            <f a="propertyName">
                <c path="String"/>
                <x path="Void"/>
            </f>
        </setDirty>
        <send public="1" set="method">
            <f a="?p1:?p2:?p3:?p4:?p5">
                <d/>
                <d/>
                <d/>
                <d/>
                <d/>
                <x path="Void"/>
            </f>
        </send>
        <flush public="1" set="method">
            <f a="?minDiskSpace">
                <x path="Int"/>
                <c path="String"/>
            </f>
        </flush>
        <connect public="1" set="method">
            <f a="myConnection:?params">
                <c path="flash.net.NetConnection"/>
                <c path="String"/>
                <x path="Void"/>
            </f>
        </connect>
        <close public="1" set="method">
            <f a="">
                <x path="Void"/>
            </f>
        </close>
        <clear public="1" set="method">
            <f a="">
                <x path="Void"/>
            </f>
        </clear>
        <size public="1" set="null">
            <x path="UInt"/>
        </size>
        <objectEncoding public="1">
            <x path="UInt"/>
        </objectEncoding>
        <fps public="1" get="null">
            <x path="Float"/>
        </fps>
        <data public="1" set="null">
            <d/>
        </data>
        <client public="1">
            <d/>
        </client>
        <new public="1" set="method">
            <f a="">
                <x path="Void"/>
            </f>
        </new>
    </class>
    <class path="flash.net.SharedObjectFlushStatus" params=""
           file="/usr/lib/haxe/std/flash/net/SharedObjectFlushStatus.hx" extern="1">
        <FLUSHED public="1" static="1">
            <c path="String"/>
        </FLUSHED>
        <PENDING public="1" static="1">
            <c path="String"/>
        </PENDING>
        <new public="1" set="method">
            <f a="">
                <x path="Void"/>
            </f>
        </new>
    </class>
    <class path="flash.net.URLLoader" params="" file="/usr/lib/haxe/std/flash/net/URLLoader.hx" extern="1">
        <extends path="flash.events.EventDispatcher"/>
        <load public="1" set="method">
            <f a="request">
                <c path="flash.net.URLRequest"/>
                <x path="Void"/>
            </f>
        </load>
        <close public="1" set="method">
            <f a="">
                <x path="Void"/>
            </f>
        </close>
        <dataFormat public="1">
            <e path="flash.net.URLLoaderDataFormat"/>
        </dataFormat>
        <data public="1">
            <d/>
        </data>
        <bytesTotal public="1">
            <x path="UInt"/>
        </bytesTotal>
        <bytesLoaded public="1">
            <x path="UInt"/>
        </bytesLoaded>
        <new public="1" set="method">
            <f a="?request">
                <c path="flash.net.URLRequest"/>
                <x path="Void"/>
            </f>
        </new>
    </class>
    <enum path="flash.net.URLLoaderDataFormat" params="" file="/usr/lib/haxe/std/flash/net/URLLoaderDataFormat.hx">
        <VARIABLES/>
        <TEXT/>
        <BINARY/>
        <meta>
            <m n=":fakeEnum">
                <e>String</e>
            </m>
        </meta>
    </enum>
    <class path="flash.net.URLRequest" params="" file="/usr/lib/haxe/std/flash/net/URLRequest.hx" extern="1">
        <url public="1">
            <c path="String"/>
        </url>
        <requestHeaders public="1">
            <c path="Array">
                <c path="flash.net.URLRequestHeader"/>
            </c>
        </requestHeaders>
        <method public="1">
            <c path="String"/>
        </method>
        <digest public="1">
            <c path="String"/>
        </digest>
        <data public="1">
            <d/>
        </data>
        <contentType public="1">
            <c path="String"/>
        </contentType>
        <new public="1" set="method">
            <f a="?url">
                <c path="String"/>
                <x path="Void"/>
            </f>
        </new>
        <meta>
            <m n=":final"/>
        </meta>
    </class>
    <class path="flash.net.URLRequestHeader" params="" file="/usr/lib/haxe/std/flash/net/URLRequestHeader.hx"
           extern="1">
        <value public="1">
            <c path="String"/>
        </value>
        <name public="1">
            <c path="String"/>
        </name>
        <new public="1" set="method">
            <f a="?name:?value">
                <c path="String"/>
                <c path="String"/>
                <x path="Void"/>
            </f>
        </new>
        <meta>
            <m n=":final"/>
        </meta>
    </class>
    <class path="flash.net.URLRequestMethod" params="" file="/usr/lib/haxe/std/flash/net/URLRequestMethod.hx"
           extern="1">
        <DELETE public="1" static="1">
            <c path="String"/>
            <meta>
                <m n=":require">
                    <e>flash10_1</e>
                </m>
            </meta>
        </DELETE>
        <GET public="1" static="1">
            <c path="String"/>
        </GET>
        <HEAD public="1" static="1">
            <c path="String"/>
            <meta>
                <m n=":require">
                    <e>flash10_1</e>
                </m>
            </meta>
        </HEAD>
        <OPTIONS public="1" static="1">
            <c path="String"/>
            <meta>
                <m n=":require">
                    <e>flash10_1</e>
                </m>
            </meta>
        </OPTIONS>
        <POST public="1" static="1">
            <c path="String"/>
        </POST>
        <PUT public="1" static="1">
            <c path="String"/>
            <meta>
                <m n=":require">
                    <e>flash10_1</e>
                </m>
            </meta>
        </PUT>
    </class>
    <class path="flash.net.URLVariables" params="" file="/usr/lib/haxe/std/flash/net/URLVariables.hx" extern="1">
        <toString public="1" set="method">
            <f a="">
                <c path="String"/>
            </f>
        </toString>
        <decode public="1" set="method">
            <f a="source">
                <c path="String"/>
                <x path="Void"/>
            </f>
        </decode>
        <new public="1" set="method">
            <f a="?source">
                <c path="String"/>
                <x path="Void"/>
            </f>
        </new>
        <haxe_dynamic>
            <d/>
        </haxe_dynamic>
    </class>
    <class path="flash.system.ApplicationDomain" params="" file="/usr/lib/haxe/std/flash/system/ApplicationDomain.hx"
           extern="1">
        <MIN_DOMAIN_MEMORY_LENGTH public="1" set="null" static="1">
            <x path="UInt"/>
            <meta>
                <m n=":require">
                    <e>flash10</e>
                </m>
            </meta>
        </MIN_DOMAIN_MEMORY_LENGTH>
        <currentDomain public="1" set="null" static="1">
            <c path="flash.system.ApplicationDomain"/>
        </currentDomain>
        <hasDefinition public="1" set="method">
            <f a="name">
                <c path="String"/>
                <x path="Bool"/>
            </f>
        </hasDefinition>
        <getDefinition public="1" set="method">
            <f a="name">
                <c path="String"/>
                <t path="flash.utils.Object"/>
            </f>
        </getDefinition>
        <parentDomain public="1" set="null">
            <c path="flash.system.ApplicationDomain"/>
        </parentDomain>
        <domainMemory public="1">
            <c path="flash.utils.ByteArray"/>
            <meta>
                <m n=":require">
                    <e>flash10</e>
                </m>
            </meta>
        </domainMemory>
        <new public="1" set="method">
            <f a="?parentDomain">
                <c path="flash.system.ApplicationDomain"/>
                <x path="Void"/>
            </f>
        </new>
        <meta>
            <m n=":final"/>
        </meta>
    </class>
    <enum path="flash.system.ImageDecodingPolicy" params=""
          file="/usr/lib/haxe/std/flash/system/ImageDecodingPolicy.hx">
        <ON_LOAD/>
        <ON_DEMAND/>
        <meta>
            <m n=":fakeEnum">
                <e>String</e>
            </m>
        </meta>
    </enum>
    <class path="flash.system.LoaderContext" params="" file="/usr/lib/haxe/std/flash/system/LoaderContext.hx"
           extern="1">
        <securityDomain public="1">
            <c path="flash.system.SecurityDomain"/>
        </securityDomain>
        <requestedContentParent public="1">
            <c path="flash.display.DisplayObjectContainer"/>
            <meta>
                <m n=":require">
                    <e>flash11</e>
                </m>
            </meta>
        </requestedContentParent>
        <parameters public="1">
            <d/>
            <meta>
                <m n=":require">
                    <e>flash11</e>
                </m>
            </meta>
        </parameters>
        <imageDecodingPolicy public="1">
            <e path="flash.system.ImageDecodingPolicy"/>
            <meta>
                <m n=":require">
                    <e>flash11</e>
                </m>
            </meta>
        </imageDecodingPolicy>
        <checkPolicyFile public="1">
            <x path="Bool"/>
        </checkPolicyFile>
        <applicationDomain public="1">
            <c path="flash.system.ApplicationDomain"/>
        </applicationDomain>
        <allowLoadBytesCodeExecution public="1">
            <x path="Bool"/>
            <meta>
                <m n=":require">
                    <e>flash10_1</e>
                </m>
            </meta>
        </allowLoadBytesCodeExecution>
        <allowCodeImport public="1">
            <x path="Bool"/>
            <meta>
                <m n=":require">
                    <e>flash10_1</e>
                </m>
            </meta>
        </allowCodeImport>
        <new public="1" set="method">
            <f a="?checkPolicyFile:?applicationDomain:?securityDomain">
                <x path="Bool"/>
                <c path="flash.system.ApplicationDomain"/>
                <c path="flash.system.SecurityDomain"/>
                <x path="Void"/>
            </f>
        </new>
    </class>
    <class path="flash.system.SecurityDomain" params="" file="/usr/lib/haxe/std/flash/system/SecurityDomain.hx"
           extern="1">
        <currentDomain public="1" set="null" static="1">
            <c path="flash.system.SecurityDomain"/>
        </currentDomain>
    </class>
    <enum path="flash.text.AntiAliasType" params="" file="/usr/lib/haxe/std/flash/text/AntiAliasType.hx">
        <NORMAL/>
        <ADVANCED/>
        <meta>
            <m n=":fakeEnum">
                <e>String</e>
            </m>
        </meta>
    </enum>
    <class path="flash.text.Font" params="" file="/usr/lib/haxe/std/flash/text/Font.hx" extern="1">
        <enumerateFonts public="1" set="method" static="1">
            <f a="?enumerateDeviceFonts">
                <x path="Bool"/>
                <c path="Array">
                    <c path="flash.text.Font"/>
                </c>
            </f>
        </enumerateFonts>
        <registerFont public="1" set="method" static="1">
            <f a="font">
                <x path="Class">
                    <d/>
                </x>
                <x path="Void"/>
            </f>
        </registerFont>
        <hasGlyphs public="1" set="method">
            <f a="str">
                <c path="String"/>
                <x path="Bool"/>
            </f>
        </hasGlyphs>
        <fontType public="1" set="null">
            <e path="flash.text.FontType"/>
        </fontType>
        <fontStyle public="1" set="null">
            <e path="flash.text.FontStyle"/>
        </fontStyle>
        <fontName public="1" set="null">
            <c path="String"/>
        </fontName>
        <new public="1" set="method">
            <f a="">
                <x path="Void"/>
            </f>
        </new>
    </class>
    <enum path="flash.text.FontStyle" params="" file="/usr/lib/haxe/std/flash/text/FontStyle.hx">
        <REGULAR/>
        <ITALIC/>
        <BOLD_ITALIC/>
        <BOLD/>
        <meta>
            <m n=":fakeEnum">
                <e>String</e>
            </m>
        </meta>
    </enum>
    <enum path="flash.text.FontType" params="" file="/usr/lib/haxe/std/flash/text/FontType.hx">
        <EMBEDDED_CFF/>
        <EMBEDDED/>
        <DEVICE/>
        <meta>
            <m n=":fakeEnum">
                <e>String</e>
            </m>
        </meta>
    </enum>
    <enum path="flash.text.GridFitType" params="" file="/usr/lib/haxe/std/flash/text/GridFitType.hx">
        <SUBPIXEL/>
        <PIXEL/>
        <NONE/>
        <meta>
            <m n=":fakeEnum">
                <e>String</e>
            </m>
        </meta>
    </enum>
    <class path="flash.text.StyleSheet" params="" file="/usr/lib/haxe/std/flash/text/StyleSheet.hx" extern="1">
        <extends path="flash.events.EventDispatcher"/>
        <transform public="1" set="method">
            <f a="formatObject">
                <t path="flash.utils.Object"/>
                <c path="flash.text.TextFormat"/>
            </f>
        </transform>
        <setStyle public="1" set="method">
            <f a="styleName:styleObject">
                <c path="String"/>
                <t path="flash.utils.Object"/>
                <x path="Void"/>
            </f>
        </setStyle>
        <parseCSS public="1" set="method">
            <f a="CSSText">
                <c path="String"/>
                <x path="Void"/>
            </f>
        </parseCSS>
        <getStyle public="1" set="method">
            <f a="styleName">
                <c path="String"/>
                <t path="flash.utils.Object"/>
            </f>
        </getStyle>
        <clear public="1" set="method">
            <f a="">
                <x path="Void"/>
            </f>
        </clear>
        <styleNames public="1" set="null">
            <c path="Array">
                <d/>
            </c>
        </styleNames>
        <new public="1" set="method">
            <f a="">
                <x path="Void"/>
            </f>
        </new>
        <haxe_dynamic>
            <d/>
        </haxe_dynamic>
    </class>
    <enum path="flash.text.TextFieldAutoSize" params="" file="/usr/lib/haxe/std/flash/text/TextFieldAutoSize.hx">
        <RIGHT/>
        <NONE/>
        <LEFT/>
        <CENTER/>
        <meta>
            <m n=":fakeEnum">
                <e>String</e>
            </m>
        </meta>
    </enum>
    <enum path="flash.text.TextFieldType" params="" file="/usr/lib/haxe/std/flash/text/TextFieldType.hx">
        <INPUT/>
        <DYNAMIC/>
        <meta>
            <m n=":fakeEnum">
                <e>String</e>
            </m>
        </meta>
    </enum>
    <class path="flash.text.TextFormat" params="" file="/usr/lib/haxe/std/flash/text/TextFormat.hx" extern="1">
        <url public="1">
            <c path="String"/>
        </url>
        <underline public="1">
            <t path="Null">
                <x path="Bool"/>
            </t>
        </underline>
        <target public="1">
            <c path="String"/>
        </target>
        <tabStops public="1">
            <c path="Array">
                <x path="UInt"/>
            </c>
        </tabStops>
        <size public="1">
            <t path="Null">
                <x path="Float"/>
            </t>
        </size>
        <rightMargin public="1">
            <t path="Null">
                <x path="Float"/>
            </t>
        </rightMargin>
        <letterSpacing public="1">
            <t path="Null">
                <x path="Float"/>
            </t>
        </letterSpacing>
        <leftMargin public="1">
            <t path="Null">
                <x path="Float"/>
            </t>
        </leftMargin>
        <leading public="1">
            <t path="Null">
                <x path="Float"/>
            </t>
        </leading>
        <kerning public="1">
            <t path="Null">
                <x path="Bool"/>
            </t>
        </kerning>
        <italic public="1">
            <t path="Null">
                <x path="Bool"/>
            </t>
        </italic>
        <indent public="1">
            <t path="Null">
                <x path="Float"/>
            </t>
        </indent>
        <font public="1">
            <c path="String"/>
        </font>
        <display public="1">
            <e path="flash.text.TextFormatDisplay"/>
        </display>
        <color public="1">
            <t path="Null">
                <x path="UInt"/>
            </t>
        </color>
        <bullet public="1">
            <t path="Null">
                <x path="Bool"/>
            </t>
        </bullet>
        <bold public="1">
            <t path="Null">
                <x path="Bool"/>
            </t>
        </bold>
        <blockIndent public="1">
            <t path="Null">
                <x path="Float"/>
            </t>
        </blockIndent>
        <align public="1">
            <e path="flash.text.TextFormatAlign"/>
        </align>
        <new public="1" set="method">
            <f a="?font:?size:?color:?bold:?italic:?underline:?url:?target:?align:?leftMargin:?rightMargin:?indent:?leading">
                <c path="String"/>
                <x path="Float"/>
                <x path="UInt"/>
                <x path="Bool"/>
                <x path="Bool"/>
                <x path="Bool"/>
                <c path="String"/>
                <c path="String"/>
                <e path="flash.text.TextFormatAlign"/>
                <x path="Float"/>
                <x path="Float"/>
                <x path="Float"/>
                <x path="Float"/>
                <x path="Void"/>
            </f>
        </new>
    </class>
    <enum path="flash.text.TextFormatAlign" params="" file="/usr/lib/haxe/std/flash/text/TextFormatAlign.hx">
        <START/>
        <RIGHT/>
        <LEFT/>
        <JUSTIFY/>
        <END/>
        <CENTER/>
        <meta>
            <m n=":fakeEnum">
                <e>String</e>
            </m>
        </meta>
    </enum>
    <enum path="flash.text.TextFormatDisplay" params="" file="/usr/lib/haxe/std/flash/text/TextFormatDisplay.hx">
        <INLINE/>
        <BLOCK/>
        <meta>
            <m n=":fakeEnum">
                <e>String</e>
            </m>
        </meta>
    </enum>
    <enum path="flash.text.TextInteractionMode" params="" file="/usr/lib/haxe/std/flash/text/TextInteractionMode.hx">
        <SELECTION/>
        <NORMAL/>
        <meta>
            <m n=":fakeEnum">
                <e>String</e>
            </m>
        </meta>
    </enum>
    <class path="flash.text.TextLineMetrics" params="" file="/usr/lib/haxe/std/flash/text/TextLineMetrics.hx"
           extern="1">
        <x public="1">
            <x path="Float"/>
        </x>
        <width public="1">
            <x path="Float"/>
        </width>
        <leading public="1">
            <x path="Float"/>
        </leading>
        <height public="1">
            <x path="Float"/>
        </height>
        <descent public="1">
            <x path="Float"/>
        </descent>
        <ascent public="1">
            <x path="Float"/>
        </ascent>
        <new public="1" set="method">
            <f a="x:width:height:ascent:descent:leading">
                <x path="Float"/>
                <x path="Float"/>
                <x path="Float"/>
                <x path="Float"/>
                <x path="Float"/>
                <x path="Float"/>
                <x path="Void"/>
            </f>
        </new>
    </class>
    <class path="flash.text.TextSnapshot" params="" file="/usr/lib/haxe/std/flash/text/TextSnapshot.hx" extern="1">
        <setSelected public="1" set="method">
            <f a="beginIndex:endIndex:select">
                <x path="Int"/>
                <x path="Int"/>
                <x path="Bool"/>
                <x path="Void"/>
            </f>
        </setSelected>
        <setSelectColor public="1" set="method">
            <f a="?hexColor">
                <x path="UInt"/>
                <x path="Void"/>
            </f>
        </setSelectColor>
        <hitTestTextNearPos public="1" set="method">
            <f a="x:y:?maxDistance">
                <x path="Float"/>
                <x path="Float"/>
                <x path="Float"/>
                <x path="Float"/>
            </f>
        </hitTestTextNearPos>
        <getTextRunInfo public="1" set="method">
            <f a="beginIndex:endIndex">
                <x path="Int"/>
                <x path="Int"/>
                <c path="Array">
                    <d/>
                </c>
            </f>
        </getTextRunInfo>
        <getText public="1" set="method">
            <f a="beginIndex:endIndex:?includeLineEndings">
                <x path="Int"/>
                <x path="Int"/>
                <x path="Bool"/>
                <c path="String"/>
            </f>
        </getText>
        <getSelectedText public="1" set="method">
            <f a="?includeLineEndings">
                <x path="Bool"/>
                <c path="String"/>
            </f>
        </getSelectedText>
        <getSelected public="1" set="method">
            <f a="beginIndex:endIndex">
                <x path="Int"/>
                <x path="Int"/>
                <x path="Bool"/>
            </f>
        </getSelected>
        <findText public="1" set="method">
            <f a="beginIndex:textToFind:caseSensitive">
                <x path="Int"/>
                <c path="String"/>
                <x path="Bool"/>
                <x path="Int"/>
            </f>
        </findText>
        <charCount public="1" set="null">
            <x path="Int"/>
        </charCount>
        <new public="1" set="method">
            <f a="">
                <x path="Void"/>
            </f>
        </new>
    </class>
    <class path="flash.ui.ContextMenu" params="" file="/usr/lib/haxe/std/flash/ui/ContextMenu.hx" extern="1">
        <extends path="flash.display.NativeMenu"/>
        <isSupported public="1" set="null" static="1">
            <x path="Bool"/>
            <meta>
                <m n=":require">
                    <e>flash10_1</e>
                </m>
            </meta>
        </isSupported>
        <hideBuiltInItems public="1" set="method">
            <f a="">
                <x path="Void"/>
            </f>
        </hideBuiltInItems>
        <clone public="1" set="method">
            <f a="">
                <c path="flash.ui.ContextMenu"/>
            </f>
        </clone>
        <link public="1">
            <c path="flash.net.URLRequest"/>
            <meta>
                <m n=":require">
                    <e>flash10</e>
                </m>
            </meta>
        </link>
        <customItems public="1">
            <c path="Array">
                <d/>
            </c>
        </customItems>
        <clipboardMenu public="1">
            <x path="Bool"/>
            <meta>
                <m n=":require">
                    <e>flash10</e>
                </m>
            </meta>
        </clipboardMenu>
        <clipboardItems public="1">
            <c path="flash.ui.ContextMenuClipboardItems"/>
            <meta>
                <m n=":require">
                    <e>flash10</e>
                </m>
            </meta>
        </clipboardItems>
        <builtInItems public="1">
            <c path="flash.ui.ContextMenuBuiltInItems"/>
        </builtInItems>
        <new public="1" set="method">
            <f a="">
                <x path="Void"/>
            </f>
        </new>
        <meta>
            <m n=":final"/>
        </meta>
    </class>
    <class path="flash.ui.ContextMenuBuiltInItems" params=""
           file="/usr/lib/haxe/std/flash/ui/ContextMenuBuiltInItems.hx" extern="1">
        <clone public="1" set="method">
            <f a="">
                <c path="flash.ui.ContextMenuBuiltInItems"/>
            </f>
        </clone>
        <zoom public="1">
            <x path="Bool"/>
        </zoom>
        <save public="1">
            <x path="Bool"/>
        </save>
        <rewind public="1">
            <x path="Bool"/>
        </rewind>
        <quality public="1">
            <x path="Bool"/>
        </quality>
        <print public="1">
            <x path="Bool"/>
        </print>
        <play public="1">
            <x path="Bool"/>
        </play>
        <loop public="1">
            <x path="Bool"/>
        </loop>
        <forwardAndBack public="1">
            <x path="Bool"/>
        </forwardAndBack>
        <new public="1" set="method">
            <f a="">
                <x path="Void"/>
            </f>
        </new>
        <meta>
            <m n=":final"/>
        </meta>
    </class>
    <class path="flash.ui.ContextMenuClipboardItems" params=""
           file="/usr/lib/haxe/std/flash/ui/ContextMenuClipboardItems.hx" extern="1">
        <clone public="1" set="method">
            <f a="">
                <c path="flash.ui.ContextMenuClipboardItems"/>
            </f>
        </clone>
        <selectAll public="1">
            <x path="Bool"/>
        </selectAll>
        <paste public="1">
            <x path="Bool"/>
        </paste>
        <cut public="1">
            <x path="Bool"/>
        </cut>
        <copy public="1">
            <x path="Bool"/>
        </copy>
        <clear public="1">
            <x path="Bool"/>
        </clear>
        <new public="1" set="method">
            <f a="">
                <x path="Void"/>
            </f>
        </new>
        <meta>
            <m n=":final"/>
        </meta>
    </class>
    <enum path="flash.ui.KeyLocation" params="" file="/usr/lib/haxe/std/flash/ui/KeyLocation.hx">
        <STANDARD/>
        <RIGHT/>
        <NUM_PAD/>
        <LEFT/>
        <D_PAD/>
        <meta>
            <m n=":fakeEnum">
                <e>UInt</e>
            </m>
        </meta>
    </enum>
    <class path="flash.ui.Keyboard" params="" file="/usr/lib/haxe/std/flash/ui/Keyboard.hx" extern="1">
        <A public="1" static="1">
            <x path="UInt"/>
            <meta>
                <m n=":require">
                    <e>flash10_1</e>
                </m>
            </meta>
        </A>
        <ALTERNATE public="1" static="1">
            <x path="UInt"/>
            <meta>
                <m n=":require">
                    <e>flash10_1</e>
                </m>
            </meta>
        </ALTERNATE>
        <AUDIO public="1" static="1">
            <x path="UInt"/>
            <meta>
                <m n=":require">
                    <e>flash10_2</e>
                </m>
            </meta>
        </AUDIO>
        <B public="1" static="1">
            <x path="UInt"/>
            <meta>
                <m n=":require">
                    <e>flash10_1</e>
                </m>
            </meta>
        </B>
        <BACK public="1" static="1">
            <x path="UInt"/>
            <meta>
                <m n=":require">
                    <e>flash10_2</e>
                </m>
            </meta>
        </BACK>
        <BACKQUOTE public="1" static="1">
            <x path="UInt"/>
            <meta>
                <m n=":require">
                    <e>flash10_1</e>
                </m>
            </meta>
        </BACKQUOTE>
        <BACKSLASH public="1" static="1">
            <x path="UInt"/>
            <meta>
                <m n=":require">
                    <e>flash10_1</e>
                </m>
            </meta>
        </BACKSLASH>
        <BACKSPACE public="1" static="1">
            <x path="UInt"/>
        </BACKSPACE>
        <BLUE public="1" static="1">
            <x path="UInt"/>
            <meta>
                <m n=":require">
                    <e>flash10_2</e>
                </m>
            </meta>
        </BLUE>
        <C public="1" static="1">
            <x path="UInt"/>
            <meta>
                <m n=":require">
                    <e>flash10_1</e>
                </m>
            </meta>
        </C>
        <CAPS_LOCK public="1" static="1">
            <x path="UInt"/>
        </CAPS_LOCK>
        <CHANNEL_DOWN public="1" static="1">
            <x path="UInt"/>
            <meta>
                <m n=":require">
                    <e>flash10_2</e>
                </m>
            </meta>
        </CHANNEL_DOWN>
        <CHANNEL_UP public="1" static="1">
            <x path="UInt"/>
            <meta>
                <m n=":require">
                    <e>flash10_2</e>
                </m>
            </meta>
        </CHANNEL_UP>
        <COMMA public="1" static="1">
            <x path="UInt"/>
            <meta>
                <m n=":require">
                    <e>flash10_1</e>
                </m>
            </meta>
        </COMMA>
        <COMMAND public="1" static="1">
            <x path="UInt"/>
            <meta>
                <m n=":require">
                    <e>flash10_1</e>
                </m>
            </meta>
        </COMMAND>
        <CONTROL public="1" static="1">
            <x path="UInt"/>
        </CONTROL>
        <CharCodeStrings public="1" static="1">
            <c path="Array">
                <d/>
            </c>
            <meta>
                <m n=":require">
                    <e>flash10_1</e>
                </m>
            </meta>
        </CharCodeStrings>
        <D public="1" static="1">
            <x path="UInt"/>
            <meta>
                <m n=":require">
                    <e>flash10_1</e>
                </m>
            </meta>
        </D>
        <DELETE public="1" static="1">
            <x path="UInt"/>
        </DELETE>
        <DOWN public="1" static="1">
            <x path="UInt"/>
        </DOWN>
        <DVR public="1" static="1">
            <x path="UInt"/>
            <meta>
                <m n=":require">
                    <e>flash10_2</e>
                </m>
            </meta>
        </DVR>
        <E public="1" static="1">
            <x path="UInt"/>
            <meta>
                <m n=":require">
                    <e>flash10_1</e>
                </m>
            </meta>
        </E>
        <END public="1" static="1">
            <x path="UInt"/>
        </END>
        <ENTER public="1" static="1">
            <x path="UInt"/>
        </ENTER>
        <EQUAL public="1" static="1">
            <x path="UInt"/>
            <meta>
                <m n=":require">
                    <e>flash10_1</e>
                </m>
            </meta>
        </EQUAL>
        <ESCAPE public="1" static="1">
            <x path="UInt"/>
        </ESCAPE>
        <EXIT public="1" static="1">
            <x path="UInt"/>
            <meta>
                <m n=":require">
                    <e>flash10_2</e>
                </m>
            </meta>
        </EXIT>
        <F public="1" static="1">
            <x path="UInt"/>
            <meta>
                <m n=":require">
                    <e>flash10_1</e>
                </m>
            </meta>
        </F>
        <F1 public="1" static="1">
            <x path="UInt"/>
        </F1>
        <F10 public="1" static="1">
            <x path="UInt"/>
        </F10>
        <F11 public="1" static="1">
            <x path="UInt"/>
        </F11>
        <F12 public="1" static="1">
            <x path="UInt"/>
        </F12>
        <F13 public="1" static="1">
            <x path="UInt"/>
        </F13>
        <F14 public="1" static="1">
            <x path="UInt"/>
        </F14>
        <F15 public="1" static="1">
            <x path="UInt"/>
        </F15>
        <F2 public="1" static="1">
            <x path="UInt"/>
        </F2>
        <F3 public="1" static="1">
            <x path="UInt"/>
        </F3>
        <F4 public="1" static="1">
            <x path="UInt"/>
        </F4>
        <F5 public="1" static="1">
            <x path="UInt"/>
        </F5>
        <F6 public="1" static="1">
            <x path="UInt"/>
        </F6>
        <F7 public="1" static="1">
            <x path="UInt"/>
        </F7>
        <F8 public="1" static="1">
            <x path="UInt"/>
        </F8>
        <F9 public="1" static="1">
            <x path="UInt"/>
        </F9>
        <FAST_FORWARD public="1" static="1">
            <x path="UInt"/>
            <meta>
                <m n=":require">
                    <e>flash10_2</e>
                </m>
            </meta>
        </FAST_FORWARD>
        <G public="1" static="1">
            <x path="UInt"/>
            <meta>
                <m n=":require">
                    <e>flash10_1</e>
                </m>
            </meta>
        </G>
        <GREEN public="1" static="1">
            <x path="UInt"/>
            <meta>
                <m n=":require">
                    <e>flash10_2</e>
                </m>
            </meta>
        </GREEN>
        <GUIDE public="1" static="1">
            <x path="UInt"/>
            <meta>
                <m n=":require">
                    <e>flash10_2</e>
                </m>
            </meta>
        </GUIDE>
        <H public="1" static="1">
            <x path="UInt"/>
            <meta>
                <m n=":require">
                    <e>flash10_1</e>
                </m>
            </meta>
        </H>
        <HELP public="1" static="1">
            <x path="UInt"/>
            <meta>
                <m n=":require">
                    <e>flash10_2</e>
                </m>
            </meta>
        </HELP>
        <HOME public="1" static="1">
            <x path="UInt"/>
        </HOME>
        <I public="1" static="1">
            <x path="UInt"/>
            <meta>
                <m n=":require">
                    <e>flash10_1</e>
                </m>
            </meta>
        </I>
        <INFO public="1" static="1">
            <x path="UInt"/>
            <meta>
                <m n=":require">
                    <e>flash10_2</e>
                </m>
            </meta>
        </INFO>
        <INPUT public="1" static="1">
            <x path="UInt"/>
            <meta>
                <m n=":require">
                    <e>flash10_2</e>
                </m>
            </meta>
        </INPUT>
        <INSERT public="1" static="1">
            <x path="UInt"/>
        </INSERT>
        <J public="1" static="1">
            <x path="UInt"/>
            <meta>
                <m n=":require">
                    <e>flash10_1</e>
                </m>
            </meta>
        </J>
        <K public="1" static="1">
            <x path="UInt"/>
            <meta>
                <m n=":require">
                    <e>flash10_1</e>
                </m>
            </meta>
        </K>
        <KEYNAME_BEGIN public="1" static="1">
            <c path="String"/>
            <meta>
                <m n=":require">
                    <e>flash10_1</e>
                </m>
            </meta>
        </KEYNAME_BEGIN>
        <KEYNAME_BREAK public="1" static="1">
            <c path="String"/>
            <meta>
                <m n=":require">
                    <e>flash10_1</e>
                </m>
            </meta>
        </KEYNAME_BREAK>
        <KEYNAME_CLEARDISPLAY public="1" static="1">
            <c path="String"/>
            <meta>
                <m n=":require">
                    <e>flash10_1</e>
                </m>
            </meta>
        </KEYNAME_CLEARDISPLAY>
        <KEYNAME_CLEARLINE public="1" static="1">
            <c path="String"/>
            <meta>
                <m n=":require">
                    <e>flash10_1</e>
                </m>
            </meta>
        </KEYNAME_CLEARLINE>
        <KEYNAME_DELETE public="1" static="1">
            <c path="String"/>
            <meta>
                <m n=":require">
                    <e>flash10_1</e>
                </m>
            </meta>
        </KEYNAME_DELETE>
        <KEYNAME_DELETECHAR public="1" static="1">
            <c path="String"/>
            <meta>
                <m n=":require">
                    <e>flash10_1</e>
                </m>
            </meta>
        </KEYNAME_DELETECHAR>
        <KEYNAME_DELETELINE public="1" static="1">
            <c path="String"/>
            <meta>
                <m n=":require">
                    <e>flash10_1</e>
                </m>
            </meta>
        </KEYNAME_DELETELINE>
        <KEYNAME_DOWNARROW public="1" static="1">
            <c path="String"/>
            <meta>
                <m n=":require">
                    <e>flash10_1</e>
                </m>
            </meta>
        </KEYNAME_DOWNARROW>
        <KEYNAME_END public="1" static="1">
            <c path="String"/>
            <meta>
                <m n=":require">
                    <e>flash10_1</e>
                </m>
            </meta>
        </KEYNAME_END>
        <KEYNAME_EXECUTE public="1" static="1">
            <c path="String"/>
            <meta>
                <m n=":require">
                    <e>flash10_1</e>
                </m>
            </meta>
        </KEYNAME_EXECUTE>
        <KEYNAME_F1 public="1" static="1">
            <c path="String"/>
            <meta>
                <m n=":require">
                    <e>flash10_1</e>
                </m>
            </meta>
        </KEYNAME_F1>
        <KEYNAME_F10 public="1" static="1">
            <c path="String"/>
            <meta>
                <m n=":require">
                    <e>flash10_1</e>
                </m>
            </meta>
        </KEYNAME_F10>
        <KEYNAME_F11 public="1" static="1">
            <c path="String"/>
            <meta>
                <m n=":require">
                    <e>flash10_1</e>
                </m>
            </meta>
        </KEYNAME_F11>
        <KEYNAME_F12 public="1" static="1">
            <c path="String"/>
            <meta>
                <m n=":require">
                    <e>flash10_1</e>
                </m>
            </meta>
        </KEYNAME_F12>
        <KEYNAME_F13 public="1" static="1">
            <c path="String"/>
            <meta>
                <m n=":require">
                    <e>flash10_1</e>
                </m>
            </meta>
        </KEYNAME_F13>
        <KEYNAME_F14 public="1" static="1">
            <c path="String"/>
            <meta>
                <m n=":require">
                    <e>flash10_1</e>
                </m>
            </meta>
        </KEYNAME_F14>
        <KEYNAME_F15 public="1" static="1">
            <c path="String"/>
            <meta>
                <m n=":require">
                    <e>flash10_1</e>
                </m>
            </meta>
        </KEYNAME_F15>
        <KEYNAME_F16 public="1" static="1">
            <c path="String"/>
            <meta>
                <m n=":require">
                    <e>flash10_1</e>
                </m>
            </meta>
        </KEYNAME_F16>
        <KEYNAME_F17 public="1" static="1">
            <c path="String"/>
            <meta>
                <m n=":require">
                    <e>flash10_1</e>
                </m>
            </meta>
        </KEYNAME_F17>
        <KEYNAME_F18 public="1" static="1">
            <c path="String"/>
            <meta>
                <m n=":require">
                    <e>flash10_1</e>
                </m>
            </meta>
        </KEYNAME_F18>
        <KEYNAME_F19 public="1" static="1">
            <c path="String"/>
            <meta>
                <m n=":require">
                    <e>flash10_1</e>
                </m>
            </meta>
        </KEYNAME_F19>
        <KEYNAME_F2 public="1" static="1">
            <c path="String"/>
            <meta>
                <m n=":require">
                    <e>flash10_1</e>
                </m>
            </meta>
        </KEYNAME_F2>
        <KEYNAME_F20 public="1" static="1">
            <c path="String"/>
            <meta>
                <m n=":require">
                    <e>flash10_1</e>
                </m>
            </meta>
        </KEYNAME_F20>
        <KEYNAME_F21 public="1" static="1">
            <c path="String"/>
            <meta>
                <m n=":require">
                    <e>flash10_1</e>
                </m>
            </meta>
        </KEYNAME_F21>
        <KEYNAME_F22 public="1" static="1">
            <c path="String"/>
            <meta>
                <m n=":require">
                    <e>flash10_1</e>
                </m>
            </meta>
        </KEYNAME_F22>
        <KEYNAME_F23 public="1" static="1">
            <c path="String"/>
            <meta>
                <m n=":require">
                    <e>flash10_1</e>
                </m>
            </meta>
        </KEYNAME_F23>
        <KEYNAME_F24 public="1" static="1">
            <c path="String"/>
            <meta>
                <m n=":require">
                    <e>flash10_1</e>
                </m>
            </meta>
        </KEYNAME_F24>
        <KEYNAME_F25 public="1" static="1">
            <c path="String"/>
            <meta>
                <m n=":require">
                    <e>flash10_1</e>
                </m>
            </meta>
        </KEYNAME_F25>
        <KEYNAME_F26 public="1" static="1">
            <c path="String"/>
            <meta>
                <m n=":require">
                    <e>flash10_1</e>
                </m>
            </meta>
        </KEYNAME_F26>
        <KEYNAME_F27 public="1" static="1">
            <c path="String"/>
            <meta>
                <m n=":require">
                    <e>flash10_1</e>
                </m>
            </meta>
        </KEYNAME_F27>
        <KEYNAME_F28 public="1" static="1">
            <c path="String"/>
            <meta>
                <m n=":require">
                    <e>flash10_1</e>
                </m>
            </meta>
        </KEYNAME_F28>
        <KEYNAME_F29 public="1" static="1">
            <c path="String"/>
            <meta>
                <m n=":require">
                    <e>flash10_1</e>
                </m>
            </meta>
        </KEYNAME_F29>
        <KEYNAME_F3 public="1" static="1">
            <c path="String"/>
            <meta>
                <m n=":require">
                    <e>flash10_1</e>
                </m>
            </meta>
        </KEYNAME_F3>
        <KEYNAME_F30 public="1" static="1">
            <c path="String"/>
            <meta>
                <m n=":require">
                    <e>flash10_1</e>
                </m>
            </meta>
        </KEYNAME_F30>
        <KEYNAME_F31 public="1" static="1">
            <c path="String"/>
            <meta>
                <m n=":require">
                    <e>flash10_1</e>
                </m>
            </meta>
        </KEYNAME_F31>
        <KEYNAME_F32 public="1" static="1">
            <c path="String"/>
            <meta>
                <m n=":require">
                    <e>flash10_1</e>
                </m>
            </meta>
        </KEYNAME_F32>
        <KEYNAME_F33 public="1" static="1">
            <c path="String"/>
            <meta>
                <m n=":require">
                    <e>flash10_1</e>
                </m>
            </meta>
        </KEYNAME_F33>
        <KEYNAME_F34 public="1" static="1">
            <c path="String"/>
            <meta>
                <m n=":require">
                    <e>flash10_1</e>
                </m>
            </meta>
        </KEYNAME_F34>
        <KEYNAME_F35 public="1" static="1">
            <c path="String"/>
            <meta>
                <m n=":require">
                    <e>flash10_1</e>
                </m>
            </meta>
        </KEYNAME_F35>
        <KEYNAME_F4 public="1" static="1">
            <c path="String"/>
            <meta>
                <m n=":require">
                    <e>flash10_1</e>
                </m>
            </meta>
        </KEYNAME_F4>
        <KEYNAME_F5 public="1" static="1">
            <c path="String"/>
            <meta>
                <m n=":require">
                    <e>flash10_1</e>
                </m>
            </meta>
        </KEYNAME_F5>
        <KEYNAME_F6 public="1" static="1">
            <c path="String"/>
            <meta>
                <m n=":require">
                    <e>flash10_1</e>
                </m>
            </meta>
        </KEYNAME_F6>
        <KEYNAME_F7 public="1" static="1">
            <c path="String"/>
            <meta>
                <m n=":require">
                    <e>flash10_1</e>
                </m>
            </meta>
        </KEYNAME_F7>
        <KEYNAME_F8 public="1" static="1">
            <c path="String"/>
            <meta>
                <m n=":require">
                    <e>flash10_1</e>
                </m>
            </meta>
        </KEYNAME_F8>
        <KEYNAME_F9 public="1" static="1">
            <c path="String"/>
            <meta>
                <m n=":require">
                    <e>flash10_1</e>
                </m>
            </meta>
        </KEYNAME_F9>
        <KEYNAME_FIND public="1" static="1">
            <c path="String"/>
            <meta>
                <m n=":require">
                    <e>flash10_1</e>
                </m>
            </meta>
        </KEYNAME_FIND>
        <KEYNAME_HELP public="1" static="1">
            <c path="String"/>
            <meta>
                <m n=":require">
                    <e>flash10_1</e>
                </m>
            </meta>
        </KEYNAME_HELP>
        <KEYNAME_HOME public="1" static="1">
            <c path="String"/>
            <meta>
                <m n=":require">
                    <e>flash10_1</e>
                </m>
            </meta>
        </KEYNAME_HOME>
        <KEYNAME_INSERT public="1" static="1">
            <c path="String"/>
            <meta>
                <m n=":require">
                    <e>flash10_1</e>
                </m>
            </meta>
        </KEYNAME_INSERT>
        <KEYNAME_INSERTCHAR public="1" static="1">
            <c path="String"/>
            <meta>
                <m n=":require">
                    <e>flash10_1</e>
                </m>
            </meta>
        </KEYNAME_INSERTCHAR>
        <KEYNAME_INSERTLINE public="1" static="1">
            <c path="String"/>
            <meta>
                <m n=":require">
                    <e>flash10_1</e>
                </m>
            </meta>
        </KEYNAME_INSERTLINE>
        <KEYNAME_LEFTARROW public="1" static="1">
            <c path="String"/>
            <meta>
                <m n=":require">
                    <e>flash10_1</e>
                </m>
            </meta>
        </KEYNAME_LEFTARROW>
        <KEYNAME_MENU public="1" static="1">
            <c path="String"/>
            <meta>
                <m n=":require">
                    <e>flash10_1</e>
                </m>
            </meta>
        </KEYNAME_MENU>
        <KEYNAME_MODESWITCH public="1" static="1">
            <c path="String"/>
            <meta>
                <m n=":require">
                    <e>flash10_1</e>
                </m>
            </meta>
        </KEYNAME_MODESWITCH>
        <KEYNAME_NEXT public="1" static="1">
            <c path="String"/>
            <meta>
                <m n=":require">
                    <e>flash10_1</e>
                </m>
            </meta>
        </KEYNAME_NEXT>
        <KEYNAME_PAGEDOWN public="1" static="1">
            <c path="String"/>
            <meta>
                <m n=":require">
                    <e>flash10_1</e>
                </m>
            </meta>
        </KEYNAME_PAGEDOWN>
        <KEYNAME_PAGEUP public="1" static="1">
            <c path="String"/>
            <meta>
                <m n=":require">
                    <e>flash10_1</e>
                </m>
            </meta>
        </KEYNAME_PAGEUP>
        <KEYNAME_PAUSE public="1" static="1">
            <c path="String"/>
            <meta>
                <m n=":require">
                    <e>flash10_1</e>
                </m>
            </meta>
        </KEYNAME_PAUSE>
        <KEYNAME_PREV public="1" static="1">
            <c path="String"/>
            <meta>
                <m n=":require">
                    <e>flash10_1</e>
                </m>
            </meta>
        </KEYNAME_PREV>
        <KEYNAME_PRINT public="1" static="1">
            <c path="String"/>
            <meta>
                <m n=":require">
                    <e>flash10_1</e>
                </m>
            </meta>
        </KEYNAME_PRINT>
        <KEYNAME_PRINTSCREEN public="1" static="1">
            <c path="String"/>
            <meta>
                <m n=":require">
                    <e>flash10_1</e>
                </m>
            </meta>
        </KEYNAME_PRINTSCREEN>
        <KEYNAME_REDO public="1" static="1">
            <c path="String"/>
            <meta>
                <m n=":require">
                    <e>flash10_1</e>
                </m>
            </meta>
        </KEYNAME_REDO>
        <KEYNAME_RESET public="1" static="1">
            <c path="String"/>
            <meta>
                <m n=":require">
                    <e>flash10_1</e>
                </m>
            </meta>
        </KEYNAME_RESET>
        <KEYNAME_RIGHTARROW public="1" static="1">
            <c path="String"/>
            <meta>
                <m n=":require">
                    <e>flash10_1</e>
                </m>
            </meta>
        </KEYNAME_RIGHTARROW>
        <KEYNAME_SCROLLLOCK public="1" static="1">
            <c path="String"/>
            <meta>
                <m n=":require">
                    <e>flash10_1</e>
                </m>
            </meta>
        </KEYNAME_SCROLLLOCK>
        <KEYNAME_SELECT public="1" static="1">
            <c path="String"/>
            <meta>
                <m n=":require">
                    <e>flash10_1</e>
                </m>
            </meta>
        </KEYNAME_SELECT>
        <KEYNAME_STOP public="1" static="1">
            <c path="String"/>
            <meta>
                <m n=":require">
                    <e>flash10_1</e>
                </m>
            </meta>
        </KEYNAME_STOP>
        <KEYNAME_SYSREQ public="1" static="1">
            <c path="String"/>
            <meta>
                <m n=":require">
                    <e>flash10_1</e>
                </m>
            </meta>
        </KEYNAME_SYSREQ>
        <KEYNAME_SYSTEM public="1" static="1">
            <c path="String"/>
            <meta>
                <m n=":require">
                    <e>flash10_1</e>
                </m>
            </meta>
        </KEYNAME_SYSTEM>
        <KEYNAME_UNDO public="1" static="1">
            <c path="String"/>
            <meta>
                <m n=":require">
                    <e>flash10_1</e>
                </m>
            </meta>
        </KEYNAME_UNDO>
        <KEYNAME_UPARROW public="1" static="1">
            <c path="String"/>
            <meta>
                <m n=":require">
                    <e>flash10_1</e>
                </m>
            </meta>
        </KEYNAME_UPARROW>
        <KEYNAME_USER public="1" static="1">
            <c path="String"/>
            <meta>
                <m n=":require">
                    <e>flash10_1</e>
                </m>
            </meta>
        </KEYNAME_USER>
        <L public="1" static="1">
            <x path="UInt"/>
            <meta>
                <m n=":require">
                    <e>flash10_1</e>
                </m>
            </meta>
        </L>
        <LAST public="1" static="1">
            <x path="UInt"/>
            <meta>
                <m n=":require">
                    <e>flash10_2</e>
                </m>
            </meta>
        </LAST>
        <LEFT public="1" static="1">
            <x path="UInt"/>
        </LEFT>
        <LEFTBRACKET public="1" static="1">
            <x path="UInt"/>
            <meta>
                <m n=":require">
                    <e>flash10_1</e>
                </m>
            </meta>
        </LEFTBRACKET>
        <LIVE public="1" static="1">
            <x path="UInt"/>
            <meta>
                <m n=":require">
                    <e>flash10_2</e>
                </m>
            </meta>
        </LIVE>
        <M public="1" static="1">
            <x path="UInt"/>
            <meta>
                <m n=":require">
                    <e>flash10_1</e>
                </m>
            </meta>
        </M>
        <MASTER_SHELL public="1" static="1">
            <x path="UInt"/>
            <meta>
                <m n=":require">
                    <e>flash10_2</e>
                </m>
            </meta>
        </MASTER_SHELL>
        <MENU public="1" static="1">
            <x path="UInt"/>
            <meta>
                <m n=":require">
                    <e>flash10_2</e>
                </m>
            </meta>
        </MENU>
        <MINUS public="1" static="1">
            <x path="UInt"/>
            <meta>
                <m n=":require">
                    <e>flash10_1</e>
                </m>
            </meta>
        </MINUS>
        <N public="1" static="1">
            <x path="UInt"/>
            <meta>
                <m n=":require">
                    <e>flash10_1</e>
                </m>
            </meta>
        </N>
        <NEXT public="1" static="1">
            <x path="UInt"/>
            <meta>
                <m n=":require">
                    <e>flash10_2</e>
                </m>
            </meta>
        </NEXT>
        <NUMBER_0 public="1" static="1">
            <x path="UInt"/>
            <meta>
                <m n=":require">
                    <e>flash10_1</e>
                </m>
            </meta>
        </NUMBER_0>
        <NUMBER_1 public="1" static="1">
            <x path="UInt"/>
            <meta>
                <m n=":require">
                    <e>flash10_1</e>
                </m>
            </meta>
        </NUMBER_1>
        <NUMBER_2 public="1" static="1">
            <x path="UInt"/>
            <meta>
                <m n=":require">
                    <e>flash10_1</e>
                </m>
            </meta>
        </NUMBER_2>
        <NUMBER_3 public="1" static="1">
            <x path="UInt"/>
            <meta>
                <m n=":require">
                    <e>flash10_1</e>
                </m>
            </meta>
        </NUMBER_3>
        <NUMBER_4 public="1" static="1">
            <x path="UInt"/>
            <meta>
                <m n=":require">
                    <e>flash10_1</e>
                </m>
            </meta>
        </NUMBER_4>
        <NUMBER_5 public="1" static="1">
            <x path="UInt"/>
            <meta>
                <m n=":require">
                    <e>flash10_1</e>
                </m>
            </meta>
        </NUMBER_5>
        <NUMBER_6 public="1" static="1">
            <x path="UInt"/>
            <meta>
                <m n=":require">
                    <e>flash10_1</e>
                </m>
            </meta>
        </NUMBER_6>
        <NUMBER_7 public="1" static="1">
            <x path="UInt"/>
            <meta>
                <m n=":require">
                    <e>flash10_1</e>
                </m>
            </meta>
        </NUMBER_7>
        <NUMBER_8 public="1" static="1">
            <x path="UInt"/>
            <meta>
                <m n=":require">
                    <e>flash10_1</e>
                </m>
            </meta>
        </NUMBER_8>
        <NUMBER_9 public="1" static="1">
            <x path="UInt"/>
            <meta>
                <m n=":require">
                    <e>flash10_1</e>
                </m>
            </meta>
        </NUMBER_9>
        <NUMPAD public="1" static="1">
            <x path="UInt"/>
            <meta>
                <m n=":require">
                    <e>flash10_1</e>
                </m>
            </meta>
        </NUMPAD>
        <NUMPAD_0 public="1" static="1">
            <x path="UInt"/>
        </NUMPAD_0>
        <NUMPAD_1 public="1" static="1">
            <x path="UInt"/>
        </NUMPAD_1>
        <NUMPAD_2 public="1" static="1">
            <x path="UInt"/>
        </NUMPAD_2>
        <NUMPAD_3 public="1" static="1">
            <x path="UInt"/>
        </NUMPAD_3>
        <NUMPAD_4 public="1" static="1">
            <x path="UInt"/>
        </NUMPAD_4>
        <NUMPAD_5 public="1" static="1">
            <x path="UInt"/>
        </NUMPAD_5>
        <NUMPAD_6 public="1" static="1">
            <x path="UInt"/>
        </NUMPAD_6>
        <NUMPAD_7 public="1" static="1">
            <x path="UInt"/>
        </NUMPAD_7>
        <NUMPAD_8 public="1" static="1">
            <x path="UInt"/>
        </NUMPAD_8>
        <NUMPAD_9 public="1" static="1">
            <x path="UInt"/>
        </NUMPAD_9>
        <NUMPAD_ADD public="1" static="1">
            <x path="UInt"/>
        </NUMPAD_ADD>
        <NUMPAD_DECIMAL public="1" static="1">
            <x path="UInt"/>
        </NUMPAD_DECIMAL>
        <NUMPAD_DIVIDE public="1" static="1">
            <x path="UInt"/>
        </NUMPAD_DIVIDE>
        <NUMPAD_ENTER public="1" static="1">
            <x path="UInt"/>
        </NUMPAD_ENTER>
        <NUMPAD_MULTIPLY public="1" static="1">
            <x path="UInt"/>
        </NUMPAD_MULTIPLY>
        <NUMPAD_SUBTRACT public="1" static="1">
            <x path="UInt"/>
        </NUMPAD_SUBTRACT>
        <O public="1" static="1">
            <x path="UInt"/>
            <meta>
                <m n=":require">
                    <e>flash10_1</e>
                </m>
            </meta>
        </O>
        <P public="1" static="1">
            <x path="UInt"/>
            <meta>
                <m n=":require">
                    <e>flash10_1</e>
                </m>
            </meta>
        </P>
        <PAGE_DOWN public="1" static="1">
            <x path="UInt"/>
        </PAGE_DOWN>
        <PAGE_UP public="1" static="1">
            <x path="UInt"/>
        </PAGE_UP>
        <PAUSE public="1" static="1">
            <x path="UInt"/>
            <meta>
                <m n=":require">
                    <e>flash10_2</e>
                </m>
            </meta>
        </PAUSE>
        <PERIOD public="1" static="1">
            <x path="UInt"/>
            <meta>
                <m n=":require">
                    <e>flash10_1</e>
                </m>
            </meta>
        </PERIOD>
        <PLAY public="1" static="1">
            <x path="UInt"/>
            <meta>
                <m n=":require">
                    <e>flash10_2</e>
                </m>
            </meta>
        </PLAY>
        <PREVIOUS public="1" static="1">
            <x path="UInt"/>
            <meta>
                <m n=":require">
                    <e>flash10_2</e>
                </m>
            </meta>
        </PREVIOUS>
        <Q public="1" static="1">
            <x path="UInt"/>
            <meta>
                <m n=":require">
                    <e>flash10_1</e>
                </m>
            </meta>
        </Q>
        <QUOTE public="1" static="1">
            <x path="UInt"/>
            <meta>
                <m n=":require">
                    <e>flash10_1</e>
                </m>
            </meta>
        </QUOTE>
        <R public="1" static="1">
            <x path="UInt"/>
            <meta>
                <m n=":require">
                    <e>flash10_1</e>
                </m>
            </meta>
        </R>
        <RECORD public="1" static="1">
            <x path="UInt"/>
            <meta>
                <m n=":require">
                    <e>flash10_2</e>
                </m>
            </meta>
        </RECORD>
        <RED public="1" static="1">
            <x path="UInt"/>
            <meta>
                <m n=":require">
                    <e>flash10_2</e>
                </m>
            </meta>
        </RED>
        <REWIND public="1" static="1">
            <x path="UInt"/>
            <meta>
                <m n=":require">
                    <e>flash10_2</e>
                </m>
            </meta>
        </REWIND>
        <RIGHT public="1" static="1">
            <x path="UInt"/>
        </RIGHT>
        <RIGHTBRACKET public="1" static="1">
            <x path="UInt"/>
            <meta>
                <m n=":require">
                    <e>flash10_1</e>
                </m>
            </meta>
        </RIGHTBRACKET>
        <S public="1" static="1">
            <x path="UInt"/>
            <meta>
                <m n=":require">
                    <e>flash10_1</e>
                </m>
            </meta>
        </S>
        <SEARCH public="1" static="1">
            <x path="UInt"/>
            <meta>
                <m n=":require">
                    <e>flash10_2</e>
                </m>
            </meta>
        </SEARCH>
        <SEMICOLON public="1" static="1">
            <x path="UInt"/>
            <meta>
                <m n=":require">
                    <e>flash10_1</e>
                </m>
            </meta>
        </SEMICOLON>
        <SETUP public="1" static="1">
            <x path="UInt"/>
            <meta>
                <m n=":require">
                    <e>flash10_2</e>
                </m>
            </meta>
        </SETUP>
        <SHIFT public="1" static="1">
            <x path="UInt"/>
        </SHIFT>
        <SKIP_BACKWARD public="1" static="1">
            <x path="UInt"/>
            <meta>
                <m n=":require">
                    <e>flash10_2</e>
                </m>
            </meta>
        </SKIP_BACKWARD>
        <SKIP_FORWARD public="1" static="1">
            <x path="UInt"/>
            <meta>
                <m n=":require">
                    <e>flash10_2</e>
                </m>
            </meta>
        </SKIP_FORWARD>
        <SLASH public="1" static="1">
            <x path="UInt"/>
            <meta>
                <m n=":require">
                    <e>flash10_1</e>
                </m>
            </meta>
        </SLASH>
        <SPACE public="1" static="1">
            <x path="UInt"/>
        </SPACE>
        <STOP public="1" static="1">
            <x path="UInt"/>
            <meta>
                <m n=":require">
                    <e>flash10_2</e>
                </m>
            </meta>
        </STOP>
        <STRING_BEGIN public="1" static="1">
            <c path="String"/>
            <meta>
                <m n=":require">
                    <e>flash10_1</e>
                </m>
            </meta>
        </STRING_BEGIN>
        <STRING_BREAK public="1" static="1">
            <c path="String"/>
            <meta>
                <m n=":require">
                    <e>flash10_1</e>
                </m>
            </meta>
        </STRING_BREAK>
        <STRING_CLEARDISPLAY public="1" static="1">
            <c path="String"/>
            <meta>
                <m n=":require">
                    <e>flash10_1</e>
                </m>
            </meta>
        </STRING_CLEARDISPLAY>
        <STRING_CLEARLINE public="1" static="1">
            <c path="String"/>
            <meta>
                <m n=":require">
                    <e>flash10_1</e>
                </m>
            </meta>
        </STRING_CLEARLINE>
        <STRING_DELETE public="1" static="1">
            <c path="String"/>
            <meta>
                <m n=":require">
                    <e>flash10_1</e>
                </m>
            </meta>
        </STRING_DELETE>
        <STRING_DELETECHAR public="1" static="1">
            <c path="String"/>
            <meta>
                <m n=":require">
                    <e>flash10_1</e>
                </m>
            </meta>
        </STRING_DELETECHAR>
        <STRING_DELETELINE public="1" static="1">
            <c path="String"/>
            <meta>
                <m n=":require">
                    <e>flash10_1</e>
                </m>
            </meta>
        </STRING_DELETELINE>
        <STRING_DOWNARROW public="1" static="1">
            <c path="String"/>
            <meta>
                <m n=":require">
                    <e>flash10_1</e>
                </m>
            </meta>
        </STRING_DOWNARROW>
        <STRING_END public="1" static="1">
            <c path="String"/>
            <meta>
                <m n=":require">
                    <e>flash10_1</e>
                </m>
            </meta>
        </STRING_END>
        <STRING_EXECUTE public="1" static="1">
            <c path="String"/>
            <meta>
                <m n=":require">
                    <e>flash10_1</e>
                </m>
            </meta>
        </STRING_EXECUTE>
        <STRING_F1 public="1" static="1">
            <c path="String"/>
            <meta>
                <m n=":require">
                    <e>flash10_1</e>
                </m>
            </meta>
        </STRING_F1>
        <STRING_F10 public="1" static="1">
            <c path="String"/>
            <meta>
                <m n=":require">
                    <e>flash10_1</e>
                </m>
            </meta>
        </STRING_F10>
        <STRING_F11 public="1" static="1">
            <c path="String"/>
            <meta>
                <m n=":require">
                    <e>flash10_1</e>
                </m>
            </meta>
        </STRING_F11>
        <STRING_F12 public="1" static="1">
            <c path="String"/>
            <meta>
                <m n=":require">
                    <e>flash10_1</e>
                </m>
            </meta>
        </STRING_F12>
        <STRING_F13 public="1" static="1">
            <c path="String"/>
            <meta>
                <m n=":require">
                    <e>flash10_1</e>
                </m>
            </meta>
        </STRING_F13>
        <STRING_F14 public="1" static="1">
            <c path="String"/>
            <meta>
                <m n=":require">
                    <e>flash10_1</e>
                </m>
            </meta>
        </STRING_F14>
        <STRING_F15 public="1" static="1">
            <c path="String"/>
            <meta>
                <m n=":require">
                    <e>flash10_1</e>
                </m>
            </meta>
        </STRING_F15>
        <STRING_F16 public="1" static="1">
            <c path="String"/>
            <meta>
                <m n=":require">
                    <e>flash10_1</e>
                </m>
            </meta>
        </STRING_F16>
        <STRING_F17 public="1" static="1">
            <c path="String"/>
            <meta>
                <m n=":require">
                    <e>flash10_1</e>
                </m>
            </meta>
        </STRING_F17>
        <STRING_F18 public="1" static="1">
            <c path="String"/>
            <meta>
                <m n=":require">
                    <e>flash10_1</e>
                </m>
            </meta>
        </STRING_F18>
        <STRING_F19 public="1" static="1">
            <c path="String"/>
            <meta>
                <m n=":require">
                    <e>flash10_1</e>
                </m>
            </meta>
        </STRING_F19>
        <STRING_F2 public="1" static="1">
            <c path="String"/>
            <meta>
                <m n=":require">
                    <e>flash10_1</e>
                </m>
            </meta>
        </STRING_F2>
        <STRING_F20 public="1" static="1">
            <c path="String"/>
            <meta>
                <m n=":require">
                    <e>flash10_1</e>
                </m>
            </meta>
        </STRING_F20>
        <STRING_F21 public="1" static="1">
            <c path="String"/>
            <meta>
                <m n=":require">
                    <e>flash10_1</e>
                </m>
            </meta>
        </STRING_F21>
        <STRING_F22 public="1" static="1">
            <c path="String"/>
            <meta>
                <m n=":require">
                    <e>flash10_1</e>
                </m>
            </meta>
        </STRING_F22>
        <STRING_F23 public="1" static="1">
            <c path="String"/>
            <meta>
                <m n=":require">
                    <e>flash10_1</e>
                </m>
            </meta>
        </STRING_F23>
        <STRING_F24 public="1" static="1">
            <c path="String"/>
            <meta>
                <m n=":require">
                    <e>flash10_1</e>
                </m>
            </meta>
        </STRING_F24>
        <STRING_F25 public="1" static="1">
            <c path="String"/>
            <meta>
                <m n=":require">
                    <e>flash10_1</e>
                </m>
            </meta>
        </STRING_F25>
        <STRING_F26 public="1" static="1">
            <c path="String"/>
            <meta>
                <m n=":require">
                    <e>flash10_1</e>
                </m>
            </meta>
        </STRING_F26>
        <STRING_F27 public="1" static="1">
            <c path="String"/>
            <meta>
                <m n=":require">
                    <e>flash10_1</e>
                </m>
            </meta>
        </STRING_F27>
        <STRING_F28 public="1" static="1">
            <c path="String"/>
            <meta>
                <m n=":require">
                    <e>flash10_1</e>
                </m>
            </meta>
        </STRING_F28>
        <STRING_F29 public="1" static="1">
            <c path="String"/>
            <meta>
                <m n=":require">
                    <e>flash10_1</e>
                </m>
            </meta>
        </STRING_F29>
        <STRING_F3 public="1" static="1">
            <c path="String"/>
            <meta>
                <m n=":require">
                    <e>flash10_1</e>
                </m>
            </meta>
        </STRING_F3>
        <STRING_F30 public="1" static="1">
            <c path="String"/>
            <meta>
                <m n=":require">
                    <e>flash10_1</e>
                </m>
            </meta>
        </STRING_F30>
        <STRING_F31 public="1" static="1">
            <c path="String"/>
            <meta>
                <m n=":require">
                    <e>flash10_1</e>
                </m>
            </meta>
        </STRING_F31>
        <STRING_F32 public="1" static="1">
            <c path="String"/>
            <meta>
                <m n=":require">
                    <e>flash10_1</e>
                </m>
            </meta>
        </STRING_F32>
        <STRING_F33 public="1" static="1">
            <c path="String"/>
            <meta>
                <m n=":require">
                    <e>flash10_1</e>
                </m>
            </meta>
        </STRING_F33>
        <STRING_F34 public="1" static="1">
            <c path="String"/>
            <meta>
                <m n=":require">
                    <e>flash10_1</e>
                </m>
            </meta>
        </STRING_F34>
        <STRING_F35 public="1" static="1">
            <c path="String"/>
            <meta>
                <m n=":require">
                    <e>flash10_1</e>
                </m>
            </meta>
        </STRING_F35>
        <STRING_F4 public="1" static="1">
            <c path="String"/>
            <meta>
                <m n=":require">
                    <e>flash10_1</e>
                </m>
            </meta>
        </STRING_F4>
        <STRING_F5 public="1" static="1">
            <c path="String"/>
            <meta>
                <m n=":require">
                    <e>flash10_1</e>
                </m>
            </meta>
        </STRING_F5>
        <STRING_F6 public="1" static="1">
            <c path="String"/>
            <meta>
                <m n=":require">
                    <e>flash10_1</e>
                </m>
            </meta>
        </STRING_F6>
        <STRING_F7 public="1" static="1">
            <c path="String"/>
            <meta>
                <m n=":require">
                    <e>flash10_1</e>
                </m>
            </meta>
        </STRING_F7>
        <STRING_F8 public="1" static="1">
            <c path="String"/>
            <meta>
                <m n=":require">
                    <e>flash10_1</e>
                </m>
            </meta>
        </STRING_F8>
        <STRING_F9 public="1" static="1">
            <c path="String"/>
            <meta>
                <m n=":require">
                    <e>flash10_1</e>
                </m>
            </meta>
        </STRING_F9>
        <STRING_FIND public="1" static="1">
            <c path="String"/>
            <meta>
                <m n=":require">
                    <e>flash10_1</e>
                </m>
            </meta>
        </STRING_FIND>
        <STRING_HELP public="1" static="1">
            <c path="String"/>
            <meta>
                <m n=":require">
                    <e>flash10_1</e>
                </m>
            </meta>
        </STRING_HELP>
        <STRING_HOME public="1" static="1">
            <c path="String"/>
            <meta>
                <m n=":require">
                    <e>flash10_1</e>
                </m>
            </meta>
        </STRING_HOME>
        <STRING_INSERT public="1" static="1">
            <c path="String"/>
            <meta>
                <m n=":require">
                    <e>flash10_1</e>
                </m>
            </meta>
        </STRING_INSERT>
        <STRING_INSERTCHAR public="1" static="1">
            <c path="String"/>
            <meta>
                <m n=":require">
                    <e>flash10_1</e>
                </m>
            </meta>
        </STRING_INSERTCHAR>
        <STRING_INSERTLINE public="1" static="1">
            <c path="String"/>
            <meta>
                <m n=":require">
                    <e>flash10_1</e>
                </m>
            </meta>
        </STRING_INSERTLINE>
        <STRING_LEFTARROW public="1" static="1">
            <c path="String"/>
            <meta>
                <m n=":require">
                    <e>flash10_1</e>
                </m>
            </meta>
        </STRING_LEFTARROW>
        <STRING_MENU public="1" static="1">
            <c path="String"/>
            <meta>
                <m n=":require">
                    <e>flash10_1</e>
                </m>
            </meta>
        </STRING_MENU>
        <STRING_MODESWITCH public="1" static="1">
            <c path="String"/>
            <meta>
                <m n=":require">
                    <e>flash10_1</e>
                </m>
            </meta>
        </STRING_MODESWITCH>
        <STRING_NEXT public="1" static="1">
            <c path="String"/>
            <meta>
                <m n=":require">
                    <e>flash10_1</e>
                </m>
            </meta>
        </STRING_NEXT>
        <STRING_PAGEDOWN public="1" static="1">
            <c path="String"/>
            <meta>
                <m n=":require">
                    <e>flash10_1</e>
                </m>
            </meta>
        </STRING_PAGEDOWN>
        <STRING_PAGEUP public="1" static="1">
            <c path="String"/>
            <meta>
                <m n=":require">
                    <e>flash10_1</e>
                </m>
            </meta>
        </STRING_PAGEUP>
        <STRING_PAUSE public="1" static="1">
            <c path="String"/>
            <meta>
                <m n=":require">
                    <e>flash10_1</e>
                </m>
            </meta>
        </STRING_PAUSE>
        <STRING_PREV public="1" static="1">
            <c path="String"/>
            <meta>
                <m n=":require">
                    <e>flash10_1</e>
                </m>
            </meta>
        </STRING_PREV>
        <STRING_PRINT public="1" static="1">
            <c path="String"/>
            <meta>
                <m n=":require">
                    <e>flash10_1</e>
                </m>
            </meta>
        </STRING_PRINT>
        <STRING_PRINTSCREEN public="1" static="1">
            <c path="String"/>
            <meta>
                <m n=":require">
                    <e>flash10_1</e>
                </m>
            </meta>
        </STRING_PRINTSCREEN>
        <STRING_REDO public="1" static="1">
            <c path="String"/>
            <meta>
                <m n=":require">
                    <e>flash10_1</e>
                </m>
            </meta>
        </STRING_REDO>
        <STRING_RESET public="1" static="1">
            <c path="String"/>
            <meta>
                <m n=":require">
                    <e>flash10_1</e>
                </m>
            </meta>
        </STRING_RESET>
        <STRING_RIGHTARROW public="1" static="1">
            <c path="String"/>
            <meta>
                <m n=":require">
                    <e>flash10_1</e>
                </m>
            </meta>
        </STRING_RIGHTARROW>
        <STRING_SCROLLLOCK public="1" static="1">
            <c path="String"/>
            <meta>
                <m n=":require">
                    <e>flash10_1</e>
                </m>
            </meta>
        </STRING_SCROLLLOCK>
        <STRING_SELECT public="1" static="1">
            <c path="String"/>
            <meta>
                <m n=":require">
                    <e>flash10_1</e>
                </m>
            </meta>
        </STRING_SELECT>
        <STRING_STOP public="1" static="1">
            <c path="String"/>
            <meta>
                <m n=":require">
                    <e>flash10_1</e>
                </m>
            </meta>
        </STRING_STOP>
        <STRING_SYSREQ public="1" static="1">
            <c path="String"/>
            <meta>
                <m n=":require">
                    <e>flash10_1</e>
                </m>
            </meta>
        </STRING_SYSREQ>
        <STRING_SYSTEM public="1" static="1">
            <c path="String"/>
            <meta>
                <m n=":require">
                    <e>flash10_1</e>
                </m>
            </meta>
        </STRING_SYSTEM>
        <STRING_UNDO public="1" static="1">
            <c path="String"/>
            <meta>
                <m n=":require">
                    <e>flash10_1</e>
                </m>
            </meta>
        </STRING_UNDO>
        <STRING_UPARROW public="1" static="1">
            <c path="String"/>
            <meta>
                <m n=":require">
                    <e>flash10_1</e>
                </m>
            </meta>
        </STRING_UPARROW>
        <STRING_USER public="1" static="1">
            <c path="String"/>
            <meta>
                <m n=":require">
                    <e>flash10_1</e>
                </m>
            </meta>
        </STRING_USER>
        <SUBTITLE public="1" static="1">
            <x path="UInt"/>
            <meta>
                <m n=":require">
                    <e>flash10_2</e>
                </m>
            </meta>
        </SUBTITLE>
        <T public="1" static="1">
            <x path="UInt"/>
            <meta>
                <m n=":require">
                    <e>flash10_1</e>
                </m>
            </meta>
        </T>
        <TAB public="1" static="1">
            <x path="UInt"/>
        </TAB>
        <U public="1" static="1">
            <x path="UInt"/>
            <meta>
                <m n=":require">
                    <e>flash10_1</e>
                </m>
            </meta>
        </U>
        <UP public="1" static="1">
            <x path="UInt"/>
        </UP>
        <V public="1" static="1">
            <x path="UInt"/>
            <meta>
                <m n=":require">
                    <e>flash10_1</e>
                </m>
            </meta>
        </V>
        <VOD public="1" static="1">
            <x path="UInt"/>
            <meta>
                <m n=":require">
                    <e>flash10_2</e>
                </m>
            </meta>
        </VOD>
        <W public="1" static="1">
            <x path="UInt"/>
            <meta>
                <m n=":require">
                    <e>flash10_1</e>
                </m>
            </meta>
        </W>
        <X public="1" static="1">
            <x path="UInt"/>
            <meta>
                <m n=":require">
                    <e>flash10_1</e>
                </m>
            </meta>
        </X>
        <Y public="1" static="1">
            <x path="UInt"/>
            <meta>
                <m n=":require">
                    <e>flash10_1</e>
                </m>
            </meta>
        </Y>
        <YELLOW public="1" static="1">
            <x path="UInt"/>
            <meta>
                <m n=":require">
                    <e>flash10_2</e>
                </m>
            </meta>
        </YELLOW>
        <Z public="1" static="1">
            <x path="UInt"/>
            <meta>
                <m n=":require">
                    <e>flash10_1</e>
                </m>
            </meta>
        </Z>
        <capsLock public="1" set="null" static="1">
            <x path="Bool"/>
        </capsLock>
        <hasVirtualKeyboard public="1" set="null" static="1">
            <x path="Bool"/>
            <meta>
                <m n=":require">
                    <e>flash10_1</e>
                </m>
            </meta>
        </hasVirtualKeyboard>
        <numLock public="1" set="null" static="1">
            <x path="Bool"/>
        </numLock>
        <physicalKeyboardType public="1" set="null" static="1">
            <e path="flash.ui.KeyboardType"/>
            <meta>
                <m n=":require">
                    <e>flash10_1</e>
                </m>
            </meta>
        </physicalKeyboardType>
        <isAccessible public="1" set="method" static="1">
            <f a="">
                <x path="Bool"/>
            </f>
        </isAccessible>
    </class>
    <enum path="flash.ui.KeyboardType" params="" file="/usr/lib/haxe/std/flash/ui/KeyboardType.hx">
        <NONE/>
        <KEYPAD/>
        <ALPHANUMERIC/>
        <meta>
            <m n=":fakeEnum">
                <e>String</e>
            </m>
        </meta>
    </enum>
    <class path="flash.utils.IDataInput" params="" file="/usr/lib/haxe/std/flash/utils/IDataInput.hx" extern="1"
           interface="1">
        <readUnsignedShort public="1" set="method">
            <f a="">
                <x path="UInt"/>
            </f>
        </readUnsignedShort>
        <readUnsignedInt public="1" set="method">
            <f a="">
                <x path="UInt"/>
            </f>
        </readUnsignedInt>
        <readUnsignedByte public="1" set="method">
            <f a="">
                <x path="UInt"/>
            </f>
        </readUnsignedByte>
        <readUTFBytes public="1" set="method">
            <f a="length">
                <x path="UInt"/>
                <c path="String"/>
            </f>
        </readUTFBytes>
        <readUTF public="1" set="method">
            <f a="">
                <c path="String"/>
            </f>
        </readUTF>
        <readShort public="1" set="method">
            <f a="">
                <x path="Int"/>
            </f>
        </readShort>
        <readObject public="1" set="method">
            <f a="">
                <d/>
            </f>
        </readObject>
        <readMultiByte public="1" set="method">
            <f a="length:charSet">
                <x path="UInt"/>
                <c path="String"/>
                <c path="String"/>
            </f>
        </readMultiByte>
        <readInt public="1" set="method">
            <f a="">
                <x path="Int"/>
            </f>
        </readInt>
        <readFloat public="1" set="method">
            <f a="">
                <x path="Float"/>
            </f>
        </readFloat>
        <readDouble public="1" set="method">
            <f a="">
                <x path="Float"/>
            </f>
        </readDouble>
        <readBytes public="1" set="method">
            <f a="bytes:?offset:?length">
                <c path="flash.utils.ByteArray"/>
                <x path="UInt"/>
                <x path="UInt"/>
                <x path="Void"/>
            </f>
        </readBytes>
        <readByte public="1" set="method">
            <f a="">
                <x path="Int"/>
            </f>
        </readByte>
        <readBoolean public="1" set="method">
            <f a="">
                <x path="Bool"/>
            </f>
        </readBoolean>
        <objectEncoding public="1">
            <x path="UInt"/>
        </objectEncoding>
        <endian public="1">
            <e path="flash.utils.Endian"/>
        </endian>
        <bytesAvailable public="1" set="null">
            <x path="UInt"/>
        </bytesAvailable>
    </class>
    <class path="flash.utils.IDataInput2" params="" file="/usr/lib/haxe/std/flash/utils/IDataInput2.hx" extern="1"
           interface="1">
        <extends path="flash.utils.IDataInput"/>
    </class>
    <class path="flash.utils.IDataOutput" params="" file="/usr/lib/haxe/std/flash/utils/IDataOutput.hx" extern="1"
           interface="1">
        <writeUnsignedInt public="1" set="method">
            <f a="value">
                <x path="UInt"/>
                <x path="Void"/>
            </f>
        </writeUnsignedInt>
        <writeUTFBytes public="1" set="method">
            <f a="value">
                <c path="String"/>
                <x path="Void"/>
            </f>
        </writeUTFBytes>
        <writeUTF public="1" set="method">
            <f a="value">
                <c path="String"/>
                <x path="Void"/>
            </f>
        </writeUTF>
        <writeShort public="1" set="method">
            <f a="value">
                <x path="Int"/>
                <x path="Void"/>
            </f>
        </writeShort>
        <writeObject public="1" set="method">
            <f a="object">
                <d/>
                <x path="Void"/>
            </f>
        </writeObject>
        <writeMultiByte public="1" set="method">
            <f a="value:charSet">
                <c path="String"/>
                <c path="String"/>
                <x path="Void"/>
            </f>
        </writeMultiByte>
        <writeInt public="1" set="method">
            <f a="value">
                <x path="Int"/>
                <x path="Void"/>
            </f>
        </writeInt>
        <writeFloat public="1" set="method">
            <f a="value">
                <x path="Float"/>
                <x path="Void"/>
            </f>
        </writeFloat>
        <writeDouble public="1" set="method">
            <f a="value">
                <x path="Float"/>
                <x path="Void"/>
            </f>
        </writeDouble>
        <writeBytes public="1" set="method">
            <f a="bytes:?offset:?length">
                <c path="flash.utils.ByteArray"/>
                <x path="UInt"/>
                <x path="UInt"/>
                <x path="Void"/>
            </f>
        </writeBytes>
        <writeByte public="1" set="method">
            <f a="value">
                <x path="Int"/>
                <x path="Void"/>
            </f>
        </writeByte>
        <writeBoolean public="1" set="method">
            <f a="value">
                <x path="Bool"/>
                <x path="Void"/>
            </f>
        </writeBoolean>
        <objectEncoding public="1">
            <x path="UInt"/>
        </objectEncoding>
        <endian public="1">
            <e path="flash.utils.Endian"/>
        </endian>
    </class>
    <class path="flash.utils.IDataOutput2" params="" file="/usr/lib/haxe/std/flash/utils/IDataOutput2.hx" extern="1"
           interface="1">
        <extends path="flash.utils.IDataOutput"/>
    </class>
    <class path="flash.utils.ByteArray" params="" file="/usr/lib/haxe/std/flash/utils/ByteArray.hx" extern="1">
        <implements path="flash.utils.IDataInput2"/>
        <implements path="flash.utils.IDataOutput2"/>
        <defaultObjectEncoding public="1" static="1">
            <x path="UInt"/>
        </defaultObjectEncoding>
        <writeUnsignedInt public="1" set="method">
            <f a="value">
                <x path="UInt"/>
                <x path="Void"/>
            </f>
        </writeUnsignedInt>
        <writeUTFBytes public="1" set="method">
            <f a="value">
                <c path="String"/>
                <x path="Void"/>
            </f>
        </writeUTFBytes>
        <writeUTF public="1" set="method">
            <f a="value">
                <c path="String"/>
                <x path="Void"/>
            </f>
        </writeUTF>
        <writeShort public="1" set="method">
            <f a="value">
                <x path="Int"/>
                <x path="Void"/>
            </f>
        </writeShort>
        <writeObject public="1" set="method">
            <f a="object">
                <d/>
                <x path="Void"/>
            </f>
        </writeObject>
        <writeMultiByte public="1" set="method">
            <f a="value:charSet">
                <c path="String"/>
                <c path="String"/>
                <x path="Void"/>
            </f>
        </writeMultiByte>
        <writeInt public="1" set="method">
            <f a="value">
                <x path="Int"/>
                <x path="Void"/>
            </f>
        </writeInt>
        <writeFloat public="1" set="method">
            <f a="value">
                <x path="Float"/>
                <x path="Void"/>
            </f>
        </writeFloat>
        <writeDouble public="1" set="method">
            <f a="value">
                <x path="Float"/>
                <x path="Void"/>
            </f>
        </writeDouble>
        <writeBytes public="1" set="method">
            <f a="bytes:?offset:?length">
                <c path="flash.utils.ByteArray"/>
                <x path="UInt"/>
                <x path="UInt"/>
                <x path="Void"/>
            </f>
        </writeBytes>
        <writeByte public="1" set="method">
            <f a="value">
                <x path="Int"/>
                <x path="Void"/>
            </f>
        </writeByte>
        <writeBoolean public="1" set="method">
            <f a="value">
                <x path="Bool"/>
                <x path="Void"/>
            </f>
        </writeBoolean>
        <uncompress public="1" set="method">
            <f a="?algorithm">
                <e path="flash.utils.CompressionAlgorithm"/>
                <x path="Void"/>
            </f>
        </uncompress>
        <toString public="1" set="method">
            <f a="">
                <c path="String"/>
            </f>
        </toString>
        <readUnsignedShort public="1" set="method">
            <f a="">
                <x path="UInt"/>
            </f>
        </readUnsignedShort>
        <readUnsignedInt public="1" set="method">
            <f a="">
                <x path="UInt"/>
            </f>
        </readUnsignedInt>
        <readUnsignedByte public="1" set="method">
            <f a="">
                <x path="UInt"/>
            </f>
        </readUnsignedByte>
        <readUTFBytes public="1" set="method">
            <f a="length">
                <x path="UInt"/>
                <c path="String"/>
            </f>
        </readUTFBytes>
        <readUTF public="1" set="method">
            <f a="">
                <c path="String"/>
            </f>
        </readUTF>
        <readShort public="1" set="method">
            <f a="">
                <x path="Int"/>
            </f>
        </readShort>
        <readObject public="1" set="method">
            <f a="">
                <d/>
            </f>
        </readObject>
        <readMultiByte public="1" set="method">
            <f a="length:charSet">
                <x path="UInt"/>
                <c path="String"/>
                <c path="String"/>
            </f>
        </readMultiByte>
        <readInt public="1" set="method">
            <f a="">
                <x path="Int"/>
            </f>
        </readInt>
        <readFloat public="1" set="method">
            <f a="">
                <x path="Float"/>
            </f>
        </readFloat>
        <readDouble public="1" set="method">
            <f a="">
                <x path="Float"/>
            </f>
        </readDouble>
        <readBytes public="1" set="method">
            <f a="bytes:?offset:?length">
                <c path="flash.utils.ByteArray"/>
                <x path="UInt"/>
                <x path="UInt"/>
                <x path="Void"/>
            </f>
        </readBytes>
        <readByte public="1" set="method">
            <f a="">
                <x path="Int"/>
            </f>
        </readByte>
        <readBoolean public="1" set="method">
            <f a="">
                <x path="Bool"/>
            </f>
        </readBoolean>
        <inflate public="1" set="method">
            <f a="">
                <x path="Void"/>
            </f>
            <meta>
                <m n=":require">
                    <e>flash10</e>
                </m>
            </meta>
        </inflate>
        <deflate public="1" set="method">
            <f a="">
                <x path="Void"/>
            </f>
            <meta>
                <m n=":require">
                    <e>flash10</e>
                </m>
            </meta>
        </deflate>
        <compress public="1" set="method">
            <f a="?algorithm">
                <e path="flash.utils.CompressionAlgorithm"/>
                <x path="Void"/>
            </f>
        </compress>
        <clear public="1" set="method">
            <f a="">
                <x path="Void"/>
            </f>
            <meta>
                <m n=":require">
                    <e>flash10</e>
                </m>
            </meta>
        </clear>
        <position public="1">
            <x path="UInt"/>
        </position>
        <objectEncoding public="1">
            <x path="UInt"/>
        </objectEncoding>
        <length public="1">
            <x path="UInt"/>
        </length>
        <endian public="1">
            <e path="flash.utils.Endian"/>
        </endian>
        <bytesAvailable public="1" set="null">
            <x path="UInt"/>
        </bytesAvailable>
        <new public="1" set="method">
            <f a="">
                <x path="Void"/>
            </f>
        </new>
    </class>
    <enum path="flash.utils.CompressionAlgorithm" params=""
          file="/Users/jbrichardet/Development/NME/flash/utils/CompressionAlgorithm.hx">
        <ZLIB/>
        <LZMA/>
        <DEFLATE/>
        <meta>
            <m n=":fakeEnum">
                <e>String</e>
            </m>
            <m n=":require">
                <e>flash11</e>
            </m>
        </meta>
    </enum>
    <class path="flash.utils.Dictionary" params="" file="/usr/lib/haxe/std/flash/utils/Dictionary.hx" extern="1">
        <new public="1" set="method">
            <f a="?weakKeys">
                <x path="Bool"/>
                <x path="Void"/>
            </f>
        </new>
        <haxe_dynamic>
            <d/>
        </haxe_dynamic>
    </class>
    <enum path="flash.utils.Endian" params="" file="/usr/lib/haxe/std/flash/utils/Endian.hx">
        <LITTLE_ENDIAN/>
        <BIG_ENDIAN/>
        <meta>
            <m n=":fakeEnum">
                <e>String</e>
            </m>
        </meta>
    </enum>
    <typedef path="flash.utils.Function" params="" file="/usr/lib/haxe/std/flash/utils/Function.hx">
        <d/>
    </typedef>
    <class path="flash.utils.Namespace" params="" file="/usr/lib/haxe/std/flash/utils/Namespace.hx" extern="1">
        <uri public="1" set="null">
            <c path="String"/>
        </uri>
        <prefix public="1" set="null">
            <d/>
        </prefix>
        <new public="1" set="method">
            <f a="?prefix:?uri">
                <d/>
                <d/>
                <x path="Void"/>
            </f>
        </new>
        <meta>
            <m n=":final"/>
        </meta>
    </class>
    <typedef path="flash.utils.Object" params="" file="/usr/lib/haxe/std/flash/utils/Object.hx">
        <d/>
    </typedef>
    <class path="flash.utils.QName" params="" file="/usr/lib/haxe/std/flash/utils/QName.hx" extern="1">
        <uri public="1" set="null">
            <d/>
        </uri>
        <localName public="1" set="null">
            <c path="String"/>
        </localName>
        <new public="1" set="method">
            <f a="?namespace:?name">
                <d/>
                <d/>
                <x path="Void"/>
            </f>
        </new>
        <meta>
            <m n=":final"/>
        </meta>
    </class>
    <class path="flash.utils.RegExp" params="" file="/usr/lib/haxe/std/flash/utils/RegExp.hx" extern="1">
        <test public="1" set="method">
            <f a="?s">
                <c path="String"/>
                <x path="Bool"/>
            </f>
            <meta>
                <m n=":ns">
                    <e>"http://adobe.com/AS3/2006/builtin"</e>
                </m>
            </meta>
        </test>
        <exec public="1" set="method">
            <f a="?s">
                <c path="String"/>
                <d/>
            </f>
            <meta>
                <m n=":ns">
                    <e>"http://adobe.com/AS3/2006/builtin"</e>
                </m>
            </meta>
        </exec>
        <source public="1" set="null">
            <c path="String"/>
        </source>
        <multiline public="1" set="null">
            <x path="Bool"/>
        </multiline>
        <lastIndex public="1">
            <x path="Int"/>
        </lastIndex>
        <ignoreCase public="1" set="null">
            <x path="Bool"/>
        </ignoreCase>
        <global public="1" set="null">
            <x path="Bool"/>
        </global>
        <extended public="1" set="null">
            <x path="Bool"/>
        </extended>
        <dotall public="1" set="null">
            <x path="Bool"/>
        </dotall>
        <new public="1" set="method">
            <f a="?pattern:?options">
                <d/>
                <d/>
                <x path="Void"/>
            </f>
        </new>
        <meta>
            <m n=":native">
                <e>"RegExp"</e>
            </m>
        </meta>
        <haxe_dynamic>
            <d/>
        </haxe_dynamic>
    </class>
    <class path="flash.utils.Timer" params="" file="/usr/lib/haxe/std/flash/utils/Timer.hx" extern="1">
        <extends path="flash.events.EventDispatcher"/>
        <stop public="1" set="method">
            <f a="">
                <x path="Void"/>
            </f>
        </stop>
        <start public="1" set="method">
            <f a="">
                <x path="Void"/>
            </f>
        </start>
        <reset public="1" set="method">
            <f a="">
                <x path="Void"/>
            </f>
        </reset>
        <running public="1" set="null">
            <x path="Bool"/>
        </running>
        <repeatCount public="1">
            <x path="Int"/>
        </repeatCount>
        <delay public="1">
            <x path="Float"/>
        </delay>
        <currentCount public="1" set="null">
            <x path="Int"/>
        </currentCount>
        <new public="1" set="method">
            <f a="delay:?repeatCount">
                <x path="Float"/>
                <x path="Int"/>
                <x path="Void"/>
            </f>
        </new>
    </class>
    <class path="flash.xml.XML" params="" file="/usr/lib/haxe/std/flash/xml/XML.hx" extern="1">
        <ignoreComments public="1" static="1">
            <x path="Bool"/>
        </ignoreComments>
        <ignoreProcessingInstructions public="1" static="1">
            <x path="Bool"/>
        </ignoreProcessingInstructions>
        <ignoreWhitespace public="1" static="1">
            <x path="Bool"/>
        </ignoreWhitespace>
        <prettyIndent public="1" static="1">
            <x path="Int"/>
        </prettyIndent>
        <prettyPrinting public="1" static="1">
            <x path="Bool"/>
        </prettyPrinting>
        <defaultSettings public="1" set="method" static="1">
            <f a="">
                <d/>
            </f>
        </defaultSettings>
        <setSettings public="1" set="method" static="1">
            <f a="?o">
                <d/>
                <x path="Void"/>
            </f>
        </setSettings>
        <settings public="1" set="method" static="1">
            <f a="">
                <d/>
            </f>
        </settings>
        <valueOf public="1" set="method">
            <f a="">
                <c path="flash.xml.XML"/>
            </f>
        </valueOf>
        <toXMLString public="1" set="method">
            <f a="">
                <c path="String"/>
            </f>
        </toXMLString>
        <toString public="1" set="method">
            <f a="">
                <c path="String"/>
            </f>
        </toString>
        <toJSON public="1" set="method">
            <f a="k">
                <c path="String"/>
                <d/>
            </f>
            <meta>
                <m n=":require">
                    <e>flash11</e>
                </m>
            </meta>
        </toJSON>
        <text public="1" set="method">
            <f a="">
                <c path="flash.xml.XMLList"/>
            </f>
        </text>
        <setNotification public="1" set="method">
            <f a="f">
                <t path="flash.utils.Function"/>
                <d/>
            </f>
        </setNotification>
        <setNamespace public="1" set="method">
            <f a="ns">
                <d/>
                <x path="Void"/>
            </f>
        </setNamespace>
        <setName public="1" set="method">
            <f a="name">
                <d/>
                <x path="Void"/>
            </f>
        </setName>
        <setLocalName public="1" set="method">
            <f a="name">
                <d/>
                <x path="Void"/>
            </f>
        </setLocalName>
        <setChildren public="1" set="method">
            <f a="value">
                <d/>
                <c path="flash.xml.XML"/>
            </f>
        </setChildren>
        <replace public="1" set="method">
            <f a="propertyName:value">
                <d/>
                <d/>
                <c path="flash.xml.XML"/>
            </f>
        </replace>
        <removeNamespace public="1" set="method">
            <f a="ns">
                <d/>
                <c path="flash.xml.XML"/>
            </f>
        </removeNamespace>
        <processingInstructions public="1" set="method">
            <f a="?name">
                <d/>
                <c path="flash.xml.XMLList"/>
            </f>
        </processingInstructions>
        <prependChild public="1" set="method">
            <f a="value">
                <d/>
                <c path="flash.xml.XML"/>
            </f>
        </prependChild>
        <parent public="1" set="method">
            <f a="">
                <c path="flash.xml.XML"/>
            </f>
        </parent>
        <notification public="1" set="method">
            <f a="">
                <t path="flash.utils.Function"/>
            </f>
        </notification>
        <normalize public="1" set="method">
            <f a="">
                <c path="flash.xml.XML"/>
            </f>
        </normalize>
        <nodeKind public="1" set="method">
            <f a="">
                <c path="String"/>
            </f>
        </nodeKind>
        <namespaceDeclarations public="1" set="method">
            <f a="">
                <c path="Array">
                    <d/>
                </c>
            </f>
        </namespaceDeclarations>
        <namespace public="1" set="method">
            <f a="?prefix">
                <d/>
                <c path="flash.utils.Namespace"/>
            </f>
        </namespace>
        <name public="1" set="method">
            <f a="">
                <t path="flash.utils.Object"/>
            </f>
        </name>
        <localName public="1" set="method">
            <f a="">
                <t path="flash.utils.Object"/>
            </f>
        </localName>
        <length public="1" set="method">
            <f a="">
                <x path="Int"/>
            </f>
        </length>
        <insertChildBefore public="1" set="method">
            <f a="child1:child2">
                <d/>
                <d/>
                <d/>
            </f>
        </insertChildBefore>
        <insertChildAfter public="1" set="method">
            <f a="child1:child2">
                <d/>
                <d/>
                <d/>
            </f>
        </insertChildAfter>
        <inScopeNamespaces public="1" set="method">
            <f a="">
                <c path="Array">
                    <d/>
                </c>
            </f>
        </inScopeNamespaces>
        <hasSimpleContent public="1" set="method">
            <f a="">
                <x path="Bool"/>
            </f>
        </hasSimpleContent>
        <hasComplexContent public="1" set="method">
            <f a="">
                <x path="Bool"/>
            </f>
        </hasComplexContent>
        <elements public="1" set="method">
            <f a="?name">
                <d/>
                <c path="flash.xml.XMLList"/>
            </f>
        </elements>
        <descendants public="1" set="method">
            <f a="?name">
                <d/>
                <c path="flash.xml.XMLList"/>
            </f>
        </descendants>
        <copy public="1" set="method">
            <f a="">
                <c path="flash.xml.XML"/>
            </f>
        </copy>
        <contains public="1" set="method">
            <f a="value">
                <d/>
                <x path="Bool"/>
            </f>
        </contains>
        <comments public="1" set="method">
            <f a="">
                <c path="flash.xml.XMLList"/>
            </f>
        </comments>
        <children public="1" set="method">
            <f a="">
                <c path="flash.xml.XMLList"/>
            </f>
        </children>
        <childIndex public="1" set="method">
            <f a="">
                <x path="Int"/>
            </f>
        </childIndex>
        <child public="1" set="method">
            <f a="propertyName">
                <d/>
                <c path="flash.xml.XMLList"/>
            </f>
        </child>
        <attributes public="1" set="method">
            <f a="">
                <c path="flash.xml.XMLList"/>
            </f>
        </attributes>
        <attribute public="1" set="method">
            <f a="arg">
                <d/>
                <c path="flash.xml.XMLList"/>
            </f>
        </attribute>
        <appendChild public="1" set="method">
            <f a="child">
                <d/>
                <c path="flash.xml.XML"/>
            </f>
        </appendChild>
        <addNamespace public="1" set="method">
            <f a="ns">
                <d/>
                <c path="flash.xml.XML"/>
            </f>
        </addNamespace>
        <new public="1" set="method">
            <f a="?value">
                <d/>
                <x path="Void"/>
            </f>
        </new>
        <meta>
            <m n=":final"/>
        </meta>
        <haxe_dynamic>
            <c path="flash.xml.XMLList"/>
        </haxe_dynamic>
    </class>
    <class path="flash.xml.XMLList" params="" file="/usr/lib/haxe/std/flash/xml/XMLList.hx" extern="1">
        <valueOf public="1" set="method">
            <f a="">
                <c path="flash.xml.XMLList"/>
            </f>
        </valueOf>
        <toXMLString public="1" set="method">
            <f a="">
                <c path="String"/>
            </f>
        </toXMLString>
        <toString public="1" set="method">
            <f a="">
                <c path="String"/>
            </f>
        </toString>
        <toJSON public="1" set="method">
            <f a="k">
                <c path="String"/>
                <d/>
            </f>
            <meta>
                <m n=":require">
                    <e>flash11</e>
                </m>
            </meta>
        </toJSON>
        <text public="1" set="method">
            <f a="">
                <c path="flash.xml.XMLList"/>
            </f>
        </text>
        <setNamespace public="1" set="method">
            <f a="ns">
                <d/>
                <x path="Void"/>
            </f>
        </setNamespace>
        <setName public="1" set="method">
            <f a="name">
                <d/>
                <x path="Void"/>
            </f>
        </setName>
        <setLocalName public="1" set="method">
            <f a="name">
                <d/>
                <x path="Void"/>
            </f>
        </setLocalName>
        <setChildren public="1" set="method">
            <f a="value">
                <d/>
                <c path="flash.xml.XML"/>
            </f>
        </setChildren>
        <replace public="1" set="method">
            <f a="propertyName:value">
                <d/>
                <d/>
                <c path="flash.xml.XML"/>
            </f>
        </replace>
        <removeNamespace public="1" set="method">
            <f a="ns">
                <d/>
                <c path="flash.xml.XML"/>
            </f>
        </removeNamespace>
        <processingInstructions public="1" set="method">
            <f a="?name">
                <d/>
                <c path="flash.xml.XMLList"/>
            </f>
        </processingInstructions>
        <prependChild public="1" set="method">
            <f a="value">
                <d/>
                <c path="flash.xml.XML"/>
            </f>
        </prependChild>
        <parent public="1" set="method">
            <f a="">
                <c path="flash.xml.XML"/>
            </f>
        </parent>
        <normalize public="1" set="method">
            <f a="">
                <c path="flash.xml.XMLList"/>
            </f>
        </normalize>
        <nodeKind public="1" set="method">
            <f a="">
                <c path="String"/>
            </f>
        </nodeKind>
        <namespaceDeclarations public="1" set="method">
            <f a="">
                <c path="Array">
                    <d/>
                </c>
            </f>
        </namespaceDeclarations>
        <namespace public="1" set="method">
            <f a="?prefix">
                <d/>
                <c path="flash.utils.Namespace"/>
            </f>
        </namespace>
        <name public="1" set="method">
            <f a="">
                <t path="flash.utils.Object"/>
            </f>
        </name>
        <localName public="1" set="method">
            <f a="">
                <t path="flash.utils.Object"/>
            </f>
        </localName>
        <length public="1" set="method">
            <f a="">
                <x path="Int"/>
            </f>
        </length>
        <insertChildBefore public="1" set="method">
            <f a="child1:child2">
                <d/>
                <d/>
                <d/>
            </f>
        </insertChildBefore>
        <insertChildAfter public="1" set="method">
            <f a="child1:child2">
                <d/>
                <d/>
                <d/>
            </f>
        </insertChildAfter>
        <inScopeNamespaces public="1" set="method">
            <f a="">
                <c path="Array">
                    <d/>
                </c>
            </f>
        </inScopeNamespaces>
        <hasSimpleContent public="1" set="method">
            <f a="">
                <x path="Bool"/>
            </f>
        </hasSimpleContent>
        <hasComplexContent public="1" set="method">
            <f a="">
                <x path="Bool"/>
            </f>
        </hasComplexContent>
        <elements public="1" set="method">
            <f a="?name">
                <d/>
                <c path="flash.xml.XMLList"/>
            </f>
        </elements>
        <descendants public="1" set="method">
            <f a="?name">
                <d/>
                <c path="flash.xml.XMLList"/>
            </f>
        </descendants>
        <copy public="1" set="method">
            <f a="">
                <c path="flash.xml.XMLList"/>
            </f>
        </copy>
        <contains public="1" set="method">
            <f a="value">
                <d/>
                <x path="Bool"/>
            </f>
        </contains>
        <comments public="1" set="method">
            <f a="">
                <c path="flash.xml.XMLList"/>
            </f>
        </comments>
        <children public="1" set="method">
            <f a="">
                <c path="flash.xml.XMLList"/>
            </f>
        </children>
        <childIndex public="1" set="method">
            <f a="">
                <x path="Int"/>
            </f>
        </childIndex>
        <child public="1" set="method">
            <f a="propertyName">
                <d/>
                <c path="flash.xml.XMLList"/>
            </f>
        </child>
        <attributes public="1" set="method">
            <f a="">
                <c path="flash.xml.XMLList"/>
            </f>
        </attributes>
        <attribute public="1" set="method">
            <f a="arg">
                <d/>
                <c path="flash.xml.XMLList"/>
            </f>
        </attribute>
        <appendChild public="1" set="method">
            <f a="child">
                <d/>
                <c path="flash.xml.XML"/>
            </f>
        </appendChild>
        <addNamespace public="1" set="method">
            <f a="ns">
                <d/>
                <c path="flash.xml.XML"/>
            </f>
        </addNamespace>
        <new public="1" set="method">
            <f a="?value">
                <d/>
                <x path="Void"/>
            </f>
        </new>
        <meta>
            <m n=":final"/>
        </meta>
    </class>
    <class path="format.display.FrameLabel" params=""
           file="/Users/jbrichardet/Development/NME/format/display/FrameLabel.hx">
        <name public="1" set="null">
            <c path="String"/>
        </name>
        <frame public="1" set="null">
            <x path="Int"/>
        </frame>
        <new public="1" set="method" line="11">
            <f a="frame:name">
                <x path="Int"/>
                <c path="String"/>
                <x path="Void"/>
            </f>
        </new>
    </class>
    <class path="format.display.MovieClip" params=""
           file="/Users/jbrichardet/Development/NME/format/display/MovieClip.hx">
        <extends path="flash.display.Sprite"/>
        <unflatten public="1" set="method" line="97">
            <f a="">
                <x path="Void"/>
            </f>
        </unflatten>
        <stop public="1" set="method" line="90">
            <f a="">
                <x path="Void"/>
            </f>
        </stop>
        <prevFrame public="1" set="method" line="83">
            <f a="">
                <x path="Void"/>
            </f>
        </prevFrame>
        <play public="1" set="method" line="76">
            <f a="">
                <x path="Void"/>
            </f>
        </play>
        <nextFrame public="1" set="method" line="62">
            <f a="">
                <x path="Void"/>
            </f>
        </nextFrame>
        <gotoAndStop public="1" set="method" line="55">
            <f a="frame:?scene">
                <d/>
                <c path="String"/>
                <x path="Void"/>
            </f>
        </gotoAndStop>
        <gotoAndPlay public="1" set="method" line="48">
            <f a="frame:?scene">
                <d/>
                <c path="String"/>
                <x path="Void"/>
            </f>
        </gotoAndPlay>
        <flatten public="1" set="method" line="41">
            <f a="">
                <x path="Void"/>
            </f>
        </flatten>
        <trackAsMenu public="1">
            <x path="Bool"/>
        </trackAsMenu>
        <totalFrames public="1" set="null">
            <x path="Int"/>
        </totalFrames>
        <framesLoaded public="1" set="null">
            <x path="Int"/>
        </framesLoaded>
        <enabled public="1">
            <x path="Bool"/>
        </enabled>
        <currentLabels public="1" set="null">
            <c path="Array">
                <c path="format.display.FrameLabel"/>
            </c>
        </currentLabels>
        <currentLabel public="1" set="null">
            <c path="String"/>
        </currentLabel>
        <currentFrameLabel public="1" set="null">
            <c path="String"/>
        </currentFrameLabel>
        <currentFrame public="1" set="null">
            <x path="Int"/>
        </currentFrame>
        <new set="method" line="34">
            <f a="">
                <x path="Void"/>
            </f>
        </new>
        <haxe_doc>* Base class for MovieClip-related format libraries
            *
            * Cannot use flash.display.MovieClip, because it does
            * not allow the addition for frames or frame labels at
            * runtime, asynchronously
        </haxe_doc>
    </class>
    <class path="haxe.EnumTools" params="" file="/usr/lib/haxe/std/haxe/EnumTools.hx" extern="1">
        <getName public="1" params="T" get="inline" set="null" line="41" static="1">
            <f a="e">
                <x path="Enum">
                    <c path="getName.T"/>
                </x>
                <c path="String"/>
            </f>
            <haxe_doc>Returns the name of enum [e], including its path.

                If [e] is inside a package, the package structure is returned dot-
                separated, with another dot separating the enum name:
                pack1.pack2.(...).packN.EnumName
                If [e] is a sub-type of a haxe module, that module is not part of the
                package structure.

                If [e] has no package, the enum name is returned.

                If [e] is null, the result is unspecified.

                The enum name does not include any type parameters.
            </haxe_doc>
        </getName>
        <createByName public="1" params="T" get="inline" set="null" line="54" static="1">
            <f a="e:constr:?params">
                <x path="Enum">
                    <c path="createByName.T"/>
                </x>
                <c path="String"/>
                <c path="Array">
                    <d/>
                </c>
                <c path="createByName.T"/>
            </f>
            <haxe_doc>Creates an instance of enum [e] by calling its constructor [constr] with
                arguments [params].

                If [e] or [constr] is null, or if enum [e] has no constructor named
                [constr], or if the number of elements in [params] does not match the
                expected number of constructor arguments, or if any argument has an
                invalid type, the result is unspecified.
            </haxe_doc>
        </createByName>
        <createByIndex public="1" params="T" get="inline" set="null" line="70" static="1">
            <f a="e:index:?params">
                <x path="Enum">
                    <c path="createByIndex.T"/>
                </x>
                <x path="Int"/>
                <c path="Array">
                    <d/>
                </c>
                <c path="createByIndex.T"/>
            </f>
            <haxe_doc>Creates an instance of enum [e] by calling its constructor number
                [index] with arguments [params].

                The constructor indices are preserved from haxe syntax, so the first
                declared is index 0, the next index 1 etc.

                If [e] or [constr] is null, or if enum [e] has no constructor named
                [constr], or if the number of elements in [params] does not match the
                expected number of constructor arguments, or if any argument has an
                invalid type, the result is unspecified.
            </haxe_doc>
        </createByIndex>
        <createAll public="1" params="T" get="inline" set="null" line="87" static="1">
            <f a="e">
                <x path="Enum">
                    <c path="createAll.T"/>
                </x>
                <c path="Array">
                    <c path="createAll.T"/>
                </c>
            </f>
            <haxe_doc>Returns a list of all constructors of enum [e] that require no
                arguments.

                This may return the empty Array [] if all constructors of [e] require
                arguments.

                Otherwise an instance of [e] constructed through each of its non-
                argument constructors is returned, in the order of the constructor
                declaration.

                If [e] is null, the result is unspecified.
            </haxe_doc>
        </createAll>
        <getConstructors public="1" params="T" get="inline" set="null" line="99" static="1">
            <f a="e">
                <x path="Enum">
                    <c path="getConstructors.T"/>
                </x>
                <c path="Array">
                    <c path="String"/>
                </c>
            </f>
            <haxe_doc>Returns a list of the names of all constructors of enum [e].

                The order of the constructor names in the returned Array is preserved
                from the original syntax.

                If [c] is null, the result is unspecified.
            </haxe_doc>
        </getConstructors>
    </class>
    <class path="haxe.EnumValueTools" params="" file="/usr/lib/haxe/std/haxe/EnumTools.hx" module="haxe.EnumTools"
           extern="1">
        <equals public="1" params="T" get="inline" set="null" line="114" static="1">
            <f a="a:b">
                <c path="equals.T"/>
                <c path="equals.T"/>
                <x path="Bool"/>
            </f>
            <haxe_doc>Recursively compares two enum instances [a] and [b] by value.

                Unlike [a] == [b], this function performs a deep equality check on the
                arguments of the constructors, if exists.

                If [a] or [b] are null, the result is unspecified.
            </haxe_doc>
        </equals>
        <getName public="1" get="inline" set="null" line="125" static="1">
            <f a="e">
                <x path="EnumValue"/>
                <c path="String"/>
            </f>
            <haxe_doc>Returns the constructor name of enum instance [e].

                The result String does not contain any constructor arguments.

                If [e] is null, the result is unspecified.
            </haxe_doc>
        </getName>
        <getParameters public="1" get="inline" set="null" line="139" static="1">
            <f a="e">
                <x path="EnumValue"/>
                <c path="Array">
                    <d/>
                </c>
            </f>
            <haxe_doc>Returns a list of the constructor arguments of enum instance [e].

                If [e] has no arguments, the result is [].

                Otherwise the result are the values that were used as arguments to [e],
                in the order of their declaration.

                If [e] is null, the result is unspecified.
            </haxe_doc>
        </getParameters>
        <getIndex public="1" get="inline" set="null" line="151" static="1">
            <f a="e">
                <x path="EnumValue"/>
                <x path="Int"/>
            </f>
            <haxe_doc>Returns the index of enum instance [e].

                This corresponds to the original syntactic position of [e]. The index of
                the first declared constructor is 0, the next one is 1 etc.

                If [e] is null, the result is unspecified.
            </haxe_doc>
        </getIndex>
    </class>
    <class path="haxe.Log" params="" file="/usr/lib/haxe/std/haxe/Log.hx">
        <trace public="1" set="dynamic" line="45" static="1">
            <f a="v:?infos">
                <d/>
                <t path="haxe.PosInfos"/>
                <x path="Void"/>
            </f>
            <haxe_doc>Outputs [v] in a platform-dependent way.

                The second parameter [infos] is injected by the compiler and contains
                information about the position where the trace() call was made.

                This method can be rebound to a custom function:
                var oldTrace = haxe.Log.trace; // store old function
                haxe.Log.trace = function(v,infos) { // handle trace }
                ...
                haxe.Log.trace = oldTrace;

                If it is bound to null, subsequent calls to trace() will cause an
                exception.
            </haxe_doc>
        </trace>
        <haxe_doc>Log primarily provides the trace() method, which is invoked upon a call to
            trace() in haxe code.
        </haxe_doc>
        <meta>
            <m n=":keep"/>
        </meta>
    </class>
    <typedef path="haxe.PosInfos" params="" file="/usr/lib/haxe/std/haxe/PosInfos.hx">
        <a>
            <methodName>
                <c path="String"/>
            </methodName>
            <lineNumber>
                <x path="Int"/>
            </lineNumber>
            <fileName>
                <c path="String"/>
            </fileName>
            <customParams>
                <c path="Array">
                    <d/>
                </c>
                <meta>
                    <m n=":optional"/>
                </meta>
            </customParams>
            <className>
                <c path="String"/>
            </className>
        </a>
        <haxe_doc>PosInfos is a magic type which can be used to generate position information
            into the output for debugging use.

            If a function has a final optional argument of this type, i.e.
            (..., ?pos:haxe.PosInfos), each call to that function which does not assign
            a value to that argument has its position added as call argument.

            This can be used to track positions of calls in e.g. a unit testing
            framework.
        </haxe_doc>
    </typedef>
    <class path="haxe.Timer" params="" file="/Users/jbrichardet/Development/NME/haxe/Timer.hx">
        <delay public="1" set="method" line="54" static="1">
            <f a="f:time_ms">
                <f a="">
                    <x path="Void"/>
                </f>
                <x path="Int"/>
                <c path="haxe.Timer"/>
            </f>
            <haxe_doc>This will delay the call to [f] for the given time. [f] will only be called once.</haxe_doc>
        </delay>
        <measure public="1" params="T" set="method" line="68" static="1">
            <f a="f:?pos">
                <f a="">
                    <c path="measure.T"/>
                </f>
                <t path="haxe.PosInfos"/>
                <c path="measure.T"/>
            </f>
            <haxe_doc>Measure the time it takes to execute the function [f] and trace it. Returns the value returned by
                [f].
            </haxe_doc>
        </measure>
        <stamp public="1" set="method" line="78" static="1">
            <f a="">
                <x path="Float"/>
            </f>
            <haxe_doc>Returns the most precise timestamp, in seconds. The value itself might differ depending on
                platforms, only differences between two values make sense.
            </haxe_doc>
        </stamp>
        <run public="1" set="dynamic" line="48">
            <f a="">
                <x path="Void"/>
            </f>
            <haxe_doc>This is the [run()] method that is called when the Timer executes. It can be either overriden in
                subclasses or directly rebinded with another function-value.
            </haxe_doc>
        </run>
        <stop public="1" set="method" line="32">
            <f a="">
                <x path="Void"/>
            </f>
            <haxe_doc>Stop the timer definitely.</haxe_doc>
        </stop>
        <id>
            <t path="Null">
                <x path="Int"/>
            </t>
        </id>
        <new public="1" set="method" line="16">
            <f a="time_ms">
                <x path="Int"/>
                <x path="Void"/>
            </f>
            <haxe_doc>Create a new timer that will run every [time_ms] (in milliseconds).</haxe_doc>
        </new>
    </class>
    <typedef path="haxe.TypeResolver" params="" file="/usr/lib/haxe/std/haxe/Unserializer.hx"
             module="haxe.Unserializer">
        <a>
            <resolveEnum set="method">
                <f a="name">
                    <c path="String"/>
                    <x path="Enum">
                        <d/>
                    </x>
                </f>
            </resolveEnum>
            <resolveClass set="method">
                <f a="name">
                    <c path="String"/>
                    <x path="Class">
                        <d/>
                    </x>
                </f>
            </resolveClass>
        </a>
    </typedef>
    <class path="haxe.ds.GenericCell_String" params="" file="/usr/lib/haxe/std/haxe/ds/GenericStack.hx">
        <next public="1">
            <c path="haxe.ds.GenericCell_String"/>
        </next>
        <elt public="1">
            <c path="String"/>
        </elt>
        <new public="1" set="method" line="30">
            <f a="elt:next">
                <c path="String"/>
                <c path="haxe.ds.GenericCell_String"/>
                <x path="Void"/>
            </f>
        </new>
    </class>
    <class path="haxe.ds.GenericCell_Xml" params="" file="/usr/lib/haxe/std/haxe/ds/GenericStack.hx">
        <next public="1">
            <c path="haxe.ds.GenericCell_Xml"/>
        </next>
        <elt public="1">
            <c path="Xml"/>
        </elt>
        <new public="1" set="method" line="30">
            <f a="elt:next">
                <c path="Xml"/>
                <c path="haxe.ds.GenericCell_Xml"/>
                <x path="Void"/>
            </f>
        </new>
    </class>
    <class path="haxe.ds.GenericCell_com_knowledgeplayers_grar_display_part_PartDisplay" params=""
           file="/usr/lib/haxe/std/haxe/ds/GenericStack.hx">
        <next public="1">
            <c path="haxe.ds.GenericCell_com_knowledgeplayers_grar_display_part_PartDisplay"/>
        </next>
        <elt public="1">
            <c path="com.knowledgeplayers.grar.display.part.PartDisplay"/>
        </elt>
        <new public="1" set="method" line="30">
            <f a="elt:next">
                <c path="com.knowledgeplayers.grar.display.part.PartDisplay"/>
                <c path="haxe.ds.GenericCell_com_knowledgeplayers_grar_display_part_PartDisplay"/>
                <x path="Void"/>
            </f>
        </new>
    </class>
    <class path="haxe.ds.GenericCell_com_knowledgeplayers_grar_localisation_Localisation" params=""
           file="/usr/lib/haxe/std/haxe/ds/GenericStack.hx">
        <next public="1">
            <c path="haxe.ds.GenericCell_com_knowledgeplayers_grar_localisation_Localisation"/>
        </next>
        <elt public="1">
            <c path="com.knowledgeplayers.grar.localisation.Localisation"/>
        </elt>
        <new public="1" set="method" line="30">
            <f a="elt:next">
                <c path="com.knowledgeplayers.grar.localisation.Localisation"/>
                <c path="haxe.ds.GenericCell_com_knowledgeplayers_grar_localisation_Localisation"/>
                <x path="Void"/>
            </f>
        </new>
    </class>
    <class path="haxe.ds.GenericCell_com_knowledgeplayers_grar_structure_activity_Activity" params=""
           file="/usr/lib/haxe/std/haxe/ds/GenericStack.hx">
        <next public="1">
            <c path="haxe.ds.GenericCell_com_knowledgeplayers_grar_structure_activity_Activity"/>
        </next>
        <elt public="1">
            <c path="com.knowledgeplayers.grar.structure.activity.Activity"/>
        </elt>
        <new public="1" set="method" line="30">
            <f a="elt:next">
                <c path="com.knowledgeplayers.grar.structure.activity.Activity"/>
                <c path="haxe.ds.GenericCell_com_knowledgeplayers_grar_structure_activity_Activity"/>
                <x path="Void"/>
            </f>
        </new>
    </class>
    <class path="haxe.ds.GenericCell_com_knowledgeplayers_grar_structure_activity_scanner_ScannerPoint" params=""
           file="/usr/lib/haxe/std/haxe/ds/GenericStack.hx">
        <next public="1">
            <c path="haxe.ds.GenericCell_com_knowledgeplayers_grar_structure_activity_scanner_ScannerPoint"/>
        </next>
        <elt public="1">
            <c path="com.knowledgeplayers.grar.structure.activity.scanner.ScannerPoint"/>
        </elt>
        <new public="1" set="method" line="30">
            <f a="elt:next">
                <c path="com.knowledgeplayers.grar.structure.activity.scanner.ScannerPoint"/>
                <c path="haxe.ds.GenericCell_com_knowledgeplayers_grar_structure_activity_scanner_ScannerPoint"/>
                <x path="Void"/>
            </f>
        </new>
    </class>
    <class path="haxe.ds.GenericCell_flash_display_DisplayObject" params=""
           file="/usr/lib/haxe/std/haxe/ds/GenericStack.hx">
        <next public="1">
            <c path="haxe.ds.GenericCell_flash_display_DisplayObject"/>
        </next>
        <elt public="1">
            <t path="nme.display.DisplayObject"/>
        </elt>
        <new public="1" set="method" line="30">
            <f a="elt:next">
                <t path="nme.display.DisplayObject"/>
                <c path="haxe.ds.GenericCell_flash_display_DisplayObject"/>
                <x path="Void"/>
            </f>
        </new>
    </class>
    <class path="haxe.ds.GenericStack_String" params="" file="/usr/lib/haxe/std/haxe/ds/GenericStack.hx">
        <toString public="1" set="method" line="151">
            <f a="">
                <c path="String"/>
            </f>
            <haxe_doc>Returns a displayable representation of the String.</haxe_doc>
        </toString>
        <iterator public="1" set="method" line="133">
            <f a="">
                <t path="Iterator">
                    <c path="String"/>
                </t>
            </f>
            <haxe_doc>Returns an iterator on the elements of the list.</haxe_doc>
        </iterator>
        <remove public="1" set="method" line="102">
            <f a="v">
                <c path="String"/>
                <x path="Bool"/>
            </f>
            <haxe_doc>Remove the first element that is [== v] from the list.
                Returns [true] if an element was removed, [false] otherwise.
            </haxe_doc>
        </remove>
        <isEmpty public="1" get="inline" set="null" line="94">
            <f a="">
                <x path="Bool"/>
            </f>
            <haxe_doc>Tells if a list is empty.</haxe_doc>
        </isEmpty>
        <pop public="1" get="inline" set="null" line="81">
            <f a="">
                <t path="Null">
                    <c path="String"/>
                </t>
            </f>
            <haxe_doc>Removes the first element of the list and
                returns it or simply returns null if the
                list is empty.
            </haxe_doc>
        </pop>
        <first public="1" get="inline" set="null" line="72">
            <f a="">
                <t path="Null">
                    <c path="String"/>
                </t>
            </f>
            <haxe_doc>Returns the first element of the list, or null
                if the list is empty.
            </haxe_doc>
        </first>
        <add public="1" get="inline" set="null" line="64">
            <f a="item">
                <c path="String"/>
                <x path="Void"/>
            </f>
            <haxe_doc>Add an element at the head of the list.</haxe_doc>
        </add>
        <head public="1">
            <c path="haxe.ds.GenericCell_String"/>
        </head>
        <new public="1" set="method" line="58">
            <f a="">
                <x path="Void"/>
            </f>
            <haxe_doc>Creates a new empty list.</haxe_doc>
        </new>
    </class>
    <class path="haxe.ds.GenericStack_Xml" params="" file="/usr/lib/haxe/std/haxe/ds/GenericStack.hx">
        <toString public="1" set="method" line="151">
            <f a="">
                <c path="String"/>
            </f>
            <haxe_doc>Returns a displayable representation of the String.</haxe_doc>
        </toString>
        <iterator public="1" set="method" line="133">
            <f a="">
                <t path="Iterator">
                    <c path="Xml"/>
                </t>
            </f>
            <haxe_doc>Returns an iterator on the elements of the list.</haxe_doc>
        </iterator>
        <remove public="1" set="method" line="102">
            <f a="v">
                <c path="Xml"/>
                <x path="Bool"/>
            </f>
            <haxe_doc>Remove the first element that is [== v] from the list.
                Returns [true] if an element was removed, [false] otherwise.
            </haxe_doc>
        </remove>
        <isEmpty public="1" get="inline" set="null" line="94">
            <f a="">
                <x path="Bool"/>
            </f>
            <haxe_doc>Tells if a list is empty.</haxe_doc>
        </isEmpty>
        <pop public="1" get="inline" set="null" line="81">
            <f a="">
                <t path="Null">
                    <c path="Xml"/>
                </t>
            </f>
            <haxe_doc>Removes the first element of the list and
                returns it or simply returns null if the
                list is empty.
            </haxe_doc>
        </pop>
        <first public="1" get="inline" set="null" line="72">
            <f a="">
                <t path="Null">
                    <c path="Xml"/>
                </t>
            </f>
            <haxe_doc>Returns the first element of the list, or null
                if the list is empty.
            </haxe_doc>
        </first>
        <add public="1" get="inline" set="null" line="64">
            <f a="item">
                <c path="Xml"/>
                <x path="Void"/>
            </f>
            <haxe_doc>Add an element at the head of the list.</haxe_doc>
        </add>
        <head public="1">
            <c path="haxe.ds.GenericCell_Xml"/>
        </head>
        <new public="1" set="method" line="58">
            <f a="">
                <x path="Void"/>
            </f>
            <haxe_doc>Creates a new empty list.</haxe_doc>
        </new>
    </class>
    <class path="haxe.ds.GenericStack_com_knowledgeplayers_grar_display_part_PartDisplay" params=""
           file="/usr/lib/haxe/std/haxe/ds/GenericStack.hx">
        <toString public="1" set="method" line="151">
            <f a="">
                <c path="String"/>
            </f>
            <haxe_doc>Returns a displayable representation of the String.</haxe_doc>
        </toString>
        <iterator public="1" set="method" line="133">
            <f a="">
                <t path="Iterator">
                    <c path="com.knowledgeplayers.grar.display.part.PartDisplay"/>
                </t>
            </f>
            <haxe_doc>Returns an iterator on the elements of the list.</haxe_doc>
        </iterator>
        <remove public="1" set="method" line="102">
            <f a="v">
                <c path="com.knowledgeplayers.grar.display.part.PartDisplay"/>
                <x path="Bool"/>
            </f>
            <haxe_doc>Remove the first element that is [== v] from the list.
                Returns [true] if an element was removed, [false] otherwise.
            </haxe_doc>
        </remove>
        <isEmpty public="1" get="inline" set="null" line="94">
            <f a="">
                <x path="Bool"/>
            </f>
            <haxe_doc>Tells if a list is empty.</haxe_doc>
        </isEmpty>
        <pop public="1" get="inline" set="null" line="81">
            <f a="">
                <t path="Null">
                    <c path="com.knowledgeplayers.grar.display.part.PartDisplay"/>
                </t>
            </f>
            <haxe_doc>Removes the first element of the list and
                returns it or simply returns null if the
                list is empty.
            </haxe_doc>
        </pop>
        <first public="1" get="inline" set="null" line="72">
            <f a="">
                <t path="Null">
                    <c path="com.knowledgeplayers.grar.display.part.PartDisplay"/>
                </t>
            </f>
            <haxe_doc>Returns the first element of the list, or null
                if the list is empty.
            </haxe_doc>
        </first>
        <add public="1" get="inline" set="null" line="64">
            <f a="item">
                <c path="com.knowledgeplayers.grar.display.part.PartDisplay"/>
                <x path="Void"/>
            </f>
            <haxe_doc>Add an element at the head of the list.</haxe_doc>
        </add>
        <head public="1">
            <c path="haxe.ds.GenericCell_com_knowledgeplayers_grar_display_part_PartDisplay"/>
        </head>
        <new public="1" set="method" line="58">
            <f a="">
                <x path="Void"/>
            </f>
            <haxe_doc>Creates a new empty list.</haxe_doc>
        </new>
    </class>
    <class path="haxe.ds.GenericStack_com_knowledgeplayers_grar_localisation_Localisation" params=""
           file="/usr/lib/haxe/std/haxe/ds/GenericStack.hx">
        <toString public="1" set="method" line="151">
            <f a="">
                <c path="String"/>
            </f>
            <haxe_doc>Returns a displayable representation of the String.</haxe_doc>
        </toString>
        <iterator public="1" set="method" line="133">
            <f a="">
                <t path="Iterator">
                    <c path="com.knowledgeplayers.grar.localisation.Localisation"/>
                </t>
            </f>
            <haxe_doc>Returns an iterator on the elements of the list.</haxe_doc>
        </iterator>
        <remove public="1" set="method" line="102">
            <f a="v">
                <c path="com.knowledgeplayers.grar.localisation.Localisation"/>
                <x path="Bool"/>
            </f>
            <haxe_doc>Remove the first element that is [== v] from the list.
                Returns [true] if an element was removed, [false] otherwise.
            </haxe_doc>
        </remove>
        <isEmpty public="1" get="inline" set="null" line="94">
            <f a="">
                <x path="Bool"/>
            </f>
            <haxe_doc>Tells if a list is empty.</haxe_doc>
        </isEmpty>
        <pop public="1" get="inline" set="null" line="81">
            <f a="">
                <t path="Null">
                    <c path="com.knowledgeplayers.grar.localisation.Localisation"/>
                </t>
            </f>
            <haxe_doc>Removes the first element of the list and
                returns it or simply returns null if the
                list is empty.
            </haxe_doc>
        </pop>
        <first public="1" get="inline" set="null" line="72">
            <f a="">
                <t path="Null">
                    <c path="com.knowledgeplayers.grar.localisation.Localisation"/>
                </t>
            </f>
            <haxe_doc>Returns the first element of the list, or null
                if the list is empty.
            </haxe_doc>
        </first>
        <add public="1" get="inline" set="null" line="64">
            <f a="item">
                <c path="com.knowledgeplayers.grar.localisation.Localisation"/>
                <x path="Void"/>
            </f>
            <haxe_doc>Add an element at the head of the list.</haxe_doc>
        </add>
        <head public="1">
            <c path="haxe.ds.GenericCell_com_knowledgeplayers_grar_localisation_Localisation"/>
        </head>
        <new public="1" set="method" line="58">
            <f a="">
                <x path="Void"/>
            </f>
            <haxe_doc>Creates a new empty list.</haxe_doc>
        </new>
    </class>
    <class path="haxe.ds.GenericStack_com_knowledgeplayers_grar_structure_activity_Activity" params=""
           file="/usr/lib/haxe/std/haxe/ds/GenericStack.hx">
        <toString public="1" set="method" line="151">
            <f a="">
                <c path="String"/>
            </f>
            <haxe_doc>Returns a displayable representation of the String.</haxe_doc>
        </toString>
        <iterator public="1" set="method" line="133">
            <f a="">
                <t path="Iterator">
                    <c path="com.knowledgeplayers.grar.structure.activity.Activity"/>
                </t>
            </f>
            <haxe_doc>Returns an iterator on the elements of the list.</haxe_doc>
        </iterator>
        <remove public="1" set="method" line="102">
            <f a="v">
                <c path="com.knowledgeplayers.grar.structure.activity.Activity"/>
                <x path="Bool"/>
            </f>
            <haxe_doc>Remove the first element that is [== v] from the list.
                Returns [true] if an element was removed, [false] otherwise.
            </haxe_doc>
        </remove>
        <isEmpty public="1" get="inline" set="null" line="94">
            <f a="">
                <x path="Bool"/>
            </f>
            <haxe_doc>Tells if a list is empty.</haxe_doc>
        </isEmpty>
        <pop public="1" get="inline" set="null" line="81">
            <f a="">
                <t path="Null">
                    <c path="com.knowledgeplayers.grar.structure.activity.Activity"/>
                </t>
            </f>
            <haxe_doc>Removes the first element of the list and
                returns it or simply returns null if the
                list is empty.
            </haxe_doc>
        </pop>
        <first public="1" get="inline" set="null" line="72">
            <f a="">
                <t path="Null">
                    <c path="com.knowledgeplayers.grar.structure.activity.Activity"/>
                </t>
            </f>
            <haxe_doc>Returns the first element of the list, or null
                if the list is empty.
            </haxe_doc>
        </first>
        <add public="1" get="inline" set="null" line="64">
            <f a="item">
                <c path="com.knowledgeplayers.grar.structure.activity.Activity"/>
                <x path="Void"/>
            </f>
            <haxe_doc>Add an element at the head of the list.</haxe_doc>
        </add>
        <head public="1">
            <c path="haxe.ds.GenericCell_com_knowledgeplayers_grar_structure_activity_Activity"/>
        </head>
        <new public="1" set="method" line="58">
            <f a="">
                <x path="Void"/>
            </f>
            <haxe_doc>Creates a new empty list.</haxe_doc>
        </new>
    </class>
    <class path="haxe.ds.GenericStack_com_knowledgeplayers_grar_structure_activity_scanner_ScannerPoint" params=""
           file="/usr/lib/haxe/std/haxe/ds/GenericStack.hx">
        <toString public="1" set="method" line="151">
            <f a="">
                <c path="String"/>
            </f>
            <haxe_doc>Returns a displayable representation of the String.</haxe_doc>
        </toString>
        <iterator public="1" set="method" line="133">
            <f a="">
                <t path="Iterator">
                    <c path="com.knowledgeplayers.grar.structure.activity.scanner.ScannerPoint"/>
                </t>
            </f>
            <haxe_doc>Returns an iterator on the elements of the list.</haxe_doc>
        </iterator>
        <remove public="1" set="method" line="102">
            <f a="v">
                <c path="com.knowledgeplayers.grar.structure.activity.scanner.ScannerPoint"/>
                <x path="Bool"/>
            </f>
            <haxe_doc>Remove the first element that is [== v] from the list.
                Returns [true] if an element was removed, [false] otherwise.
            </haxe_doc>
        </remove>
        <isEmpty public="1" get="inline" set="null" line="94">
            <f a="">
                <x path="Bool"/>
            </f>
            <haxe_doc>Tells if a list is empty.</haxe_doc>
        </isEmpty>
        <pop public="1" get="inline" set="null" line="81">
            <f a="">
                <t path="Null">
                    <c path="com.knowledgeplayers.grar.structure.activity.scanner.ScannerPoint"/>
                </t>
            </f>
            <haxe_doc>Removes the first element of the list and
                returns it or simply returns null if the
                list is empty.
            </haxe_doc>
        </pop>
        <first public="1" get="inline" set="null" line="72">
            <f a="">
                <t path="Null">
                    <c path="com.knowledgeplayers.grar.structure.activity.scanner.ScannerPoint"/>
                </t>
            </f>
            <haxe_doc>Returns the first element of the list, or null
                if the list is empty.
            </haxe_doc>
        </first>
        <add public="1" get="inline" set="null" line="64">
            <f a="item">
                <c path="com.knowledgeplayers.grar.structure.activity.scanner.ScannerPoint"/>
                <x path="Void"/>
            </f>
            <haxe_doc>Add an element at the head of the list.</haxe_doc>
        </add>
        <head public="1">
            <c path="haxe.ds.GenericCell_com_knowledgeplayers_grar_structure_activity_scanner_ScannerPoint"/>
        </head>
        <new public="1" set="method" line="58">
            <f a="">
                <x path="Void"/>
            </f>
            <haxe_doc>Creates a new empty list.</haxe_doc>
        </new>
    </class>
    <class path="haxe.ds.GenericStack_flash_display_DisplayObject" params=""
           file="/usr/lib/haxe/std/haxe/ds/GenericStack.hx">
        <toString public="1" set="method" line="151">
            <f a="">
                <c path="String"/>
            </f>
            <haxe_doc>Returns a displayable representation of the String.</haxe_doc>
        </toString>
        <iterator public="1" set="method" line="133">
            <f a="">
                <t path="Iterator">
                    <t path="nme.display.DisplayObject"/>
                </t>
            </f>
            <haxe_doc>Returns an iterator on the elements of the list.</haxe_doc>
        </iterator>
        <remove public="1" set="method" line="102">
            <f a="v">
                <t path="nme.display.DisplayObject"/>
                <x path="Bool"/>
            </f>
            <haxe_doc>Remove the first element that is [== v] from the list.
                Returns [true] if an element was removed, [false] otherwise.
            </haxe_doc>
        </remove>
        <isEmpty public="1" get="inline" set="null" line="94">
            <f a="">
                <x path="Bool"/>
            </f>
            <haxe_doc>Tells if a list is empty.</haxe_doc>
        </isEmpty>
        <pop public="1" get="inline" set="null" line="81">
            <f a="">
                <t path="Null">
                    <t path="nme.display.DisplayObject"/>
                </t>
            </f>
            <haxe_doc>Removes the first element of the list and
                returns it or simply returns null if the
                list is empty.
            </haxe_doc>
        </pop>
        <first public="1" get="inline" set="null" line="72">
            <f a="">
                <t path="Null">
                    <t path="nme.display.DisplayObject"/>
                </t>
            </f>
            <haxe_doc>Returns the first element of the list, or null
                if the list is empty.
            </haxe_doc>
        </first>
        <add public="1" get="inline" set="null" line="64">
            <f a="item">
                <t path="nme.display.DisplayObject"/>
                <x path="Void"/>
            </f>
            <haxe_doc>Add an element at the head of the list.</haxe_doc>
        </add>
        <head public="1">
            <c path="haxe.ds.GenericCell_flash_display_DisplayObject"/>
        </head>
        <new public="1" set="method" line="58">
            <f a="">
                <x path="Void"/>
            </f>
            <haxe_doc>Creates a new empty list.</haxe_doc>
        </new>
    </class>
    <abstract path="haxe.ds.HashMap" params="K:V" file="/usr/lib/haxe/std/haxe/ds/HashMap.hx"/>
    <class path="haxe.ds.ObjectMap" params="K:V" file="/usr/lib/haxe/std/flash/_std/haxe/ds/ObjectMap.hx">
        <extends path="flash.utils.Dictionary"/>
        <implements path="IMap">
            <c path="haxe.ds.ObjectMap.K"/>
            <c path="haxe.ds.ObjectMap.V"/>
        </implements>
        <iterator public="1" set="method" line="46">
            <f a="">
                <t path="Iterator">
                    <c path="haxe.ds.ObjectMap.V"/>
                </t>
            </f>
        </iterator>
        <remove public="1" set="method" line="22">
            <f a="key">
                <c path="haxe.ds.ObjectMap.K"/>
                <x path="Bool"/>
            </f>
        </remove>
        <new public="1" set="method" line="6">
            <f a="">
                <x path="Void"/>
            </f>
        </new>
        <meta>
            <m n=":keep"/>
            <m n=":coreApi"/>
        </meta>
    </class>
    <class path="haxe.ds._ObjectMap.NativeValueIterator" params=""
           file="/usr/lib/haxe/std/flash/_std/haxe/ds/ObjectMap.hx" private="1" module="haxe.ds.ObjectMap">
        <next public="1" get="inline" set="null" line="114">
            <f a="">
                <d/>
            </f>
        </next>
        <hasNext public="1" get="inline" set="null" line="105">
            <f a="">
                <x path="Bool"/>
            </f>
        </hasNext>
        <index>
            <x path="Int"/>
        </index>
        <collection>
            <d/>
        </collection>
        <new set="method" line="103">
            <f a="">
                <x path="Void"/>
            </f>
        </new>
        <meta>
            <m n=":keep"/>
        </meta>
    </class>
    <typedef path="haxe.io.BytesData" params="" file="/usr/lib/haxe/std/haxe/io/BytesData.hx">
        <c path="flash.utils.ByteArray"/>
    </typedef>
    <class path="haxe.xml._Fast.NodeAccess" params="" file="/usr/lib/haxe/std/haxe/xml/Fast.hx" private="1"
           module="haxe.xml.Fast">
        <resolve public="1" set="method" line="32">
            <f a="name">
                <c path="String"/>
                <c path="haxe.xml.Fast"/>
            </f>
        </resolve>
        <__x>
            <c path="Xml"/>
        </__x>
        <new public="1" set="method" line="28">
            <f a="x">
                <c path="Xml"/>
                <x path="Void"/>
            </f>
        </new>
        <meta>
            <m n=":keep"/>
        </meta>
        <haxe_dynamic>
            <c path="haxe.xml.Fast"/>
        </haxe_dynamic>
    </class>
    <class path="haxe.xml._Fast.AttribAccess" params="" file="/usr/lib/haxe/std/haxe/xml/Fast.hx" private="1"
           module="haxe.xml.Fast">
        <resolve public="1" set="method" line="51">
            <f a="name">
                <c path="String"/>
                <c path="String"/>
            </f>
        </resolve>
        <__x>
            <c path="Xml"/>
        </__x>
        <new public="1" set="method" line="47">
            <f a="x">
                <c path="Xml"/>
                <x path="Void"/>
            </f>
        </new>
        <meta>
            <m n=":keep"/>
        </meta>
        <haxe_dynamic>
            <c path="String"/>
        </haxe_dynamic>
    </class>
    <class path="haxe.xml._Fast.HasAttribAccess" params="" file="/usr/lib/haxe/std/haxe/xml/Fast.hx" private="1"
           module="haxe.xml.Fast">
        <resolve public="1" set="method" line="70">
            <f a="name">
                <c path="String"/>
                <x path="Bool"/>
            </f>
        </resolve>
        <__x>
            <c path="Xml"/>
        </__x>
        <new public="1" set="method" line="66">
            <f a="x">
                <c path="Xml"/>
                <x path="Void"/>
            </f>
        </new>
        <meta>
            <m n=":keep"/>
        </meta>
        <haxe_dynamic>
            <x path="Bool"/>
        </haxe_dynamic>
    </class>
    <class path="haxe.xml._Fast.HasNodeAccess" params="" file="/usr/lib/haxe/std/haxe/xml/Fast.hx" private="1"
           module="haxe.xml.Fast">
        <resolve public="1" set="method" line="86">
            <f a="name">
                <c path="String"/>
                <x path="Bool"/>
            </f>
        </resolve>
        <__x>
            <c path="Xml"/>
        </__x>
        <new public="1" set="method" line="82">
            <f a="x">
                <c path="Xml"/>
                <x path="Void"/>
            </f>
        </new>
        <meta>
            <m n=":keep"/>
        </meta>
        <haxe_dynamic>
            <x path="Bool"/>
        </haxe_dynamic>
    </class>
    <class path="haxe.xml._Fast.NodeListAccess" params="" file="/usr/lib/haxe/std/haxe/xml/Fast.hx" private="1"
           module="haxe.xml.Fast">
        <resolve public="1" set="method" line="100">
            <f a="name">
                <c path="String"/>
                <c path="List">
                    <c path="haxe.xml.Fast"/>
                </c>
            </f>
        </resolve>
        <__x>
            <c path="Xml"/>
        </__x>
        <new public="1" set="method" line="96">
            <f a="x">
                <c path="Xml"/>
                <x path="Void"/>
            </f>
        </new>
        <meta>
            <m n=":keep"/>
        </meta>
        <haxe_dynamic>
            <c path="List">
                <c path="haxe.xml.Fast"/>
            </c>
        </haxe_dynamic>
    </class>
    <class path="haxe.xml.Fast" params="" file="/usr/lib/haxe/std/haxe/xml/Fast.hx">
        <get_elements set="method" line="164">
            <f a="">
                <a>
                    <next>
                        <f a="">
                            <c path="haxe.xml.Fast"/>
                        </f>
                    </next>
                    <hasNext>
                        <f a="">
                            <x path="Bool"/>
                        </f>
                    </hasNext>
                </a>
            </f>
        </get_elements>
        <get_innerData set="method" line="137">
            <f a="">
                <c path="String"/>
            </f>
        </get_innerData>
        <get_name set="method" line="133">
            <f a="">
                <c path="String"/>
            </f>
        </get_name>
        <hasNode public="1" set="null">
            <c path="haxe.xml._Fast.HasNodeAccess"/>
        </hasNode>
        <has public="1" set="null">
            <c path="haxe.xml._Fast.HasAttribAccess"/>
        </has>
        <att public="1" set="null">
            <c path="haxe.xml._Fast.AttribAccess"/>
        </att>
        <nodes public="1" set="null">
            <c path="haxe.xml._Fast.NodeListAccess"/>
        </nodes>
        <node public="1" set="null">
            <c path="haxe.xml._Fast.NodeAccess"/>
        </node>
        <x public="1" set="null">
            <c path="Xml"/>
        </x>
        <new public="1" set="method" line="122">
            <f a="x">
                <c path="Xml"/>
                <x path="Void"/>
            </f>
        </new>
        <meta>
            <m n=":keep"/>
        </meta>
    </class>
    <class path="motion.actuators.IGenericActuator" params=""
           file="/usr/lib/haxe/lib/actuate/1,6,3/motion/actuators/GenericActuator.hx"
           module="motion.actuators.GenericActuator" interface="1">
        <snapping public="1" set="method">
            <f a="?value">
                <x path="Bool"/>
                <c path="motion.actuators.IGenericActuator"/>
            </f>
            <haxe_doc>* Snapping causes tween values to be rounded automatically
                * @param value Whether tween values should be rounded (Default is true)
                * @return The current actuator instance
            </haxe_doc>
        </snapping>
        <smartRotation public="1" set="method">
            <f a="?value">
                <x path="Bool"/>
                <c path="motion.actuators.IGenericActuator"/>
            </f>
            <haxe_doc>* Enabling smartRotation can prevent undesired results when tweening rotation values
                * @param value Whether smart rotation should be enabled (Default is true)
                * @return The current actuator instance
            </haxe_doc>
        </smartRotation>
        <reverse public="1" set="method">
            <f a="?value">
                <x path="Bool"/>
                <c path="motion.actuators.IGenericActuator"/>
            </f>
            <haxe_doc>* Sets if the tween should be handled in reverse
                * @param value Whether the tween should be reversed (Default is true)
                * @return The current actuator instance
            </haxe_doc>
        </reverse>
        <repeat public="1" set="method">
            <f a="?times">
                <x path="Int"/>
                <c path="motion.actuators.IGenericActuator"/>
            </f>
            <haxe_doc>* Repeats the tween after it finishes
                * @param times The number of times you would like the tween to repeat, or -1 if you would like to repeat
                the tween indefinitely (Default is -1)
                * @return The current actuator instance
            </haxe_doc>
        </repeat>
        <reflect public="1" set="method">
            <f a="?value">
                <x path="Bool"/>
                <c path="motion.actuators.IGenericActuator"/>
            </f>
            <haxe_doc>* Automatically changes the reverse value when the tween repeats. Repeat must be enabled for this
                to have any effect
                * @param value Whether reflect should be enabled (Default is true)
                * @return The current actuator instance
            </haxe_doc>
        </reflect>
        <onUpdate public="1" set="method">
            <f a="handler:?parameters">
                <d/>
                <c path="Array">
                    <d/>
                </c>
                <c path="motion.actuators.IGenericActuator"/>
            </f>
            <haxe_doc>* Defines a function which will be called when the tween updates
                * @param handler The function you would like to be called
                * @param parameters Parameters you would like to pass to the handler function when it is called
                * @return The current actuator instance
            </haxe_doc>
        </onUpdate>
        <onRepeat public="1" set="method">
            <f a="handler:?parameters">
                <d/>
                <c path="Array">
                    <d/>
                </c>
                <c path="motion.actuators.IGenericActuator"/>
            </f>
            <haxe_doc>* Defines a function which will be called when the tween repeats
                * @param handler The function you would like to be called
                * @param parameters Parameters you would like to pass to the handler function when it is called
                * @return The current actuator instance
            </haxe_doc>
        </onRepeat>
        <onComplete public="1" set="method">
            <f a="handler:?parameters">
                <d/>
                <c path="Array">
                    <d/>
                </c>
                <c path="motion.actuators.IGenericActuator"/>
            </f>
            <haxe_doc>* Defines a function which will be called when the tween finishes
                * @param handler The function you would like to be called
                * @param parameters Parameters you would like to pass to the handler function when it is called
                * @return The current actuator instance
            </haxe_doc>
        </onComplete>
        <ease public="1" set="method">
            <f a="easing">
                <c path="motion.easing.IEasing"/>
                <c path="motion.actuators.IGenericActuator"/>
            </f>
            <haxe_doc>* Sets the easing which is used when running the tween
                * @param easing An easing equation, like Elastic.easeIn or Quad.easeOut
                * @return The current actuator instance
            </haxe_doc>
        </ease>
        <delay public="1" set="method">
            <f a="duration">
                <x path="Float"/>
                <c path="motion.actuators.IGenericActuator"/>
            </f>
            <haxe_doc>* Increases the delay before a tween is executed
                * @param duration The amount of seconds to delay
                * @return The current actuator instance
            </haxe_doc>
        </delay>
        <autoVisible public="1" set="method">
            <f a="?value">
                <x path="Bool"/>
                <c path="motion.actuators.IGenericActuator"/>
            </f>
            <haxe_doc>* Flash performs faster when objects are set to visible = false rather than only alpha = 0.
                autoVisible toggles automatically based on alpha values
                * @param value Whether autoVisible should be enabled (Default is true)
                * @return The current actuator instance
            </haxe_doc>
        </autoVisible>
    </class>
    <class path="motion.actuators.GenericActuator" params=""
           file="/usr/lib/haxe/lib/actuate/1,6,3/motion/actuators/GenericActuator.hx">
        <implements path="motion.actuators.IGenericActuator"/>
        <stop public="1" set="method" line="388">
            <f a="properties:complete:sendEvent">
                <d/>
                <x path="Bool"/>
                <x path="Bool"/>
                <x path="Void"/>
            </f>
        </stop>
        <snapping public="1" set="method" line="372">
            <f a="?value">
                <x path="Bool"/>
                <c path="motion.actuators.IGenericActuator"/>
            </f>
            <haxe_doc>* Snapping causes tween values to be rounded automatically
                * @param value Whether tween values should be rounded (Default is true)
                * @return The current actuator instance
            </haxe_doc>
        </snapping>
        <smartRotation public="1" set="method" line="351">
            <f a="?value">
                <x path="Bool"/>
                <c path="motion.actuators.IGenericActuator"/>
            </f>
            <haxe_doc>* Enabling smartRotation can prevent undesired results when tweening rotation values
                * @param value Whether smart rotation should be enabled (Default is true)
                * @return The current actuator instance
            </haxe_doc>
        </smartRotation>
        <reverse public="1" set="method" line="330">
            <f a="?value">
                <x path="Bool"/>
                <c path="motion.actuators.IGenericActuator"/>
            </f>
            <haxe_doc>* Sets if the tween should be handled in reverse
                * @param value Whether the tween should be reversed (Default is true)
                * @return The current actuator instance
            </haxe_doc>
        </reverse>
        <resume public="1" set="method" line="318">
            <f a="">
                <x path="Void"/>
            </f>
        </resume>
        <repeat public="1" set="method" line="303">
            <f a="?times">
                <x path="Int"/>
                <c path="motion.actuators.IGenericActuator"/>
            </f>
            <haxe_doc>* Repeats the tween after it finishes
                * @param times The number of times you would like the tween to repeat, or -1 if you would like to repeat
                the tween indefinitely (Default is -1)
                * @return The current actuator instance
            </haxe_doc>
        </repeat>
        <reflect public="1" set="method" line="282">
            <f a="?value">
                <x path="Bool"/>
                <c path="motion.actuators.IGenericActuator"/>
            </f>
            <haxe_doc>* Automatically changes the reverse value when the tween repeats. Repeat must be enabled for this
                to have any effect
                * @param value Whether reflect should be enabled (Default is true)
                * @return The current actuator instance
            </haxe_doc>
        </reflect>
        <pause public="1" set="method" line="270">
            <f a="">
                <x path="Void"/>
            </f>
        </pause>
        <onUpdate public="1" set="method" line="251">
            <f a="handler:?parameters">
                <d/>
                <c path="Array">
                    <d/>
                </c>
                <c path="motion.actuators.IGenericActuator"/>
            </f>
            <haxe_doc>* Defines a function which will be called when the tween updates
                * @param handler The function you would like to be called
                * @param parameters Parameters you would like to pass to the handler function when it is called
                * @return The current actuator instance
            </haxe_doc>
        </onUpdate>
        <onRepeat public="1" set="method" line="226">
            <f a="handler:?parameters">
                <d/>
                <c path="Array">
                    <d/>
                </c>
                <c path="motion.actuators.IGenericActuator"/>
            </f>
            <haxe_doc>* Defines a function which will be called when the tween repeats
                * @param handler The function you would like to be called
                * @param parameters Parameters you would like to pass to the handler function when it is called
                * @return The current actuator instance
            </haxe_doc>
        </onRepeat>
        <onComplete public="1" set="method" line="195">
            <f a="handler:?parameters">
                <d/>
                <c path="Array">
                    <d/>
                </c>
                <c path="motion.actuators.IGenericActuator"/>
            </f>
            <haxe_doc>* Defines a function which will be called when the tween finishes
                * @param handler The function you would like to be called
                * @param parameters Parameters you would like to pass to the handler function when it is called
                * @return The current actuator instance
            </haxe_doc>
        </onComplete>
        <move public="1" set="method" line="182">
            <f a="">
                <x path="Void"/>
            </f>
        </move>
        <ease public="1" set="method" line="173">
            <f a="easing">
                <c path="motion.easing.IEasing"/>
                <c path="motion.actuators.IGenericActuator"/>
            </f>
            <haxe_doc>* Sets the easing which is used when running the tween
                * @param easing An easing equation, like Elastic.easeIn or Quad.easeOut
                * @return The current actuator instance
            </haxe_doc>
        </ease>
        <delay public="1" set="method" line="159">
            <f a="duration">
                <x path="Float"/>
                <c path="motion.actuators.IGenericActuator"/>
            </f>
            <haxe_doc>* Increases the delay before a tween is executed
                * @param duration The amount of seconds to delay
                * @return The current actuator instance
            </haxe_doc>
        </delay>
        <complete set="method" line="126">
            <f a="?sendEvent">
                <x path="Bool"/>
                <x path="Void"/>
            </f>
        </complete>
        <change set="method" line="106">
            <f a="">
                <x path="Void"/>
            </f>
        </change>
        <autoVisible public="1" set="method" line="91">
            <f a="?value">
                <x path="Bool"/>
                <c path="motion.actuators.IGenericActuator"/>
            </f>
            <haxe_doc>* Flash performs faster when objects are set to visible = false rather than only alpha = 0.
                autoVisible toggles automatically based on alpha values
                * @param value Whether autoVisible should be enabled (Default is true)
                * @return The current actuator instance
            </haxe_doc>
        </autoVisible>
        <apply public="1" set="method" line="59">
            <f a="">
                <x path="Void"/>
            </f>
        </apply>
        <special>
            <x path="Bool"/>
        </special>
        <_snapping>
            <x path="Bool"/>
        </_snapping>
        <_smartRotation>
            <x path="Bool"/>
        </_smartRotation>
        <_reverse>
            <x path="Bool"/>
        </_reverse>
        <_repeat>
            <x path="Int"/>
        </_repeat>
        <_reflect>
            <x path="Bool"/>
        </_reflect>
        <_onUpdateParams>
            <c path="Array">
                <d/>
            </c>
        </_onUpdateParams>
        <_onUpdate>
            <d/>
        </_onUpdate>
        <_onRepeatParams>
            <c path="Array">
                <d/>
            </c>
        </_onRepeatParams>
        <_onRepeat>
            <d/>
        </_onRepeat>
        <_onCompleteParams>
            <c path="Array">
                <d/>
            </c>
        </_onCompleteParams>
        <_onComplete>
            <d/>
        </_onComplete>
        <_ease>
            <c path="motion.easing.IEasing"/>
        </_ease>
        <_delay>
            <x path="Float"/>
        </_delay>
        <_autoVisible>
            <x path="Bool"/>
        </_autoVisible>
        <target public="1">
            <d/>
        </target>
        <properties public="1">
            <d/>
        </properties>
        <id public="1">
            <c path="String"/>
        </id>
        <duration public="1">
            <x path="Float"/>
        </duration>
        <new public="1" set="method" line="39">
            <f a="target:duration:properties">
                <d/>
                <x path="Float"/>
                <d/>
                <x path="Void"/>
            </f>
        </new>
    </class>
    <class path="motion.actuators.SimpleActuator" params=""
           file="/usr/lib/haxe/lib/actuate/1,6,3/motion/actuators/SimpleActuator.hx">
        <extends path="motion.actuators.GenericActuator"/>
        <actuators line="28" static="1">
            <c path="Array">
                <c path="motion.actuators.SimpleActuator"/>
            </c>
        </actuators>
        <actuatorsLength line="29" static="1">
            <x path="Int"/>
        </actuatorsLength>
        <addedEvent line="30" static="1">
            <x path="Bool"/>
        </addedEvent>
        <stage_onEnterFrame set="method" line="463" static="1">
            <f a="event">
                <c path="flash.events.Event"/>
                <x path="Void"/>
            </f>
        </stage_onEnterFrame>
        <update set="method" line="276">
            <f a="currentTime">
                <x path="Float"/>
                <x path="Void"/>
            </f>
        </update>
        <stop public="1" set="method" line="233" override="1">
            <f a="properties:complete:sendEvent">
                <d/>
                <x path="Bool"/>
                <x path="Bool"/>
                <x path="Void"/>
            </f>
        </stop>
        <resume public="1" set="method" line="216" override="1">
            <f a="">
                <x path="Void"/>
            </f>
        </resume>
        <pause public="1" set="method" line="203" override="1">
            <f a="">
                <x path="Void"/>
            </f>
        </pause>
        <onUpdate public="1" set="method" line="192" override="1">
            <f a="handler:?parameters">
                <d/>
                <c path="Array">
                    <d/>
                </c>
                <c path="motion.actuators.IGenericActuator"/>
            </f>
            <haxe_doc>* @inheritDoc</haxe_doc>
        </onUpdate>
        <move public="1" set="method" line="166" override="1">
            <f a="">
                <x path="Void"/>
            </f>
        </move>
        <initialize set="method" line="127">
            <f a="">
                <x path="Void"/>
            </f>
        </initialize>
        <delay public="1" set="method" line="117" override="1">
            <f a="duration">
                <x path="Float"/>
                <c path="motion.actuators.IGenericActuator"/>
            </f>
            <haxe_doc>* @inheritDoc</haxe_doc>
        </delay>
        <autoVisible public="1" set="method" line="87" override="1">
            <f a="?value">
                <x path="Bool"/>
                <c path="motion.actuators.IGenericActuator"/>
            </f>
            <haxe_doc>* @inheritDoc</haxe_doc>
        </autoVisible>
        <toggleVisible>
            <x path="Bool"/>
        </toggleVisible>
        <startTime>
            <x path="Float"/>
        </startTime>
        <setVisible>
            <x path="Bool"/>
        </setVisible>
        <sendChange>
            <x path="Bool"/>
        </sendChange>
        <propertyDetails>
            <c path="Array">
                <c path="motion.actuators.PropertyDetails"/>
            </c>
        </propertyDetails>
        <pauseTime>
            <x path="Float"/>
        </pauseTime>
        <paused>
            <x path="Bool"/>
        </paused>
        <initialized>
            <x path="Bool"/>
        </initialized>
        <detailsLength>
            <x path="Int"/>
        </detailsLength>
        <cacheVisible>
            <x path="Bool"/>
        </cacheVisible>
        <active>
            <x path="Bool"/>
        </active>
        <timeOffset>
            <x path="Float"/>
        </timeOffset>
        <new public="1" set="method" line="49">
            <f a="target:duration:properties">
                <d/>
                <x path="Float"/>
                <d/>
                <x path="Void"/>
            </f>
        </new>
        <haxe_doc>* @author Joshua Granick
            * @version 1.2
        </haxe_doc>
    </class>
    <class path="motion.easing.Expo" params="" file="/usr/lib/haxe/lib/actuate/1,6,3/motion/easing/Expo.hx">
        <easeIn public="1" get="accessor" set="null" static="1">
            <c path="motion.easing.IEasing"/>
        </easeIn>
        <easeInOut public="1" get="accessor" set="null" static="1">
            <c path="motion.easing.IEasing"/>
        </easeInOut>
        <easeOut public="1" get="accessor" set="null" static="1">
            <c path="motion.easing.IEasing"/>
        </easeOut>
        <get_easeIn set="method" line="19" static="1">
            <f a="">
                <c path="motion.easing.IEasing"/>
            </f>
        </get_easeIn>
        <get_easeInOut set="method" line="26" static="1">
            <f a="">
                <c path="motion.easing.IEasing"/>
            </f>
        </get_easeInOut>
        <get_easeOut set="method" line="33" static="1">
            <f a="">
                <c path="motion.easing.IEasing"/>
            </f>
        </get_easeOut>
    </class>
    <class path="motion.easing.IEasing" params="" file="/usr/lib/haxe/lib/actuate/1,6,3/motion/easing/IEasing.hx"
           interface="1">
        <ease public="1" set="method">
            <f a="t:b:c:d">
                <x path="Float"/>
                <x path="Float"/>
                <x path="Float"/>
                <x path="Float"/>
                <x path="Float"/>
            </f>
        </ease>
        <calculate public="1" set="method">
            <f a="k">
                <x path="Float"/>
                <x path="Float"/>
            </f>
        </calculate>
        <haxe_doc>* @author Joshua Granick
            * @author Philippe / http://philippe.elsass.me
        </haxe_doc>
    </class>
    <class path="motion.easing.ExpoEaseOut" params="" file="/usr/lib/haxe/lib/actuate/1,6,3/motion/easing/Expo.hx"
           module="motion.easing.Expo">
        <implements path="motion.easing.IEasing"/>
        <ease public="1" set="method" line="128">
            <f a="t:b:c:d">
                <x path="Float"/>
                <x path="Float"/>
                <x path="Float"/>
                <x path="Float"/>
                <x path="Float"/>
            </f>
        </ease>
        <calculate public="1" set="method" line="121">
            <f a="k">
                <x path="Float"/>
                <x path="Float"/>
            </f>
        </calculate>
        <new public="1" set="method" line="114">
            <f a="">
                <x path="Void"/>
            </f>
        </new>
    </class>
    <class path="motion.Actuate" params="" file="/usr/lib/haxe/lib/actuate/1,6,3/motion/Actuate.hx">
        <defaultActuator public="1" line="24" static="1">
            <x path="Class">
                <c path="motion.actuators.GenericActuator"/>
            </x>
        </defaultActuator>
        <defaultEase public="1" line="25" static="1">
            <c path="motion.easing.IEasing"/>
        </defaultEase>
        <targetLibraries line="26" static="1">
            <t path="motion.ObjectHash">
                <c path="Array">
                    <c path="motion.actuators.GenericActuator"/>
                </c>
            </t>
        </targetLibraries>
        <apply public="1" set="method" line="37" static="1">
            <f a="target:properties:?customActuator">
                <d/>
                <d/>
                <x path="Class">
                    <c path="motion.actuators.GenericActuator"/>
                </x>
                <c path="motion.actuators.IGenericActuator"/>
            </f>
            <haxe_doc><![CDATA[* Copies properties from one object to another. Conflicting tweens are stopped automatically
	 * @example		<code>Actuate.apply (MyClip, { alpha: 1 } );</code>
	 * @param	target		The object to copy to
	 * @param	properties		The object to copy from
	 * @param	customActuator		A custom actuator to use instead of the default (Optional)
	 * @return		The current actuator instance, which can be used to apply properties like onComplete or onUpdate handlers]]></haxe_doc>
        </apply>
        <effects public="1" set="method" line="64" static="1">
            <f a="target:duration:?overwrite">
                <c path="flash.display.DisplayObject"/>
                <x path="Float"/>
                <x path="Bool"/>
                <c path="motion._Actuate.EffectsOptions"/>
            </f>
            <haxe_doc>* Creates a new effects tween
                * @param target The object to tween
                * @param duration The length of the tween in seconds
                * @param overwrite Sets whether previous tweens for the same target and properties will be overwritten
                (Default is true)
                * @return An EffectsOptions instance, which is used to select the kind of effect you would like to apply
                to the target
            </haxe_doc>
        </effects>
        <getLibrary set="method" line="73" static="1">
            <f a="target">
                <d/>
                <c path="Array">
                    <c path="motion.actuators.GenericActuator"/>
                </c>
            </f>
        </getLibrary>
        <motionPath public="1" set="method" line="94" static="1">
            <f a="target:duration:properties:?overwrite">
                <d/>
                <x path="Float"/>
                <d/>
                <x path="Bool"/>
                <c path="motion.actuators.IGenericActuator"/>
            </f>
            <haxe_doc>* Creates a new MotionPath tween
                * @param target The object to tween
                * @param duration The length of the tween in seconds
                * @param properties An object containing a motion path for each property you wish to tween
                * @param overwrite Sets whether previous tweens for the same target and properties will be overwritten
                (Default is true)
                * @return The current actuator instance, which can be used to apply properties like ease, delay,
                onComplete or onUpdate
            </haxe_doc>
        </motionPath>
        <pause public="1" set="method" line="106" static="1">
            <f a="target">
                <d/>
                <x path="Void"/>
            </f>
            <haxe_doc>* Pauses tweens for the specified target objects
                * @param ... targets The target objects which will have their tweens paused. Passing no value pauses
                tweens for all objects
            </haxe_doc>
        </pause>
        <pauseAll public="1" set="method" line="127" static="1">
            <f a="">
                <x path="Void"/>
            </f>
        </pauseAll>
        <reset public="1" set="method" line="145" static="1">
            <f a="">
                <x path="Void"/>
            </f>
            <haxe_doc>* Resets Actuate by stopping and removing tweens for all objects</haxe_doc>
        </reset>
        <resume public="1" set="method" line="166" static="1">
            <f a="target">
                <d/>
                <x path="Void"/>
            </f>
            <haxe_doc>* Resumes paused tweens for the specified target objects
                * @param ... targets The target objects which will have their tweens resumed. Passing no value resumes
                tweens for all objects
            </haxe_doc>
        </resume>
        <resumeAll public="1" set="method" line="187" static="1">
            <f a="">
                <x path="Void"/>
            </f>
        </resumeAll>
        <stop public="1" set="method" line="209" static="1">
            <f a="target:?properties:?complete:?sendEvent">
                <d/>
                <d/>
                <x path="Bool"/>
                <x path="Bool"/>
                <x path="Void"/>
            </f>
            <haxe_doc>* Stops all tweens for an individual object
                * @param target The target object which will have its tweens stopped, or a generic actuator instance
                * @param properties A string, array or object which contains the properties you wish to stop, like
                "alpha", [ "x", "y" ] or { alpha: null }. Passing no value removes all tweens for the object (Optional)
                * @param complete If tweens should apply their final target values before stopping. Default is false
                (Optional)
                * @param sendEvent If a complete() event should be dispatched for the specified target. Default is true
                (Optional)
            </haxe_doc>
        </stop>
        <timer public="1" set="method" line="261" static="1">
            <f a="duration:?customActuator">
                <x path="Float"/>
                <x path="Class">
                    <c path="motion.actuators.GenericActuator"/>
                </x>
                <c path="motion.actuators.IGenericActuator"/>
            </f>
            <haxe_doc><![CDATA[* Creates a tween-based timer, which is useful for synchronizing function calls with other animations
	 * @example		<code>Actuate.timer (1).onComplete (trace, [ "Timer is now complete" ]);</code>
	 * @param	duration		The length of the timer in seconds
	 * @param	customActuator		A custom actuator to use instead of the default (Optional)
	 * @return		The current actuator instance, which can be used to apply properties like onComplete or to gain a reference to the target timer object]]></haxe_doc>
        </timer>
        <transform public="1" set="method" line="278" static="1">
            <f a="target:?duration:?overwrite">
                <d/>
                <x path="Float"/>
                <x path="Bool"/>
                <c path="motion._Actuate.TransformOptions"/>
            </f>
            <haxe_doc><![CDATA[* Creates a new transform tween
	 * @example		<code>Actuate.transform (MyClip, 1).color (0xFF0000);</code>
	 * @param	target		The object to tween
	 * @param	duration		The length of the tween in seconds
	 * @param	overwrite		Sets whether previous tweens for the same target and properties will be overwritten (Default is true)
	 * @return		A TransformOptions instance, which is used to select the kind of transform you would like to apply to the target]]></haxe_doc>
        </transform>
        <tween public="1" set="method" line="297" static="1">
            <f a="target:duration:properties:?overwrite:?customActuator">
                <d/>
                <x path="Float"/>
                <d/>
                <x path="Bool"/>
                <x path="Class">
                    <c path="motion.actuators.GenericActuator"/>
                </x>
                <c path="motion.actuators.IGenericActuator"/>
            </f>
            <haxe_doc><![CDATA[* Creates a new tween
	 * @example		<code>Actuate.tween (MyClip, 1, { alpha: 1 } ).onComplete (trace, [ "MyClip is now visible" ]);</code>
	 * @param	target		The object to tween
	 * @param	duration		The length of the tween in seconds
	 * @param	properties		The end values to tween the target to
	 * @param	overwrite			Sets whether previous tweens for the same target and properties will be overwritten (Default is true)
	 * @param	customActuator		A custom actuator to use instead of the default (Optional)
	 * @return		The current actuator instance, which can be used to apply properties like ease, delay, onComplete or onUpdate]]></haxe_doc>
        </tween>
        <unload public="1" set="method" line="354" static="1">
            <f a="actuator">
                <c path="motion.actuators.GenericActuator"/>
                <x path="Void"/>
            </f>
        </unload>
        <update public="1" set="method" line="383" static="1">
            <f a="target:duration:?start:?end:?overwrite">
                <d/>
                <x path="Float"/>
                <c path="Array">
                    <d/>
                </c>
                <c path="Array">
                    <d/>
                </c>
                <x path="Bool"/>
                <c path="motion.actuators.IGenericActuator"/>
            </f>
            <haxe_doc><![CDATA[* Creates a new tween that updates a method rather than setting the properties of an object
	 * @example		<code>Actuate.update (trace, 1, ["Value: ", 0], ["", 1]).onComplete (trace, [ "Finished tracing values between 0 and 1" ]);</code>
	 * @param	target		The method to update
	 * @param	duration		The length of the tween in seconds
	 * @param	start		The starting parameters of the method call. You may use both numeric and non-numeric values
	 * @param	end		The ending parameters of the method call. You may use both numeric and non-numeric values, but the signature should match the start parameters
	 * @param	overwrite		Sets whether previous tweens for the same target and properties will be overwritten (Default is true)
	 * @return		The current actuator instance, which can be used to apply properties like ease, delay, onComplete or onUpdate]]></haxe_doc>
        </update>
    </class>
    <class path="motion._Actuate.EffectsOptions" params="" file="/usr/lib/haxe/lib/actuate/1,6,3/motion/Actuate.hx"
           private="1" module="motion.Actuate">
        <filter public="1" set="method" line="432">
            <f a="reference:properties">
                <d/>
                <d/>
                <c path="motion.actuators.IGenericActuator"/>
            </f>
            <haxe_doc>* Creates a new BitmapFilter tween
                * @param reference A reference to the target's filter, which can be an array index or the class of the
                filter
                * @param properties The end properties to use for the tween
                * @return The current actuator instance, which can be used to apply properties like ease, delay,
                onComplete or onUpdate
            </haxe_doc>
        </filter>
        <target>
            <c path="flash.display.DisplayObject"/>
        </target>
        <overwrite>
            <x path="Bool"/>
        </overwrite>
        <duration>
            <x path="Float"/>
        </duration>
        <new public="1" set="method" line="417">
            <f a="target:duration:overwrite">
                <c path="flash.display.DisplayObject"/>
                <x path="Float"/>
                <x path="Bool"/>
                <x path="Void"/>
            </f>
        </new>
    </class>
    <class path="motion._Actuate.TransformOptions" params="" file="/usr/lib/haxe/lib/actuate/1,6,3/motion/Actuate.hx"
           private="1" module="motion.Actuate">
        <sound public="1" set="method" line="489">
            <f a="?volume:?pan">
                <x path="Float"/>
                <x path="Float"/>
                <c path="motion.actuators.IGenericActuator"/>
            </f>
            <haxe_doc>* Creates a new SoundTransform tween
                * @param volume The end volume for the target, or null if you would like to ignore this property
                (Default is null)
                * @param pan The end pan for the target, or null if you would like to ignore this property (Default is
                null)
                * @return The current actuator instance, which can be used to apply properties like ease, delay,
                onComplete or onUpdate
            </haxe_doc>
        </sound>
        <color public="1" set="method" line="468">
            <f a="?value:?strength:?alpha">
                <x path="Float"/>
                <x path="Float"/>
                <x path="Float"/>
                <c path="motion.actuators.IGenericActuator"/>
            </f>
            <haxe_doc>* Creates a new ColorTransform tween
                * @param color The color value
                * @param strength The percentage amount of tint to apply (Default is 1)
                * @param alpha The end alpha of the target. If you wish to tween alpha and tint simultaneously, you must
                do them both as part of the ColorTransform. A value of null will make no change to the alpha of the
                object (Default is null)
                * @return The current actuator instance, which can be used to apply properties like ease, delay,
                onComplete or onUpdate
            </haxe_doc>
        </color>
        <target>
            <d/>
        </target>
        <overwrite>
            <x path="Bool"/>
        </overwrite>
        <duration>
            <x path="Float"/>
        </duration>
        <new public="1" set="method" line="452">
            <f a="target:duration:overwrite">
                <d/>
                <x path="Float"/>
                <x path="Bool"/>
                <x path="Void"/>
            </f>
        </new>
    </class>
    <class path="motion._Actuate.TweenTimer" params="" file="/usr/lib/haxe/lib/actuate/1,6,3/motion/Actuate.hx"
           private="1" module="motion.Actuate">
        <progress public="1">
            <x path="Float"/>
        </progress>
        <new public="1" set="method" line="521">
            <f a="progress">
                <x path="Float"/>
                <x path="Void"/>
            </f>
        </new>
    </class>
    <typedef path="motion.ObjectHash" params="T" file="/usr/lib/haxe/lib/actuate/1,6,3/motion/Actuate.hx"
             module="motion.Actuate">
        <c path="haxe.ds.ObjectMap">
            <d/>
            <c path="motion.ObjectHash.T"/>
        </c>
    </typedef>
    <class path="motion.MotionPath" params="" file="/usr/lib/haxe/lib/actuate/1,6,3/motion/MotionPath.hx">
        <get_y set="method" line="75">
            <f a="">
                <c path="motion.IComponentPath"/>
            </f>
        </get_y>
        <get_x set="method" line="68">
            <f a="">
                <c path="motion.IComponentPath"/>
            </f>
        </get_x>
        <line public="1" set="method" line="51">
            <f a="x:y:?strength">
                <x path="Float"/>
                <x path="Float"/>
                <x path="Float"/>
                <c path="motion.MotionPath"/>
            </f>
            <haxe_doc>* Adds a line to the current motion path
                * @param x The x position of the end point for the line
                * @param x The y position of the end point for the line
                * @param strength The degree of emphasis that should be placed on this segment . If a motion path
                contains multiple segments with the same strength, they all receive equal emphasis (Default is 1)
                * @return The current motion path instance
            </haxe_doc>
        </line>
        <bezier public="1" set="method" line="34">
            <f a="x:y:controlX:controlY:?strength">
                <x path="Float"/>
                <x path="Float"/>
                <x path="Float"/>
                <x path="Float"/>
                <x path="Float"/>
                <c path="motion.MotionPath"/>
            </f>
            <haxe_doc>* Adds a bezier curve to the current motion path
                * @param x The x position of the end point for the curve
                * @param y The y position of the end point for the curve
                * @param controlX The x position of the control point for the curve, which affects the angle and
                midpoint
                * @param controlX The x position of the control point for the curve, which affects the angle and
                midpoint
                * @param strength The degree of emphasis that should be placed on this segment. If a motion path
                contains multiple segments with the same strength, they all receive equal emphasis (Default is 1)
                * @return The current motion path instance
            </haxe_doc>
        </bezier>
        <_y>
            <c path="motion.ComponentPath"/>
        </_y>
        <_x>
            <c path="motion.ComponentPath"/>
        </_x>
        <y public="1" get="accessor" set="null">
            <c path="motion.IComponentPath"/>
        </y>
        <x public="1" get="accessor" set="null">
            <c path="motion.IComponentPath"/>
        </x>
        <new public="1" set="method" line="17">
            <f a="">
                <x path="Void"/>
            </f>
        </new>
        <haxe_doc>* @author Joshua Granick</haxe_doc>
    </class>
    <class path="motion.IComponentPath" params="" file="/usr/lib/haxe/lib/actuate/1,6,3/motion/MotionPath.hx"
           module="motion.MotionPath" interface="1">
        <calculate public="1" set="method">
            <f a="k">
                <x path="Float"/>
                <x path="Float"/>
            </f>
        </calculate>
        <start public="1">
            <x path="Float"/>
        </start>
        <end public="1" get="null" set="null">
            <x path="Float"/>
        </end>
    </class>
    <class path="motion.ComponentPath" params="" file="/usr/lib/haxe/lib/actuate/1,6,3/motion/MotionPath.hx"
           module="motion.MotionPath">
        <implements path="motion.IComponentPath"/>
        <get_end set="method" line="151">
            <f a="">
                <x path="Float"/>
            </f>
        </get_end>
        <calculate public="1" set="method" line="112">
            <f a="k">
                <x path="Float"/>
                <x path="Float"/>
            </f>
        </calculate>
        <addPath public="1" set="method" line="104">
            <f a="path">
                <c path="motion.BezierPath"/>
                <x path="Void"/>
            </f>
        </addPath>
        <totalStrength>
            <x path="Float"/>
        </totalStrength>
        <paths>
            <c path="Array">
                <c path="motion.BezierPath"/>
            </c>
        </paths>
        <end public="1" get="accessor" set="null">
            <x path="Float"/>
        </end>
        <start public="1">
            <x path="Float"/>
        </start>
        <new public="1" set="method" line="95">
            <f a="">
                <x path="Void"/>
            </f>
        </new>
    </class>
    <class path="motion.BezierPath" params="" file="/usr/lib/haxe/lib/actuate/1,6,3/motion/MotionPath.hx"
           module="motion.MotionPath">
        <calculate public="1" set="method" line="201">
            <f a="start:k">
                <x path="Float"/>
                <x path="Float"/>
                <x path="Float"/>
            </f>
        </calculate>
        <strength public="1">
            <x path="Float"/>
        </strength>
        <end public="1">
            <x path="Float"/>
        </end>
        <control public="1">
            <x path="Float"/>
        </control>
        <new public="1" set="method" line="192">
            <f a="end:control:strength">
                <x path="Float"/>
                <x path="Float"/>
                <x path="Float"/>
                <x path="Void"/>
            </f>
        </new>
    </class>
    <class path="motion.LinearPath" params="" file="/usr/lib/haxe/lib/actuate/1,6,3/motion/MotionPath.hx"
           module="motion.MotionPath">
        <extends path="motion.BezierPath"/>
        <calculate public="1" set="method" line="221" override="1">
            <f a="start:k">
                <x path="Float"/>
                <x path="Float"/>
                <x path="Float"/>
            </f>
        </calculate>
        <new public="1" set="method" line="214">
            <f a="end:strength">
                <x path="Float"/>
                <x path="Float"/>
                <x path="Void"/>
            </f>
        </new>
    </class>
    <class path="motion.actuators.FilterActuator" params=""
           file="/usr/lib/haxe/lib/actuate/1,6,3/motion/actuators/FilterActuator.hx">
        <extends path="motion.actuators.SimpleActuator"/>
        <update set="method" line="93" override="1">
            <f a="currentTime">
                <x path="Float"/>
                <x path="Void"/>
            </f>
        </update>
        <initialize set="method" line="70" override="1">
            <f a="">
                <x path="Void"/>
            </f>
        </initialize>
        <apply public="1" set="method" line="51" override="1">
            <f a="">
                <x path="Void"/>
            </f>
        </apply>
        <filterIndex>
            <x path="Int"/>
        </filterIndex>
        <filterClass>
            <x path="Class">
                <c path="flash.filters.BitmapFilter"/>
            </x>
        </filterClass>
        <filter>
            <c path="flash.filters.BitmapFilter"/>
        </filter>
        <new public="1" set="method" line="21">
            <f a="target:duration:properties">
                <d/>
                <x path="Float"/>
                <d/>
                <x path="Void"/>
            </f>
        </new>
        <haxe_doc>* @author Joshua Granick
            * @version 1.2
        </haxe_doc>
    </class>
    <class path="motion.actuators.MethodActuator" params=""
           file="/usr/lib/haxe/lib/actuate/1,6,3/motion/actuators/MethodActuator.hx">
        <extends path="motion.actuators.SimpleActuator"/>
        <update set="method" line="109" override="1">
            <f a="currentTime">
                <x path="Float"/>
                <x path="Void"/>
            </f>
        </update>
        <initialize set="method" line="81" override="1">
            <f a="">
                <x path="Void"/>
            </f>
        </initialize>
        <complete set="method" line="58" override="1">
            <f a="?sendEvent">
                <x path="Bool"/>
                <x path="Void"/>
            </f>
        </complete>
        <apply public="1" set="method" line="43" override="1">
            <f a="">
                <x path="Void"/>
            </f>
        </apply>
        <tweenProperties>
            <d/>
        </tweenProperties>
        <currentParameters>
            <c path="Array">
                <d/>
            </c>
        </currentParameters>
        <new public="1" set="method" line="15">
            <f a="target:duration:properties">
                <d/>
                <x path="Float"/>
                <d/>
                <x path="Void"/>
            </f>
        </new>
        <haxe_doc>* @author Joshua Granick
            * @version 1.2
        </haxe_doc>
    </class>
    <class path="motion.actuators.MotionPathActuator" params=""
           file="/usr/lib/haxe/lib/actuate/1,6,3/motion/actuators/MotionPathActuator.hx">
        <extends path="motion.actuators.SimpleActuator"/>
        <update set="method" line="92" override="1">
            <f a="currentTime">
                <x path="Float"/>
                <x path="Void"/>
            </f>
        </update>
        <initialize set="method" line="47" override="1">
            <f a="">
                <x path="Void"/>
            </f>
        </initialize>
        <apply public="1" set="method" line="20" override="1">
            <f a="">
                <x path="Void"/>
            </f>
        </apply>
        <new public="1" set="method" line="13">
            <f a="target:duration:properties">
                <d/>
                <x path="Float"/>
                <d/>
                <x path="Void"/>
            </f>
        </new>
        <haxe_doc>* @author Joshua Granick</haxe_doc>
    </class>
    <class path="motion.actuators.PropertyDetails" params=""
           file="/usr/lib/haxe/lib/actuate/1,6,3/motion/actuators/PropertyDetails.hx">
        <target public="1">
            <d/>
        </target>
        <start public="1">
            <x path="Float"/>
        </start>
        <propertyName public="1">
            <c path="String"/>
        </propertyName>
        <isField public="1">
            <x path="Bool"/>
        </isField>
        <change public="1">
            <x path="Float"/>
        </change>
        <new public="1" set="method" line="19">
            <f a="target:propertyName:start:change:?isField">
                <d/>
                <c path="String"/>
                <x path="Float"/>
                <x path="Float"/>
                <x path="Bool"/>
                <x path="Void"/>
            </f>
        </new>
    </class>
    <class path="motion.actuators.PropertyPathDetails" params=""
           file="/usr/lib/haxe/lib/actuate/1,6,3/motion/actuators/MotionPathActuator.hx"
           module="motion.actuators.MotionPathActuator">
        <extends path="motion.actuators.PropertyDetails"/>
        <path public="1">
            <c path="motion.IComponentPath"/>
        </path>
        <new public="1" set="method" line="245">
            <f a="target:propertyName:path:?isField">
                <d/>
                <c path="String"/>
                <c path="motion.IComponentPath"/>
                <x path="Bool"/>
                <x path="Void"/>
            </f>
        </new>
    </class>
    <class path="motion.actuators.TransformActuator" params=""
           file="/usr/lib/haxe/lib/actuate/1,6,3/motion/actuators/TransformActuator.hx">
        <extends path="motion.actuators.SimpleActuator"/>
        <update set="method" line="175" override="1">
            <f a="currentTime">
                <x path="Float"/>
                <x path="Void"/>
            </f>
        </update>
        <initializeSound set="method" line="146">
            <f a="">
                <x path="Void"/>
            </f>
        </initializeSound>
        <initializeColor set="method" line="70">
            <f a="">
                <x path="Void"/>
            </f>
        </initializeColor>
        <initialize set="method" line="50" override="1">
            <f a="">
                <x path="Void"/>
            </f>
        </initialize>
        <apply public="1" set="method" line="31" override="1">
            <f a="">
                <x path="Void"/>
            </f>
        </apply>
        <tweenSoundTransform>
            <c path="flash.media.SoundTransform"/>
        </tweenSoundTransform>
        <tweenColorTransform>
            <c path="flash.geom.ColorTransform"/>
        </tweenColorTransform>
        <endSoundTransform>
            <c path="flash.media.SoundTransform"/>
        </endSoundTransform>
        <endColorTransform>
            <c path="flash.geom.ColorTransform"/>
        </endColorTransform>
        <new public="1" set="method" line="24">
            <f a="target:duration:properties">
                <d/>
                <x path="Float"/>
                <d/>
                <x path="Void"/>
            </f>
        </new>
        <haxe_doc>* @author Joshua Granick
            * @version 1.2
        </haxe_doc>
    </class>
    <class path="motion.easing.Back" params="" file="/usr/lib/haxe/lib/actuate/1,6,3/motion/easing/Back.hx">
        <easeIn public="1" get="accessor" set="null" static="1">
            <c path="motion.easing.IEasing"/>
        </easeIn>
        <easeInOut public="1" get="accessor" set="null" static="1">
            <c path="motion.easing.IEasing"/>
        </easeInOut>
        <easeOut public="1" get="accessor" set="null" static="1">
            <c path="motion.easing.IEasing"/>
        </easeOut>
        <get_easeIn set="method" line="19" static="1">
            <f a="">
                <c path="motion.easing.IEasing"/>
            </f>
        </get_easeIn>
        <get_easeInOut set="method" line="26" static="1">
            <f a="">
                <c path="motion.easing.IEasing"/>
            </f>
        </get_easeInOut>
        <get_easeOut set="method" line="33" static="1">
            <f a="">
                <c path="motion.easing.IEasing"/>
            </f>
        </get_easeOut>
    </class>
    <class path="motion.easing.BackEaseIn" params="" file="/usr/lib/haxe/lib/actuate/1,6,3/motion/easing/Back.hx"
           module="motion.easing.Back">
        <implements path="motion.easing.IEasing"/>
        <ease public="1" set="method" line="63">
            <f a="t:b:c:d">
                <x path="Float"/>
                <x path="Float"/>
                <x path="Float"/>
                <x path="Float"/>
                <x path="Float"/>
            </f>
        </ease>
        <calculate public="1" set="method" line="56">
            <f a="k">
                <x path="Float"/>
                <x path="Float"/>
            </f>
        </calculate>
        <s public="1">
            <x path="Float"/>
        </s>
        <new public="1" set="method" line="49">
            <f a="s">
                <x path="Float"/>
                <x path="Void"/>
            </f>
        </new>
    </class>
    <class path="motion.easing.BackEaseInOut" params="" file="/usr/lib/haxe/lib/actuate/1,6,3/motion/easing/Back.hx"
           module="motion.easing.Back">
        <implements path="motion.easing.IEasing"/>
        <ease public="1" set="method" line="94">
            <f a="t:b:c:d">
                <x path="Float"/>
                <x path="Float"/>
                <x path="Float"/>
                <x path="Float"/>
                <x path="Float"/>
            </f>
        </ease>
        <calculate public="1" set="method" line="86">
            <f a="k">
                <x path="Float"/>
                <x path="Float"/>
            </f>
        </calculate>
        <s public="1">
            <x path="Float"/>
        </s>
        <new public="1" set="method" line="79">
            <f a="s">
                <x path="Float"/>
                <x path="Void"/>
            </f>
        </new>
    </class>
    <class path="motion.easing.BackEaseOut" params="" file="/usr/lib/haxe/lib/actuate/1,6,3/motion/easing/Back.hx"
           module="motion.easing.Back">
        <implements path="motion.easing.IEasing"/>
        <ease public="1" set="method" line="125">
            <f a="t:b:c:d">
                <x path="Float"/>
                <x path="Float"/>
                <x path="Float"/>
                <x path="Float"/>
                <x path="Float"/>
            </f>
        </ease>
        <calculate public="1" set="method" line="118">
            <f a="k">
                <x path="Float"/>
                <x path="Float"/>
            </f>
        </calculate>
        <s public="1">
            <x path="Float"/>
        </s>
        <new public="1" set="method" line="111">
            <f a="s">
                <x path="Float"/>
                <x path="Void"/>
            </f>
        </new>
    </class>
    <class path="motion.easing.Bounce" params="" file="/usr/lib/haxe/lib/actuate/1,6,3/motion/easing/Bounce.hx">
        <easeIn public="1" get="accessor" set="null" static="1">
            <c path="motion.easing.IEasing"/>
        </easeIn>
        <easeInOut public="1" get="accessor" set="null" static="1">
            <c path="motion.easing.IEasing"/>
        </easeInOut>
        <easeOut public="1" get="accessor" set="null" static="1">
            <c path="motion.easing.IEasing"/>
        </easeOut>
        <get_easeIn set="method" line="18" static="1">
            <f a="">
                <c path="motion.easing.IEasing"/>
            </f>
        </get_easeIn>
        <get_easeInOut set="method" line="25" static="1">
            <f a="">
                <c path="motion.easing.IEasing"/>
            </f>
        </get_easeInOut>
        <get_easeOut set="method" line="32" static="1">
            <f a="">
                <c path="motion.easing.IEasing"/>
            </f>
        </get_easeOut>
    </class>
    <class path="motion.easing.BounceEaseIn" params="" file="/usr/lib/haxe/lib/actuate/1,6,3/motion/easing/Bounce.hx"
           module="motion.easing.Bounce">
        <implements path="motion.easing.IEasing"/>
        <_ease public="1" get="inline" set="null" line="65" static="1">
            <f a="t:b:c:d">
                <x path="Float"/>
                <x path="Float"/>
                <x path="Float"/>
                <x path="Float"/>
                <x path="Float"/>
            </f>
        </_ease>
        <ease public="1" set="method" line="61">
            <f a="t:b:c:d">
                <x path="Float"/>
                <x path="Float"/>
                <x path="Float"/>
                <x path="Float"/>
                <x path="Float"/>
            </f>
        </ease>
        <calculate public="1" set="method" line="56">
            <f a="k">
                <x path="Float"/>
                <x path="Float"/>
            </f>
        </calculate>
        <new public="1" set="method" line="50">
            <f a="">
                <x path="Void"/>
            </f>
        </new>
    </class>
    <class path="motion.easing.BounceEaseInOut" params="" file="/usr/lib/haxe/lib/actuate/1,6,3/motion/easing/Bounce.hx"
           module="motion.easing.Bounce">
        <implements path="motion.easing.IEasing"/>
        <ease public="1" set="method" line="91">
            <f a="t:b:c:d">
                <x path="Float"/>
                <x path="Float"/>
                <x path="Float"/>
                <x path="Float"/>
                <x path="Float"/>
            </f>
        </ease>
        <calculate public="1" set="method" line="81">
            <f a="k">
                <x path="Float"/>
                <x path="Float"/>
            </f>
        </calculate>
        <new public="1" set="method" line="75">
            <f a="">
                <x path="Void"/>
            </f>
        </new>
    </class>
    <class path="motion.easing.BounceEaseOut" params="" file="/usr/lib/haxe/lib/actuate/1,6,3/motion/easing/Bounce.hx"
           module="motion.easing.Bounce">
        <implements path="motion.easing.IEasing"/>
        <_ease public="1" get="inline" set="null" line="128" static="1">
            <f a="t:b:c:d">
                <x path="Float"/>
                <x path="Float"/>
                <x path="Float"/>
                <x path="Float"/>
                <x path="Float"/>
            </f>
        </_ease>
        <ease public="1" set="method" line="122">
            <f a="t:b:c:d">
                <x path="Float"/>
                <x path="Float"/>
                <x path="Float"/>
                <x path="Float"/>
                <x path="Float"/>
            </f>
        </ease>
        <calculate public="1" set="method" line="115">
            <f a="k">
                <x path="Float"/>
                <x path="Float"/>
            </f>
        </calculate>
        <new public="1" set="method" line="109">
            <f a="">
                <x path="Void"/>
            </f>
        </new>
    </class>
    <class path="motion.easing.Cubic" params="" file="/usr/lib/haxe/lib/actuate/1,6,3/motion/easing/Cubic.hx">
        <easeIn public="1" get="accessor" set="null" static="1">
            <c path="motion.easing.IEasing"/>
        </easeIn>
        <easeInOut public="1" get="accessor" set="null" static="1">
            <c path="motion.easing.IEasing"/>
        </easeInOut>
        <easeOut public="1" get="accessor" set="null" static="1">
            <c path="motion.easing.IEasing"/>
        </easeOut>
        <get_easeIn set="method" line="19" static="1">
            <f a="">
                <c path="motion.easing.IEasing"/>
            </f>
        </get_easeIn>
        <get_easeInOut set="method" line="26" static="1">
            <f a="">
                <c path="motion.easing.IEasing"/>
            </f>
        </get_easeInOut>
        <get_easeOut set="method" line="33" static="1">
            <f a="">
                <c path="motion.easing.IEasing"/>
            </f>
        </get_easeOut>
    </class>
    <class path="motion.easing.CubicEaseIn" params="" file="/usr/lib/haxe/lib/actuate/1,6,3/motion/easing/Cubic.hx"
           module="motion.easing.Cubic">
        <implements path="motion.easing.IEasing"/>
        <ease public="1" set="method" line="60">
            <f a="t:b:c:d">
                <x path="Float"/>
                <x path="Float"/>
                <x path="Float"/>
                <x path="Float"/>
                <x path="Float"/>
            </f>
        </ease>
        <calculate public="1" set="method" line="53">
            <f a="k">
                <x path="Float"/>
                <x path="Float"/>
            </f>
        </calculate>
        <new public="1" set="method" line="46">
            <f a="">
                <x path="Void"/>
            </f>
        </new>
    </class>
    <class path="motion.easing.CubicEaseInOut" params="" file="/usr/lib/haxe/lib/actuate/1,6,3/motion/easing/Cubic.hx"
           module="motion.easing.Cubic">
        <implements path="motion.easing.IEasing"/>
        <ease public="1" set="method" line="87">
            <f a="t:b:c:d">
                <x path="Float"/>
                <x path="Float"/>
                <x path="Float"/>
                <x path="Float"/>
                <x path="Float"/>
            </f>
        </ease>
        <calculate public="1" set="method" line="80">
            <f a="k">
                <x path="Float"/>
                <x path="Float"/>
            </f>
        </calculate>
        <new public="1" set="method" line="73">
            <f a="">
                <x path="Void"/>
            </f>
        </new>
    </class>
    <class path="motion.easing.CubicEaseOut" params="" file="/usr/lib/haxe/lib/actuate/1,6,3/motion/easing/Cubic.hx"
           module="motion.easing.Cubic">
        <implements path="motion.easing.IEasing"/>
        <ease public="1" set="method" line="114">
            <f a="t:b:c:d">
                <x path="Float"/>
                <x path="Float"/>
                <x path="Float"/>
                <x path="Float"/>
                <x path="Float"/>
            </f>
        </ease>
        <calculate public="1" set="method" line="107">
            <f a="k">
                <x path="Float"/>
                <x path="Float"/>
            </f>
        </calculate>
        <new public="1" set="method" line="100">
            <f a="">
                <x path="Void"/>
            </f>
        </new>
    </class>
    <class path="motion.easing.Elastic" params="" file="/usr/lib/haxe/lib/actuate/1,6,3/motion/easing/Elastic.hx">
        <easeIn public="1" get="accessor" set="null" static="1">
            <c path="motion.easing.IEasing"/>
        </easeIn>
        <easeInOut public="1" get="accessor" set="null" static="1">
            <c path="motion.easing.IEasing"/>
        </easeInOut>
        <easeOut public="1" get="accessor" set="null" static="1">
            <c path="motion.easing.IEasing"/>
        </easeOut>
        <get_easeIn set="method" line="20" static="1">
            <f a="">
                <c path="motion.easing.IEasing"/>
            </f>
        </get_easeIn>
        <get_easeInOut set="method" line="27" static="1">
            <f a="">
                <c path="motion.easing.IEasing"/>
            </f>
        </get_easeInOut>
        <get_easeOut set="method" line="34" static="1">
            <f a="">
                <c path="motion.easing.IEasing"/>
            </f>
        </get_easeOut>
    </class>
    <class path="motion.easing.ElasticEaseIn" params="" file="/usr/lib/haxe/lib/actuate/1,6,3/motion/easing/Elastic.hx"
           module="motion.easing.Elastic">
        <implements path="motion.easing.IEasing"/>
        <ease public="1" set="method" line="70">
            <f a="t:b:c:d">
                <x path="Float"/>
                <x path="Float"/>
                <x path="Float"/>
                <x path="Float"/>
                <x path="Float"/>
            </f>
        </ease>
        <calculate public="1" set="method" line="59">
            <f a="k">
                <x path="Float"/>
                <x path="Float"/>
            </f>
        </calculate>
        <p public="1">
            <x path="Float"/>
        </p>
        <a public="1">
            <x path="Float"/>
        </a>
        <new public="1" set="method" line="51">
            <f a="a:p">
                <x path="Float"/>
                <x path="Float"/>
                <x path="Void"/>
            </f>
        </new>
    </class>
    <class path="motion.easing.ElasticEaseInOut" params=""
           file="/usr/lib/haxe/lib/actuate/1,6,3/motion/easing/Elastic.hx" module="motion.easing.Elastic">
        <implements path="motion.easing.IEasing"/>
        <ease public="1" set="method" line="129">
            <f a="t:b:c:d">
                <x path="Float"/>
                <x path="Float"/>
                <x path="Float"/>
                <x path="Float"/>
                <x path="Float"/>
            </f>
        </ease>
        <calculate public="1" set="method" line="108">
            <f a="k">
                <x path="Float"/>
                <x path="Float"/>
            </f>
        </calculate>
        <p public="1">
            <x path="Float"/>
        </p>
        <a public="1">
            <x path="Float"/>
        </a>
        <new public="1" set="method" line="101">
            <f a="a:p">
                <x path="Float"/>
                <x path="Float"/>
                <x path="Void"/>
            </f>
        </new>
    </class>
    <class path="motion.easing.ElasticEaseOut" params="" file="/usr/lib/haxe/lib/actuate/1,6,3/motion/easing/Elastic.hx"
           module="motion.easing.Elastic">
        <implements path="motion.easing.IEasing"/>
        <ease public="1" set="method" line="182">
            <f a="t:b:c:d">
                <x path="Float"/>
                <x path="Float"/>
                <x path="Float"/>
                <x path="Float"/>
                <x path="Float"/>
            </f>
        </ease>
        <calculate public="1" set="method" line="171">
            <f a="k">
                <x path="Float"/>
                <x path="Float"/>
            </f>
        </calculate>
        <p public="1">
            <x path="Float"/>
        </p>
        <a public="1">
            <x path="Float"/>
        </a>
        <new public="1" set="method" line="163">
            <f a="a:p">
                <x path="Float"/>
                <x path="Float"/>
                <x path="Void"/>
            </f>
        </new>
    </class>
    <class path="motion.easing.ExpoEaseIn" params="" file="/usr/lib/haxe/lib/actuate/1,6,3/motion/easing/Expo.hx"
           module="motion.easing.Expo">
        <implements path="motion.easing.IEasing"/>
        <ease public="1" set="method" line="60">
            <f a="t:b:c:d">
                <x path="Float"/>
                <x path="Float"/>
                <x path="Float"/>
                <x path="Float"/>
                <x path="Float"/>
            </f>
        </ease>
        <calculate public="1" set="method" line="53">
            <f a="k">
                <x path="Float"/>
                <x path="Float"/>
            </f>
        </calculate>
        <new public="1" set="method" line="46">
            <f a="">
                <x path="Void"/>
            </f>
        </new>
    </class>
    <class path="motion.easing.ExpoEaseInOut" params="" file="/usr/lib/haxe/lib/actuate/1,6,3/motion/easing/Expo.hx"
           module="motion.easing.Expo">
        <implements path="motion.easing.IEasing"/>
        <ease public="1" set="method" line="92">
            <f a="t:b:c:d">
                <x path="Float"/>
                <x path="Float"/>
                <x path="Float"/>
                <x path="Float"/>
                <x path="Float"/>
            </f>
        </ease>
        <calculate public="1" set="method" line="80">
            <f a="k">
                <x path="Float"/>
                <x path="Float"/>
            </f>
        </calculate>
        <new public="1" set="method" line="73">
            <f a="">
                <x path="Void"/>
            </f>
        </new>
    </class>
    <class path="motion.easing.Linear" params="" file="/usr/lib/haxe/lib/actuate/1,6,3/motion/easing/Linear.hx">
        <easeNone public="1" get="accessor" set="null" static="1">
            <c path="motion.easing.IEasing"/>
        </easeNone>
        <get_easeNone set="method" line="17" static="1">
            <f a="">
                <c path="motion.easing.IEasing"/>
            </f>
        </get_easeNone>
    </class>
    <class path="motion.easing.LinearEaseNone" params="" file="/usr/lib/haxe/lib/actuate/1,6,3/motion/easing/Linear.hx"
           module="motion.easing.Linear">
        <implements path="motion.easing.IEasing"/>
        <ease public="1" set="method" line="44">
            <f a="t:b:c:d">
                <x path="Float"/>
                <x path="Float"/>
                <x path="Float"/>
                <x path="Float"/>
                <x path="Float"/>
            </f>
        </ease>
        <calculate public="1" set="method" line="37">
            <f a="k">
                <x path="Float"/>
                <x path="Float"/>
            </f>
        </calculate>
        <new public="1" set="method" line="30">
            <f a="">
                <x path="Void"/>
            </f>
        </new>
    </class>
    <class path="motion.easing.Quad" params="" file="/usr/lib/haxe/lib/actuate/1,6,3/motion/easing/Quad.hx">
        <easeIn public="1" get="accessor" set="null" static="1">
            <c path="motion.easing.IEasing"/>
        </easeIn>
        <easeInOut public="1" get="accessor" set="null" static="1">
            <c path="motion.easing.IEasing"/>
        </easeInOut>
        <easeOut public="1" get="accessor" set="null" static="1">
            <c path="motion.easing.IEasing"/>
        </easeOut>
        <get_easeIn set="method" line="19" static="1">
            <f a="">
                <c path="motion.easing.IEasing"/>
            </f>
        </get_easeIn>
        <get_easeInOut set="method" line="26" static="1">
            <f a="">
                <c path="motion.easing.IEasing"/>
            </f>
        </get_easeInOut>
        <get_easeOut set="method" line="33" static="1">
            <f a="">
                <c path="motion.easing.IEasing"/>
            </f>
        </get_easeOut>
    </class>
    <class path="motion.easing.QuadEaseIn" params="" file="/usr/lib/haxe/lib/actuate/1,6,3/motion/easing/Quad.hx"
           module="motion.easing.Quad">
        <implements path="motion.easing.IEasing"/>
        <ease public="1" set="method" line="60">
            <f a="t:b:c:d">
                <x path="Float"/>
                <x path="Float"/>
                <x path="Float"/>
                <x path="Float"/>
                <x path="Float"/>
            </f>
        </ease>
        <calculate public="1" set="method" line="53">
            <f a="k">
                <x path="Float"/>
                <x path="Float"/>
            </f>
        </calculate>
        <new public="1" set="method" line="46">
            <f a="">
                <x path="Void"/>
            </f>
        </new>
    </class>
    <class path="motion.easing.QuadEaseInOut" params="" file="/usr/lib/haxe/lib/actuate/1,6,3/motion/easing/Quad.hx"
           module="motion.easing.Quad">
        <implements path="motion.easing.IEasing"/>
        <ease public="1" set="method" line="90">
            <f a="t:b:c:d">
                <x path="Float"/>
                <x path="Float"/>
                <x path="Float"/>
                <x path="Float"/>
                <x path="Float"/>
            </f>
        </ease>
        <calculate public="1" set="method" line="80">
            <f a="k">
                <x path="Float"/>
                <x path="Float"/>
            </f>
        </calculate>
        <new public="1" set="method" line="73">
            <f a="">
                <x path="Void"/>
            </f>
        </new>
    </class>
    <class path="motion.easing.QuadEaseOut" params="" file="/usr/lib/haxe/lib/actuate/1,6,3/motion/easing/Quad.hx"
           module="motion.easing.Quad">
        <implements path="motion.easing.IEasing"/>
        <ease public="1" set="method" line="120">
            <f a="t:b:c:d">
                <x path="Float"/>
                <x path="Float"/>
                <x path="Float"/>
                <x path="Float"/>
                <x path="Float"/>
            </f>
        </ease>
        <calculate public="1" set="method" line="113">
            <f a="k">
                <x path="Float"/>
                <x path="Float"/>
            </f>
        </calculate>
        <new public="1" set="method" line="106">
            <f a="">
                <x path="Void"/>
            </f>
        </new>
    </class>
    <class path="motion.easing.Quart" params="" file="/usr/lib/haxe/lib/actuate/1,6,3/motion/easing/Quart.hx">
        <easeIn public="1" get="accessor" set="null" static="1">
            <c path="motion.easing.IEasing"/>
        </easeIn>
        <easeInOut public="1" get="accessor" set="null" static="1">
            <c path="motion.easing.IEasing"/>
        </easeInOut>
        <easeOut public="1" get="accessor" set="null" static="1">
            <c path="motion.easing.IEasing"/>
        </easeOut>
        <get_easeIn set="method" line="19" static="1">
            <f a="">
                <c path="motion.easing.IEasing"/>
            </f>
        </get_easeIn>
        <get_easeInOut set="method" line="26" static="1">
            <f a="">
                <c path="motion.easing.IEasing"/>
            </f>
        </get_easeInOut>
        <get_easeOut set="method" line="33" static="1">
            <f a="">
                <c path="motion.easing.IEasing"/>
            </f>
        </get_easeOut>
    </class>
    <class path="motion.easing.QuartEaseIn" params="" file="/usr/lib/haxe/lib/actuate/1,6,3/motion/easing/Quart.hx"
           module="motion.easing.Quart">
        <implements path="motion.easing.IEasing"/>
        <ease public="1" set="method" line="60">
            <f a="t:b:c:d">
                <x path="Float"/>
                <x path="Float"/>
                <x path="Float"/>
                <x path="Float"/>
                <x path="Float"/>
            </f>
        </ease>
        <calculate public="1" set="method" line="53">
            <f a="k">
                <x path="Float"/>
                <x path="Float"/>
            </f>
        </calculate>
        <new public="1" set="method" line="46">
            <f a="">
                <x path="Void"/>
            </f>
        </new>
    </class>
    <class path="motion.easing.QuartEaseInOut" params="" file="/usr/lib/haxe/lib/actuate/1,6,3/motion/easing/Quart.hx"
           module="motion.easing.Quart">
        <implements path="motion.easing.IEasing"/>
        <ease public="1" set="method" line="88">
            <f a="t:b:c:d">
                <x path="Float"/>
                <x path="Float"/>
                <x path="Float"/>
                <x path="Float"/>
                <x path="Float"/>
            </f>
        </ease>
        <calculate public="1" set="method" line="80">
            <f a="k">
                <x path="Float"/>
                <x path="Float"/>
            </f>
        </calculate>
        <new public="1" set="method" line="73">
            <f a="">
                <x path="Void"/>
            </f>
        </new>
    </class>
    <class path="motion.easing.QuartEaseOut" params="" file="/usr/lib/haxe/lib/actuate/1,6,3/motion/easing/Quart.hx"
           module="motion.easing.Quart">
        <implements path="motion.easing.IEasing"/>
        <ease public="1" set="method" line="118">
            <f a="t:b:c:d">
                <x path="Float"/>
                <x path="Float"/>
                <x path="Float"/>
                <x path="Float"/>
                <x path="Float"/>
            </f>
        </ease>
        <calculate public="1" set="method" line="111">
            <f a="k">
                <x path="Float"/>
                <x path="Float"/>
            </f>
        </calculate>
        <new public="1" set="method" line="104">
            <f a="">
                <x path="Void"/>
            </f>
        </new>
    </class>
    <class path="motion.easing.Quint" params="" file="/usr/lib/haxe/lib/actuate/1,6,3/motion/easing/Quint.hx">
        <easeIn public="1" get="accessor" set="null" static="1">
            <c path="motion.easing.IEasing"/>
        </easeIn>
        <easeInOut public="1" get="accessor" set="null" static="1">
            <c path="motion.easing.IEasing"/>
        </easeInOut>
        <easeOut public="1" get="accessor" set="null" static="1">
            <c path="motion.easing.IEasing"/>
        </easeOut>
        <get_easeIn set="method" line="19" static="1">
            <f a="">
                <c path="motion.easing.IEasing"/>
            </f>
        </get_easeIn>
        <get_easeInOut set="method" line="26" static="1">
            <f a="">
                <c path="motion.easing.IEasing"/>
            </f>
        </get_easeInOut>
        <get_easeOut set="method" line="33" static="1">
            <f a="">
                <c path="motion.easing.IEasing"/>
            </f>
        </get_easeOut>
    </class>
    <class path="motion.easing.QuintEaseIn" params="" file="/usr/lib/haxe/lib/actuate/1,6,3/motion/easing/Quint.hx"
           module="motion.easing.Quint">
        <implements path="motion.easing.IEasing"/>
        <ease public="1" set="method" line="60">
            <f a="t:b:c:d">
                <x path="Float"/>
                <x path="Float"/>
                <x path="Float"/>
                <x path="Float"/>
                <x path="Float"/>
            </f>
        </ease>
        <calculate public="1" set="method" line="53">
            <f a="k">
                <x path="Float"/>
                <x path="Float"/>
            </f>
        </calculate>
        <new public="1" set="method" line="46">
            <f a="">
                <x path="Void"/>
            </f>
        </new>
    </class>
    <class path="motion.easing.QuintEaseInOut" params="" file="/usr/lib/haxe/lib/actuate/1,6,3/motion/easing/Quint.hx"
           module="motion.easing.Quint">
        <implements path="motion.easing.IEasing"/>
        <ease public="1" set="method" line="88">
            <f a="t:b:c:d">
                <x path="Float"/>
                <x path="Float"/>
                <x path="Float"/>
                <x path="Float"/>
                <x path="Float"/>
            </f>
        </ease>
        <calculate public="1" set="method" line="80">
            <f a="k">
                <x path="Float"/>
                <x path="Float"/>
            </f>
        </calculate>
        <new public="1" set="method" line="73">
            <f a="">
                <x path="Void"/>
            </f>
        </new>
    </class>
    <class path="motion.easing.QuintEaseOut" params="" file="/usr/lib/haxe/lib/actuate/1,6,3/motion/easing/Quint.hx"
           module="motion.easing.Quint">
        <implements path="motion.easing.IEasing"/>
        <ease public="1" set="method" line="118">
            <f a="t:b:c:d">
                <x path="Float"/>
                <x path="Float"/>
                <x path="Float"/>
                <x path="Float"/>
                <x path="Float"/>
            </f>
        </ease>
        <calculate public="1" set="method" line="111">
            <f a="k">
                <x path="Float"/>
                <x path="Float"/>
            </f>
        </calculate>
        <new public="1" set="method" line="104">
            <f a="">
                <x path="Void"/>
            </f>
        </new>
    </class>
    <class path="motion.easing.Sine" params="" file="/usr/lib/haxe/lib/actuate/1,6,3/motion/easing/Sine.hx">
        <easeIn public="1" get="accessor" set="null" static="1">
            <c path="motion.easing.IEasing"/>
        </easeIn>
        <easeInOut public="1" get="accessor" set="null" static="1">
            <c path="motion.easing.IEasing"/>
        </easeInOut>
        <easeOut public="1" get="accessor" set="null" static="1">
            <c path="motion.easing.IEasing"/>
        </easeOut>
        <get_easeIn set="method" line="18" static="1">
            <f a="">
                <c path="motion.easing.IEasing"/>
            </f>
        </get_easeIn>
        <get_easeInOut set="method" line="25" static="1">
            <f a="">
                <c path="motion.easing.IEasing"/>
            </f>
        </get_easeInOut>
        <get_easeOut set="method" line="32" static="1">
            <f a="">
                <c path="motion.easing.IEasing"/>
            </f>
        </get_easeOut>
    </class>
    <class path="motion.easing.SineEaseIn" params="" file="/usr/lib/haxe/lib/actuate/1,6,3/motion/easing/Sine.hx"
           module="motion.easing.Sine">
        <implements path="motion.easing.IEasing"/>
        <ease public="1" set="method" line="59">
            <f a="t:b:c:d">
                <x path="Float"/>
                <x path="Float"/>
                <x path="Float"/>
                <x path="Float"/>
                <x path="Float"/>
            </f>
        </ease>
        <calculate public="1" set="method" line="52">
            <f a="k">
                <x path="Float"/>
                <x path="Float"/>
            </f>
        </calculate>
        <new public="1" set="method" line="45">
            <f a="">
                <x path="Void"/>
            </f>
        </new>
    </class>
    <class path="motion.easing.SineEaseInOut" params="" file="/usr/lib/haxe/lib/actuate/1,6,3/motion/easing/Sine.hx"
           module="motion.easing.Sine">
        <implements path="motion.easing.IEasing"/>
        <ease public="1" set="method" line="86">
            <f a="t:b:c:d">
                <x path="Float"/>
                <x path="Float"/>
                <x path="Float"/>
                <x path="Float"/>
                <x path="Float"/>
            </f>
        </ease>
        <calculate public="1" set="method" line="79">
            <f a="k">
                <x path="Float"/>
                <x path="Float"/>
            </f>
        </calculate>
        <new public="1" set="method" line="72">
            <f a="">
                <x path="Void"/>
            </f>
        </new>
    </class>
    <class path="motion.easing.SineEaseOut" params="" file="/usr/lib/haxe/lib/actuate/1,6,3/motion/easing/Sine.hx"
           module="motion.easing.Sine">
        <implements path="motion.easing.IEasing"/>
        <ease public="1" set="method" line="113">
            <f a="t:b:c:d">
                <x path="Float"/>
                <x path="Float"/>
                <x path="Float"/>
                <x path="Float"/>
                <x path="Float"/>
            </f>
        </ease>
        <calculate public="1" set="method" line="106">
            <f a="k">
                <x path="Float"/>
                <x path="Float"/>
            </f>
        </calculate>
        <new public="1" set="method" line="99">
            <f a="">
                <x path="Void"/>
            </f>
        </new>
    </class>
    <class path="nme.Assets" params="" file="/Users/jbrichardet/Development/NME/nme/Assets.hx">
        <cachedBitmapData public="1" line="49" static="1">
            <x path="Map">
                <c path="String"/>
                <t path="nme.display.BitmapData"/>
            </x>
        </cachedBitmapData>
        <id public="1" get="accessor" set="null" static="1">
            <c path="Array">
                <c path="String"/>
            </c>
        </id>
        <library public="1" get="accessor" set="null" static="1">
            <x path="Map">
                <c path="String"/>
                <e path="nme.LibraryType"/>
            </x>
        </library>
        <path public="1" get="accessor" set="null" static="1">
            <x path="Map">
                <c path="String"/>
                <c path="String"/>
            </x>
        </path>
        <type public="1" get="accessor" set="null" static="1">
            <x path="Map">
                <c path="String"/>
                <e path="nme.AssetType"/>
            </x>
        </type>
        <initialized line="58" static="1">
            <x path="Bool"/>
        </initialized>
        <initialize set="method" line="61" static="1">
            <f a="">
                <x path="Void"/>
            </f>
        </initialize>
        <getBitmapData public="1" set="method" line="85" static="1">
            <f a="id:?useCache">
                <c path="String"/>
                <x path="Bool"/>
                <t path="nme.display.BitmapData"/>
            </f>
            <haxe_doc>* Gets an instance of an embedded bitmap
                * @usage var bitmap = new Bitmap(Assets.getBitmapData("image.jpg"));
                * @param id The ID or asset path for the bitmap
                * @param useCache (Optional) Whether to use BitmapData from the cache(Default: true)
                * @return A new BItmapData object
            </haxe_doc>
        </getBitmapData>
        <getBytes public="1" set="method" line="197" static="1">
            <f a="id">
                <c path="String"/>
                <t path="nme.utils.ByteArray"/>
            </f>
            <haxe_doc>* Gets an instance of an embedded binary asset
                * @usage var bytes = Assets.getBytes("file.zip");
                * @param id The ID or asset path for the file
                * @return A new ByteArray object
            </haxe_doc>
        </getBytes>
        <getFont public="1" set="method" line="254" static="1">
            <f a="id">
                <c path="String"/>
                <t path="nme.text.Font"/>
            </f>
            <haxe_doc>* Gets an instance of an embedded font
                * @usage var fontName = Assets.getFont("font.ttf").fontName;
                * @param id The ID or asset path for the font
                * @return A new Font object
            </haxe_doc>
        </getFont>
        <getMovieClip public="1" set="method" line="291" static="1">
            <f a="id">
                <c path="String"/>
                <c path="format.display.MovieClip"/>
            </f>
            <haxe_doc>* Gets an instance of a library MovieClip
                * @usage var movieClip = Assets.getMovieClip("library:BouncingBall");
                * @param id The library and ID for the MovieClip
                * @return A new Sound object
            </haxe_doc>
        </getMovieClip>
        <getSound public="1" set="method" line="363" static="1">
            <f a="id">
                <c path="String"/>
                <t path="nme.media.Sound"/>
            </f>
            <haxe_doc>* Gets an instance of an embedded sound
                * @usage var sound = Assets.getSound("sound.wav");
                * @param id The ID or asset path for the sound
                * @return A new Sound object
            </haxe_doc>
        </getSound>
        <getText public="1" set="method" line="408" static="1">
            <f a="id">
                <c path="String"/>
                <c path="String"/>
            </f>
            <haxe_doc>* Gets an instance of an embedded text asset
                * @usage var text = Assets.getText("text.txt");
                * @param id The ID or asset path for the file
                * @return A new String object
            </haxe_doc>
        </getText>
        <get_id set="method" line="470" static="1">
            <f a="">
                <c path="Array">
                    <c path="String"/>
                </c>
            </f>
        </get_id>
        <get_library set="method" line="491" static="1">
            <f a="">
                <x path="Map">
                    <c path="String"/>
                    <e path="nme.LibraryType"/>
                </x>
            </f>
        </get_library>
        <get_path set="method" line="508" static="1">
            <f a="">
                <x path="Map">
                    <c path="String"/>
                    <c path="String"/>
                </x>
            </f>
        </get_path>
        <get_type set="method" line="525" static="1">
            <f a="">
                <x path="Map">
                    <c path="String"/>
                    <e path="nme.AssetType"/>
                </x>
            </f>
        </get_type>
        <haxe_doc><![CDATA[* <p>The Assets class provides a cross-platform interface to access
 * embedded images, fonts, sounds and other resource files.</p>
 *
 * <p>The contents are populated automatically when an application
 * is compiled using the NME command-line tools, based on the
 * contents of the *.nmml project file.</p>
 *
 * <p>For most platforms, the assets are included in the same directory
 * or package as the application, and the paths are handled
 * automatically. For web content, the assets are preloaded before
 * the start of the rest of the application. You can customize the
 * preloader by extending the <code>NMEPreloader</code> class,
 * and specifying a custom preloader using <window preloader="" />
 * in the project file.</p>]]></haxe_doc>
    </class>
    <enum path="nme.AssetType" params="" file="/Users/jbrichardet/Development/NME/nme/Assets.hx" module="nme.Assets">
        <TEXT/>
        <SOUND/>
        <MUSIC/>
        <IMAGE/>
        <FONT/>
        <BINARY/>
    </enum>
    <enum path="nme.LibraryType" params="" file="/Users/jbrichardet/Development/NME/nme/Assets.hx" module="nme.Assets">
        <XFL/>
        <SWF/>
    </enum>
    <class path="nme.Lib" params="" file="/Users/jbrichardet/Development/NME/nme/Lib.hx">
        <FULLSCREEN public="1" line="13" static="1">
            <x path="Int"/>
        </FULLSCREEN>
        <BORDERLESS public="1" line="14" static="1">
            <x path="Int"/>
        </BORDERLESS>
        <RESIZABLE public="1" line="15" static="1">
            <x path="Int"/>
        </RESIZABLE>
        <HARDWARE public="1" line="16" static="1">
            <x path="Int"/>
        </HARDWARE>
        <VSYNC public="1" line="17" static="1">
            <x path="Int"/>
        </VSYNC>
        <HW_AA public="1" line="18" static="1">
            <x path="Int"/>
        </HW_AA>
        <HW_AA_HIRES public="1" line="19" static="1">
            <x path="Int"/>
        </HW_AA_HIRES>
        <ALLOW_SHADERS public="1" line="20" static="1">
            <x path="Int"/>
        </ALLOW_SHADERS>
        <REQUIRE_SHADERS public="1" line="21" static="1">
            <x path="Int"/>
        </REQUIRE_SHADERS>
        <DEPTH_BUFFER public="1" line="22" static="1">
            <x path="Int"/>
        </DEPTH_BUFFER>
        <STENCIL_BUFFER public="1" line="23" static="1">
            <x path="Int"/>
        </STENCIL_BUFFER>
        <MIN_FLOAT_VALUE public="1" line="26" static="1">
            <x path="Float"/>
        </MIN_FLOAT_VALUE>
        <MAX_FLOAT_VALUE public="1" line="27" static="1">
            <x path="Float"/>
        </MAX_FLOAT_VALUE>
        <company public="1" get="accessor" set="null" static="1">
            <c path="String"/>
        </company>
        <current public="1" get="accessor" set="null" static="1">
            <t path="nme.display.MovieClip"/>
        </current>
        <file public="1" get="accessor" set="null" static="1">
            <c path="String"/>
        </file>
        <initHeight public="1" get="accessor" set="null" static="1">
            <x path="Int"/>
        </initHeight>
        <initWidth public="1" get="accessor" set="null" static="1">
            <x path="Int"/>
        </initWidth>
        <packageName public="1" get="accessor" set="null" static="1">
            <c path="String"/>
        </packageName>
        <stage public="1" get="accessor" set="null" static="1">
            <t path="nme.display.Stage"/>
        </stage>
        <version public="1" get="accessor" set="null" static="1">
            <c path="String"/>
        </version>
        <_company static="1">
            <c path="String"/>
        </_company>
        <_packageName static="1">
            <c path="String"/>
        </_packageName>
        <_version static="1">
            <c path="String"/>
        </_version>
        <_file static="1">
            <c path="String"/>
        </_file>
        <as public="1" params="T" get="inline" set="null" line="53" static="1">
            <f a="v:c">
                <d/>
                <x path="Class">
                    <c path="as.T"/>
                </x>
                <t path="Null">
                    <c path="as.T"/>
                </t>
            </f>
        </as>
        <attach public="1" set="method" line="59" static="1">
            <f a="name">
                <c path="String"/>
                <t path="nme.display.MovieClip"/>
            </f>
        </attach>
        <close public="1" set="method" line="69" static="1">
            <f a="">
                <x path="Void"/>
            </f>
            <haxe_doc>* Closes the application.
                * This is method is ignored in the Flash and HTML5 targets.
            </haxe_doc>
        </close>
        <create public="1" set="method" line="92" static="1">
            <f a="onLoaded:width:height:?frameRate:?color:?flags:?title:?icon:?stageClass">
                <f a="">
                    <x path="Void"/>
                </f>
                <x path="Int"/>
                <x path="Int"/>
                <x path="Float"/>
                <x path="Int"/>
                <x path="Int"/>
                <c path="String"/>
                <t path="nme.display.BitmapData"/>
                <x path="Class">
                    <t path="nme.display.Stage"/>
                </x>
                <x path="Void"/>
            </f>
            <haxe_doc>* Creates a new application window. If you are using the NME
                * command-line tools, this method will be called automatically
                * as a part of the default platform templates.
                * This is method is ignored in the Flash and HTML5 targets.
                * @param onLoaded A method callback that is called once the window is created.
                * @param width The requested width of the window. Use a width and height of 0 to request the full screen
                size.
                * @param height The requested height of the window. Use a width and height of 0 to request the full
                screen size.
                * @param frameRate The requested frame rate for the application.
                * @param color An RGB color to use for the application background.
                * @param flags A series of bit flags which can specify windowing options, like FULLSCREEN or HARDWARE
                * @param title The title to use when creating the application window.
                * @param icon An icon to use for the created application window.
            </haxe_doc>
        </create>
        <createManagedStage public="1" set="method" line="108" static="1">
            <f a="width:height">
                <x path="Int"/>
                <x path="Int"/>
                <unknown/>
            </f>
            <haxe_doc>* Creates a managed stage, for greater control customization and control
                * of application events.
                * This method is ignored in the Flash and HTML5 targets.
                * @param width The requested width of the managed stage.
                * @param height The requested width of the managed stage.
            </haxe_doc>
        </createManagedStage>
        <exit public="1" set="method" line="124" static="1">
            <f a="">
                <x path="Void"/>
            </f>
            <haxe_doc><![CDATA[* Similar to the <code>close()</code> method, but the current
	 * <code>Stage</code> object is given an opportunity to handle
	 * the quit event before the application process is ended.
	 * This method is ignored in the Flash and HTML5 targets.]]></haxe_doc>
        </exit>
        <forceClose public="1" set="method" line="138" static="1">
            <f a="">
                <x path="Void"/>
            </f>
            <haxe_doc>* Terminates the application process immediately without
                * performing a clean shutdown.
                * This method is ignored in the Flash and HTML5 targets.
            </haxe_doc>
        </forceClose>
        <getTimer public="1" get="inline" set="null" line="156" static="1">
            <f a="">
                <x path="Int"/>
            </f>
            <haxe_doc><![CDATA[* Returns the time in milliseconds, relative to the start of
	 * the application. This is a high performance call in order to
	 * help regulate time-based operations. Depending upon the
	 * target platform, this value may or may not be an absolute
	 * timestamp. If you need an exact time, you should use the
	 * <code>Date</code> object.
	 * @return		A relative time value in milliseconds.]]></haxe_doc>
        </getTimer>
        <getURL public="1" set="method" line="175" static="1">
            <f a="url:?target">
                <t path="nme.net.URLRequest"/>
                <c path="String"/>
                <x path="Void"/>
            </f>
            <haxe_doc>* Opens a browser window with the specified URL.
                * @param url The URL to open.
                * @param target An optional window target value.
            </haxe_doc>
        </getURL>
        <pause public="1" set="method" line="194" static="1">
            <f a="">
                <x path="Void"/>
            </f>
            <haxe_doc>* For supported platforms, the NME application will be
                * paused. This can help improve response times if fullscreen
                * native UI element is being used temporarily.
                * This method is ignored in the Flash and HTML5 targets.
            </haxe_doc>
        </pause>
        <postUICallback public="1" set="method" line="212" static="1">
            <f a="handler">
                <f a="">
                    <x path="Void"/>
                </f>
                <x path="Void"/>
            </f>
            <haxe_doc>* For some target platforms, NME operates on a separate thread
                * than the native application UI. In these cases, you can use this
                * method to make thread-safe calls to the native UI.
                *
                * If the platform does not require thread-safe callbacks, the
                * handler method will be called immediately.
                * @param handler The method handler you wish to call when the UI is available.
            </haxe_doc>
        </postUICallback>
        <resume public="1" set="method" line="229" static="1">
            <f a="">
                <x path="Void"/>
            </f>
            <haxe_doc>* Resumes the NME application. For certain platforms,
                * pausing the application can improve response times when
                * a fullscreen native UI element is being displayed.
                * This method is ignored in the Flash and HTML5 targets.
            </haxe_doc>
        </resume>
        <setPackage public="1" set="method" line="248" static="1">
            <f a="company:file:packageName:version">
                <c path="String"/>
                <c path="String"/>
                <c path="String"/>
                <c path="String"/>
                <x path="Void"/>
            </f>
            <haxe_doc>* Specifies meta-data for the running application. If you are using
                * the NME command-line tools, this method will be called automatically
                * as a part of the default platform templates.
                * This method is ignored in the Flash and HTML5 targets.
                * @param company The company name for the application.
                * @param file The file name for the application.
                * @param packageName The package name of the application.
                * @param version The version string of the application.
            </haxe_doc>
        </setPackage>
        <trace public="1" set="method" line="266" static="1">
            <f a="arg">
                <d/>
                <x path="Void"/>
            </f>
            <haxe_doc><![CDATA[* Sends a <code>trace</code> call for the current platform.
	 * @param	arg]]></haxe_doc>
        </trace>
        <get_company set="method" line="285" static="1">
            <f a="">
                <c path="String"/>
            </f>
        </get_company>
        <get_current set="method" line="297" static="1">
            <f a="">
                <t path="nme.display.MovieClip"/>
            </f>
        </get_current>
        <get_file set="method" line="311" static="1">
            <f a="">
                <c path="String"/>
            </f>
        </get_file>
        <get_initHeight set="method" line="323" static="1">
            <f a="">
                <x path="Int"/>
            </f>
        </get_initHeight>
        <get_initWidth set="method" line="333" static="1">
            <f a="">
                <x path="Int"/>
            </f>
        </get_initWidth>
        <get_packageName set="method" line="343" static="1">
            <f a="">
                <c path="String"/>
            </f>
        </get_packageName>
        <get_stage set="method" line="355" static="1">
            <f a="">
                <t path="nme.display.Stage"/>
            </f>
        </get_stage>
        <get_version set="method" line="367" static="1">
            <f a="">
                <c path="String"/>
            </f>
        </get_version>
    </class>
    <typedef path="nme._Vector.VectorData" params="T" file="/Users/jbrichardet/Development/NME/nme/Vector.hx"
             private="1" module="nme.Vector">
        <c path="flash.Vector">
            <c path="nme._Vector.VectorData.T"/>
        </c>
    </typedef>
    <abstract path="nme.Vector" params="T" file="/Users/jbrichardet/Development/NME/nme/Vector.hx">
        <from>
            <c path="Array">
                <c path="fromArray.U"/>
            </c>
        </from>
        <meta>
            <m n=":arrayAccess"/>
        </meta>
    </abstract>
    <class path="nme._Vector.Vector_Impl_" params="" file="/Users/jbrichardet/Development/NME/nme/Vector.hx" private="1"
           module="nme.Vector">
        <length public="1" get="accessor" set="accessor" static="1">
            <x path="Int"/>
            <meta>
                <m n=":impl"/>
            </meta>
        </length>
        <fixed public="1" get="accessor" set="accessor" static="1">
            <x path="Bool"/>
            <meta>
                <m n=":impl"/>
            </meta>
        </fixed>
        <_new public="1" get="inline" set="null" line="29" static="1">
            <f a="?length:?fixed">
                <x path="Int"/>
                <x path="Bool"/>
                <t path="nme._Vector.VectorData">
                    <c path="nme.Vector.T"/>
                </t>
            </f>
            <meta>
                <m n=":impl"/>
            </meta>
        </_new>
        <concat public="1" set="method" line="40" static="1">
            <f a="this:?a">
                <t path="nme._Vector.VectorData">
                    <c path="nme.Vector.T"/>
                </t>
                <t path="nme._Vector.VectorData">
                    <c path="nme.Vector.T"/>
                </t>
                <x path="nme.Vector">
                    <c path="nme.Vector.T"/>
                </x>
            </f>
            <meta>
                <m n=":impl"/>
            </meta>
        </concat>
        <copy public="1" set="method" line="47" static="1">
            <f a="this">
                <t path="nme._Vector.VectorData">
                    <c path="nme.Vector.T"/>
                </t>
                <x path="nme.Vector">
                    <c path="nme.Vector.T"/>
                </x>
            </f>
            <meta>
                <m n=":impl"/>
            </meta>
        </copy>
        <iterator public="1" params="T" set="method" line="58" static="1">
            <f a="this">
                <t path="nme._Vector.VectorData">
                    <c path="iterator.T"/>
                </t>
                <t path="Iterator">
                    <c path="iterator.T"/>
                </t>
            </f>
            <meta>
                <m n=":impl"/>
            </meta>
        </iterator>
        <join public="1" set="method" line="69" static="1">
            <f a="this:sep">
                <t path="nme._Vector.VectorData">
                    <c path="nme.Vector.T"/>
                </t>
                <c path="String"/>
                <c path="String"/>
            </f>
            <meta>
                <m n=":impl"/>
            </meta>
        </join>
        <pop public="1" set="method" line="76" static="1">
            <f a="this">
                <t path="nme._Vector.VectorData">
                    <c path="nme.Vector.T"/>
                </t>
                <t path="Null">
                    <c path="nme.Vector.T"/>
                </t>
            </f>
            <meta>
                <m n=":impl"/>
            </meta>
        </pop>
        <push public="1" set="method" line="83" static="1">
            <f a="this:x">
                <t path="nme._Vector.VectorData">
                    <c path="nme.Vector.T"/>
                </t>
                <c path="nme.Vector.T"/>
                <x path="Int"/>
            </f>
            <meta>
                <m n=":impl"/>
            </meta>
        </push>
        <reverse public="1" set="method" line="90" static="1">
            <f a="this">
                <t path="nme._Vector.VectorData">
                    <c path="nme.Vector.T"/>
                </t>
                <x path="Void"/>
            </f>
            <meta>
                <m n=":impl"/>
            </meta>
        </reverse>
        <shift public="1" set="method" line="97" static="1">
            <f a="this">
                <t path="nme._Vector.VectorData">
                    <c path="nme.Vector.T"/>
                </t>
                <t path="Null">
                    <c path="nme.Vector.T"/>
                </t>
            </f>
            <meta>
                <m n=":impl"/>
            </meta>
        </shift>
        <unshift public="1" set="method" line="104" static="1">
            <f a="this:x">
                <t path="nme._Vector.VectorData">
                    <c path="nme.Vector.T"/>
                </t>
                <c path="nme.Vector.T"/>
                <x path="Void"/>
            </f>
            <meta>
                <m n=":impl"/>
            </meta>
        </unshift>
        <slice public="1" set="method" line="111" static="1">
            <f a="this:?pos:?end">
                <t path="nme._Vector.VectorData">
                    <c path="nme.Vector.T"/>
                </t>
                <x path="Int"/>
                <x path="Int"/>
                <x path="nme.Vector">
                    <c path="nme.Vector.T"/>
                </x>
            </f>
            <meta>
                <m n=":impl"/>
            </meta>
        </slice>
        <sort public="1" set="method" line="118" static="1">
            <f a="this:f">
                <t path="nme._Vector.VectorData">
                    <c path="nme.Vector.T"/>
                </t>
                <f a=":">
                    <c path="nme.Vector.T"/>
                    <c path="nme.Vector.T"/>
                    <x path="Int"/>
                </f>
                <x path="Void"/>
            </f>
            <meta>
                <m n=":impl"/>
            </meta>
        </sort>
        <splice public="1" set="method" line="125" static="1">
            <f a="this:pos:len">
                <t path="nme._Vector.VectorData">
                    <c path="nme.Vector.T"/>
                </t>
                <x path="Int"/>
                <x path="Int"/>
                <x path="nme.Vector">
                    <c path="nme.Vector.T"/>
                </x>
            </f>
            <meta>
                <m n=":impl"/>
            </meta>
        </splice>
        <toString public="1" set="method" line="132" static="1">
            <f a="this">
                <t path="nme._Vector.VectorData">
                    <c path="nme.Vector.T"/>
                </t>
                <c path="String"/>
            </f>
            <meta>
                <m n=":impl"/>
            </meta>
        </toString>
        <indexOf public="1" set="method" line="139" static="1">
            <f a="this:x:?from">
                <t path="nme._Vector.VectorData">
                    <c path="nme.Vector.T"/>
                </t>
                <c path="nme.Vector.T"/>
                <x path="Int"/>
                <x path="Int"/>
            </f>
            <meta>
                <m n=":impl"/>
            </meta>
        </indexOf>
        <lastIndexOf public="1" set="method" line="153" static="1">
            <f a="this:x:?from">
                <t path="nme._Vector.VectorData">
                    <c path="nme.Vector.T"/>
                </t>
                <c path="nme.Vector.T"/>
                <x path="Int"/>
                <x path="Int"/>
            </f>
            <meta>
                <m n=":impl"/>
            </meta>
        </lastIndexOf>
        <ofArray public="1" params="T" get="inline" set="null" line="169" static="1">
            <f a="a">
                <c path="Array">
                    <d/>
                </c>
                <x path="nme.Vector">
                    <c path="ofArray.T"/>
                </x>
            </f>
        </ofArray>
        <convert public="1" params="T:U" get="inline" set="null" line="180" static="1">
            <f a="v">
                <t path="nme._Vector.VectorData">
                    <c path="convert.T"/>
                </t>
                <x path="nme.Vector">
                    <c path="convert.U"/>
                </x>
            </f>
        </convert>
        <fromArray public="1" params="T:U" get="inline" set="null" line="191" static="1">
            <f a="a">
                <c path="Array">
                    <c path="fromArray.U"/>
                </c>
                <x path="nme.Vector">
                    <c path="fromArray.T"/>
                </x>
            </f>
            <meta>
                <m n=":from"/>
            </meta>
        </fromArray>
        <get_length set="method" line="218" static="1">
            <f a="this">
                <t path="nme._Vector.VectorData">
                    <c path="nme.Vector.T"/>
                </t>
                <x path="Int"/>
            </f>
            <meta>
                <m n=":impl"/>
            </meta>
        </get_length>
        <set_length set="method" line="225" static="1">
            <f a="this:value">
                <t path="nme._Vector.VectorData">
                    <c path="nme.Vector.T"/>
                </t>
                <x path="Int"/>
                <x path="Int"/>
            </f>
            <meta>
                <m n=":impl"/>
            </meta>
        </set_length>
        <get_fixed set="method" line="236" static="1">
            <f a="this">
                <t path="nme._Vector.VectorData">
                    <c path="nme.Vector.T"/>
                </t>
                <x path="Bool"/>
            </f>
            <meta>
                <m n=":impl"/>
            </meta>
        </get_fixed>
        <set_fixed set="method" line="247" static="1">
            <f a="this:value">
                <t path="nme._Vector.VectorData">
                    <c path="nme.Vector.T"/>
                </t>
                <x path="Bool"/>
                <x path="Bool"/>
            </f>
            <meta>
                <m n=":impl"/>
            </meta>
        </set_fixed>
    </class>
    <class path="nme._Vector.VectorIter" params="T" file="/Users/jbrichardet/Development/NME/nme/Vector.hx" private="1"
           module="nme.Vector">
        <next public="1" set="method" line="284">
            <f a="">
                <c path="nme._Vector.VectorIter.T"/>
            </f>
        </next>
        <hasNext public="1" set="method" line="277">
            <f a="">
                <x path="Bool"/>
            </f>
        </hasNext>
        <vector>
            <c path="flash.Vector">
                <c path="nme._Vector.VectorIter.T"/>
            </c>
        </vector>
        <index>
            <x path="Int"/>
        </index>
        <new public="1" set="method" line="269">
            <f a="vector">
                <c path="flash.Vector">
                    <c path="nme._Vector.VectorIter.T"/>
                </c>
                <x path="Void"/>
            </f>
        </new>
    </class>
    <typedef path="nme.display.Bitmap" params="" file="/Users/jbrichardet/Development/NME/nme/display/Bitmap.hx">
        <c path="flash.display.Bitmap"/>
    </typedef>
    <typedef path="nme.display.BitmapData" params=""
             file="/Users/jbrichardet/Development/NME/nme/display/BitmapData.hx">
        <c path="flash.display.BitmapData"/>
    </typedef>
    <typedef path="nme.display.BlendMode" params="" file="/Users/jbrichardet/Development/NME/nme/display/BlendMode.hx">
        <e path="flash.display.BlendMode"/>
    </typedef>
    <typedef path="nme.display.DisplayObject" params=""
             file="/Users/jbrichardet/Development/NME/nme/display/DisplayObject.hx">
        <c path="flash.display.DisplayObject"/>
    </typedef>
    <typedef path="nme.display.DisplayObjectContainer" params=""
             file="/Users/jbrichardet/Development/NME/nme/display/DisplayObjectContainer.hx">
        <c path="flash.display.DisplayObjectContainer"/>
    </typedef>
    <typedef path="nme.display.Graphics" params="" file="/Users/jbrichardet/Development/NME/nme/display/Graphics.hx">
        <c path="flash.display.Graphics"/>
    </typedef>
    <typedef path="nme.display.MovieClip" params="" file="/Users/jbrichardet/Development/NME/nme/display/MovieClip.hx">
        <c path="flash.display.MovieClip"/>
    </typedef>
    <typedef path="nme.display.Shape" params="" file="/Users/jbrichardet/Development/NME/nme/display/Shape.hx">
        <c path="flash.display.Shape"/>
    </typedef>
    <typedef path="nme.display.SimpleButton" params=""
             file="/Users/jbrichardet/Development/NME/nme/display/SimpleButton.hx">
        <c path="flash.display.SimpleButton"/>
    </typedef>
    <typedef path="nme.display.Sprite" params="" file="/Users/jbrichardet/Development/NME/nme/display/Sprite.hx">
        <c path="flash.display.Sprite"/>
    </typedef>
    <typedef path="nme.display.Stage" params="" file="/Users/jbrichardet/Development/NME/nme/display/Stage.hx">
        <c path="flash.display.Stage"/>
    </typedef>
    <typedef path="nme.errors.Error" params="" file="/Users/jbrichardet/Development/NME/nme/errors/Error.hx">
        <c path="flash.errors.Error"/>
    </typedef>
    <typedef path="nme.events.Event" params="" file="/Users/jbrichardet/Development/NME/nme/events/Event.hx">
        <c path="flash.events.Event"/>
    </typedef>
    <typedef path="nme.events.EventDispatcher" params=""
             file="/Users/jbrichardet/Development/NME/nme/events/EventDispatcher.hx">
        <c path="flash.events.EventDispatcher"/>
    </typedef>
    <typedef path="nme.events.IEventDispatcher" params=""
             file="/Users/jbrichardet/Development/NME/nme/events/IEventDispatcher.hx">
        <c path="flash.events.IEventDispatcher"/>
    </typedef>
    <typedef path="nme.events.IOErrorEvent" params=""
             file="/Users/jbrichardet/Development/NME/nme/events/IOErrorEvent.hx">
        <c path="flash.events.IOErrorEvent"/>
    </typedef>
    <typedef path="nme.events.KeyboardEvent" params=""
             file="/Users/jbrichardet/Development/NME/nme/events/KeyboardEvent.hx">
        <c path="flash.events.KeyboardEvent"/>
    </typedef>
    <typedef path="nme.events.MouseEvent" params="" file="/Users/jbrichardet/Development/NME/nme/events/MouseEvent.hx">
        <c path="flash.events.MouseEvent"/>
    </typedef>
    <typedef path="nme.external.ExternalInterface" params=""
             file="/Users/jbrichardet/Development/NME/nme/external/ExternalInterface.hx">
        <c path="flash.external.ExternalInterface"/>
    </typedef>
    <typedef path="nme.filters.BitmapFilter" params=""
             file="/Users/jbrichardet/Development/NME/nme/filters/BitmapFilter.hx">
        <c path="flash.filters.BitmapFilter"/>
    </typedef>
    <typedef path="nme.filters.BitmapFilterQuality" params=""
             file="/Users/jbrichardet/Development/NME/nme/filters/BitmapFilterQuality.hx">
        <c path="flash.filters.BitmapFilterQuality"/>
    </typedef>
    <typedef path="nme.filters.DropShadowFilter" params=""
             file="/Users/jbrichardet/Development/NME/nme/filters/DropShadowFilter.hx">
        <c path="flash.filters.DropShadowFilter"/>
    </typedef>
    <typedef path="nme.geom.ColorTransform" params=""
             file="/Users/jbrichardet/Development/NME/nme/geom/ColorTransform.hx">
        <c path="flash.geom.ColorTransform"/>
    </typedef>
    <typedef path="nme.geom.Matrix" params="" file="/Users/jbrichardet/Development/NME/nme/geom/Matrix.hx">
        <c path="flash.geom.Matrix"/>
    </typedef>
    <typedef path="nme.geom.Point" params="" file="/Users/jbrichardet/Development/NME/nme/geom/Point.hx">
        <c path="flash.geom.Point"/>
    </typedef>
    <typedef path="nme.geom.Rectangle" params="" file="/Users/jbrichardet/Development/NME/nme/geom/Rectangle.hx">
        <c path="flash.geom.Rectangle"/>
    </typedef>
    <typedef path="nme.media.Sound" params="" file="/Users/jbrichardet/Development/NME/nme/media/Sound.hx">
        <c path="flash.media.Sound"/>
    </typedef>
    <typedef path="nme.media.SoundChannel" params=""
             file="/Users/jbrichardet/Development/NME/nme/media/SoundChannel.hx">
        <c path="flash.media.SoundChannel"/>
    </typedef>
    <typedef path="nme.media.SoundTransform" params=""
             file="/Users/jbrichardet/Development/NME/nme/media/SoundTransform.hx">
        <c path="flash.media.SoundTransform"/>
    </typedef>
    <typedef path="nme.net.SharedObject" params="" file="/Users/jbrichardet/Development/NME/nme/net/SharedObject.hx">
        <c path="flash.net.SharedObject"/>
    </typedef>
    <typedef path="nme.net.SharedObjectFlushStatus" params=""
             file="/Users/jbrichardet/Development/NME/nme/net/SharedObjectFlushStatus.hx">
        <c path="flash.net.SharedObjectFlushStatus"/>
    </typedef>
    <typedef path="nme.net.URLLoader" params="" file="/Users/jbrichardet/Development/NME/nme/net/URLLoader.hx">
        <c path="flash.net.URLLoader"/>
    </typedef>
    <typedef path="nme.net.URLRequest" params="" file="/Users/jbrichardet/Development/NME/nme/net/URLRequest.hx">
        <c path="flash.net.URLRequest"/>
    </typedef>
    <typedef path="nme.net.URLRequestMethod" params=""
             file="/Users/jbrichardet/Development/NME/nme/net/URLRequestMethod.hx">
        <c path="flash.net.URLRequestMethod"/>
    </typedef>
    <typedef path="nme.net.URLVariables" params="" file="/Users/jbrichardet/Development/NME/nme/net/URLVariables.hx">
        <c path="flash.net.URLVariables"/>
    </typedef>
    <typedef path="nme.text.Font" params="" file="/Users/jbrichardet/Development/NME/nme/text/Font.hx">
        <c path="flash.text.Font"/>
    </typedef>
    <typedef path="nme.text.TextField" params="" file="/Users/jbrichardet/Development/NME/nme/text/TextField.hx">
        <c path="flash.text.TextField"/>
    </typedef>
    <typedef path="nme.text.TextFieldAutoSize" params=""
             file="/Users/jbrichardet/Development/NME/nme/text/TextFieldAutoSize.hx">
        <e path="flash.text.TextFieldAutoSize"/>
    </typedef>
    <typedef path="nme.text.TextFormat" params="" file="/Users/jbrichardet/Development/NME/nme/text/TextFormat.hx">
        <c path="flash.text.TextFormat"/>
    </typedef>
    <typedef path="nme.text.TextFormatAlign" params=""
             file="/Users/jbrichardet/Development/NME/nme/text/TextFormatAlign.hx">
        <e path="flash.text.TextFormatAlign"/>
    </typedef>
    <typedef path="nme.ui.Keyboard" params="" file="/Users/jbrichardet/Development/NME/nme/ui/Keyboard.hx">
        <c path="flash.ui.Keyboard"/>
    </typedef>
    <typedef path="nme.utils.ByteArray" params="" file="/Users/jbrichardet/Development/NME/nme/utils/ByteArray.hx">
        <c path="flash.utils.ByteArray"/>
    </typedef>
    <typedef path="nme.utils.Timer" params="" file="/Users/jbrichardet/Development/NME/nme/utils/Timer.hx">
        <c path="flash.utils.Timer"/>
    </typedef>
</haxe>